
===== FILE: backend/.env =====
DATABASE_URL=postgresql+asyncpg://user:password@localhost/baocao
SECRET_KEY=Tori@@123!!

===== FILE: backend/alembic.ini =====
[alembic]
script_location = alembic
sqlalchemy.url = postgresql+asyncpg://user:password@localhost/baocao

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

===== FILE: backend/requirements.txt =====
fastapi
uvicorn[standard]
sqlalchemy
asyncpg
python-jose
passlib
bcrypt==3.2.0
pydantic
pydantic-settings
python-multipart
unidecode
alembic
psycopg2-binary


===== FILE: backend/run_test_ping.sh =====
#!/bin/bash
echo "Running FastAPI server at http://127.0.0.1:8000"
uvicorn backend.app.main:app --reload


===== FILE: backend/alembic\env.py =====
from logging.config import fileConfig
from sqlalchemy import pool
from alembic import context
from app.models import user, loai_baocao, report  # Import models
from app.database import Base
from app.config import settings

config = context.config
fileConfig(config.config_file_name)
target_metadata = Base.metadata

def run_migrations_offline():
    context.configure(
        url=settings.DATABASE_URL,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    from sqlalchemy import create_engine

    connectable = create_engine(settings.DATABASE_URL.replace("asyncpg", "psycopg2"))

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

===== FILE: backend/alembic\script.py.mako =====


===== FILE: backend/alembic\versions\20250416_152221_create_loai_baocao.py =====
"""create loai_baocao

Revision ID: 20250416_152221
Revises: 
Create Date: 2025-04-16 15:22:21

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20250416_152221'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.create_table(
        'loai_baocao',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('ten_loai', sa.String(), nullable=False),
        sa.Column('thoi_gian_bat_dau', sa.DateTime(), nullable=False),
        sa.Column('han_gui', sa.DateTime(), nullable=False),
        sa.Column('dinh_ky', sa.Integer(), nullable=False, server_default='0'),
    )


def downgrade():
    op.drop_table('loai_baocao')

===== FILE: backend/app\config.py =====
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"

    class Config:
        env_file = ".env"

settings = Settings()

===== FILE: backend/app\database.py =====
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .config import settings

DATABASE_URL = settings.DATABASE_URL

engine = create_async_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

async def get_db():
    async with SessionLocal() as session:
        yield session


===== FILE: backend/app\main.py =====
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routers import auth, user
from .database import engine, Base
from .routers import report
from .routers import loai_baocao

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth.router, prefix="/auth", tags=["Auth"])
app.include_router(user.router, prefix="/admin/user", tags=["Admin User"])
app.include_router(report.router, prefix="/report", tags=["Report"])
app.include_router(loai_baocao.router, prefix="/admin/loaibaocao", tags=["Loại báo cáo"])

@app.on_event("startup")
async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

@app.get("/ping")
async def ping():
    return {"msg": "pong"}





===== FILE: backend/app\dependencies\auth.py =====
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from ..config import settings
from jose import JWTError, jwt
from ..schemas.user import UserOut
from ..database import get_db
from ..services.auth import get_user_by_username
from sqlalchemy.ext.asyncio import AsyncSession

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")
SECRET_KEY = settings.SECRET_KEY
ALGORITHM = "HS256"

async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db)) -> UserOut:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        db_user = await get_user_by_username(db, username)
        if db_user is None:
            raise credentials_exception
        return UserOut.model_validate(db_user)
    except JWTError:
        raise credentials_exception

async def get_current_admin(user: UserOut = Depends(get_current_user)):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Không có quyền truy cập")
    return user


===== FILE: backend/app\models\loai_baocao.py =====

from sqlalchemy import Column, Integer, String, DateTime
from ..database import Base

class LoaiBaoCao(Base):
    __tablename__ = "loai_baocao"

    id = Column(Integer, primary_key=True, index=True)
    ten_loai = Column(String, nullable=False)
    from sqlalchemy import DateTime
    thoi_gian_bat_dau = Column(DateTime(timezone=True), nullable=False)
    han_gui = Column(DateTime(timezone=True), nullable=False)
    dinh_ky = Column(Integer, default=0)  # đơn vị giờ/ngày/tuần...


===== FILE: backend/app\models\report.py =====

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, DateTime
from sqlalchemy.sql import func
from ..database import Base

class Report(Base):
    __tablename__ = "reports"

    id = Column(Integer, primary_key=True, index=True)
    loai_baocao_id = Column(Integer, ForeignKey("loai_baocao.id"))
    user_id = Column(Integer, ForeignKey("users.id"))
    filename = Column(String)
    filesize = Column(Integer)
    has_event = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    is_late = Column(Boolean, default=False)
    late_seconds = Column(Integer, default=0)


===== FILE: backend/app\models\user.py =====
from sqlalchemy import Column, Integer, String, Boolean
from ..database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    ten_chi_nhanh = Column(String, nullable=True)
    is_admin = Column(Boolean, default=False)


===== FILE: backend/app\routers\auth.py =====
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession

from ..schemas.user import UserCreate, UserOut
from ..models.user import User
from ..services.auth import get_password_hash, verify_password, create_access_token, get_user_by_username
from ..database import get_db

router = APIRouter()

@router.post("/register", response_model=UserOut)
async def register(user: UserCreate, db: AsyncSession = Depends(get_db)):
    existing_user = await get_user_by_username(db, user.username)
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    hashed_pw = get_password_hash(user.password)
    new_user = User(
        username=user.username,
        hashed_password=hashed_pw,
        ten_chi_nhanh=user.ten_chi_nhanh,
        is_admin=user.is_admin
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return new_user

@router.post("/login")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    user = await get_user_by_username(db, form_data.username)
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    token = create_access_token(data={"sub": user.username})
    return {"access_token": token, "token_type": "bearer"}


===== FILE: backend/app\routers\loai_baocao.py =====

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from ..schemas.loai_baocao import LoaiBaoCaoCreate, LoaiBaoCaoOut
from ..models.loai_baocao import LoaiBaoCao
from ..dependencies.auth import get_current_admin, get_current_user
from ..database import get_db

router = APIRouter()

@router.get("/", response_model=list[LoaiBaoCaoOut])
async def get_all(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao))
    return result.scalars().all()

@router.post("/", response_model=LoaiBaoCaoOut)
async def create(item: LoaiBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    obj = LoaiBaoCao(**item.dict())
    db.add(obj)
    await db.commit()
    await db.refresh(obj)
    return obj

@router.put("/{id}", response_model=LoaiBaoCaoOut)
async def update(id: int, item: LoaiBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao).where(LoaiBaoCao.id == id))
    obj = result.scalar_one_or_none()
    if not obj:
        raise HTTPException(status_code=404, detail="Không tìm thấy")
    for k, v in item.dict().items():
        setattr(obj, k, v)
    await db.commit()
    await db.refresh(obj)
    return obj

@router.delete("/{id}")
async def delete(id: int, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao).where(LoaiBaoCao.id == id))
    obj = result.scalar_one_or_none()
    if not obj:
        raise HTTPException(status_code=404, detail="Không tìm thấy")
    await db.delete(obj)
    await db.commit()
    return {"msg": "Đã xoá"}

@router.get("/public", response_model=list[LoaiBaoCaoOut], tags=["Loại báo cáo công khai"])
async def get_all_public(db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):
    result = await db.execute(select(LoaiBaoCao))
    return result.scalars().all()

===== FILE: backend/app\routers\report.py =====

from fastapi import APIRouter, UploadFile, File, Form, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..database import get_db
from ..models.report import Report
from ..models.loai_baocao import LoaiBaoCao
from ..schemas.report import ReportOut
from ..dependencies.auth import get_current_user
from datetime import datetime
import os
from pathlib import Path
from unidecode import unidecode

router = APIRouter()

@router.post("/upload", response_model=ReportOut)
async def upload_report(
    file: UploadFile = File(...),
    loai_baocao_id: int = Form(...),
    has_event: bool = Form(True),
    db: AsyncSession = Depends(get_db),
    user = Depends(get_current_user)
):
    loai = await db.get(LoaiBaoCao, loai_baocao_id)
    if not loai:
        raise HTTPException(status_code=404, detail="Loại báo cáo không tồn tại")

    now = datetime.now()
    is_late = now > loai.han_gui
    late_seconds = int((now - loai.han_gui).total_seconds()) if is_late else 0

    ext = file.filename.split(".")[-1]
    filename_raw = f"{user.ten_chi_nhanh}_{loai.ten_loai}_{now.strftime('%Y-%m-%d_%H-%M-%S')}.{ext}"
    filename = unidecode(filename_raw).replace(" ", "_")
    base_dir = Path("static/reports") / unidecode(loai.ten_loai).replace(" ", "_") / now.strftime("%Y-%m-%d")
    if loai.ten_loai.lower() == "báo cáo ngày":
        base_dir = base_dir / ("co_su_kien" if has_event else "khong_su_kien")
    os.makedirs(base_dir, exist_ok=True)

    path = base_dir / filename
    content = await file.read()
    with open(path, "wb") as f:
        f.write(content)

    new_report = Report(
        loai_baocao_id=loai_baocao_id,
        user_id=user.id,
        filename=str(filename),
        filesize=len(content),
        has_event=has_event,
        is_late=is_late,
        late_seconds=late_seconds
    )
    db.add(new_report)
    await db.commit()
    await db.refresh(new_report)
    return new_report


===== FILE: backend/app\routers\user.py =====
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..schemas.user import UserCreate, UserOut
from ..models.user import User
from ..services.auth import get_user_by_username, get_password_hash
from ..database import get_db
from ..dependencies.auth import get_current_admin
from sqlalchemy.future import select

router = APIRouter()

@router.get("/", response_model=list[UserOut])
async def list_users(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User))
    return result.scalars().all()

@router.post("/", response_model=UserOut)
async def create_user(user: UserCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    if await get_user_by_username(db, user.username):
        raise HTTPException(status_code=400, detail="Username đã tồn tại")
    new_user = User(
        username=user.username,
        hashed_password=get_password_hash(user.password),
        ten_chi_nhanh=user.ten_chi_nhanh,
        is_admin=user.is_admin
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return new_user

@router.put("/{user_id}", response_model=UserOut)
async def update_user(user_id: int, user: UserCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User).where(User.id == user_id))
    db_user = result.scalar_one_or_none()
    if not db_user:
        raise HTTPException(status_code=404, detail="User không tồn tại")
    db_user.username = user.username
    db_user.hashed_password = get_password_hash(user.password)
    db_user.ten_chi_nhanh = user.ten_chi_nhanh
    db_user.is_admin = user.is_admin
    await db.commit()
    await db.refresh(db_user)
    return db_user

@router.delete("/{user_id}")
async def delete_user(user_id: int, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User).where(User.id == user_id))
    db_user = result.scalar_one_or_none()
    if not db_user:
        raise HTTPException(status_code=404, detail="User không tồn tại")
    await db.delete(db_user)
    await db.commit()
    return {"msg": "Đã xoá tài khoản thành công"}


===== FILE: backend/app\schemas\loai_baocao.py =====

from pydantic import BaseModel
from datetime import datetime

class LoaiBaoCaoBase(BaseModel):
    ten_loai: str
    thoi_gian_bat_dau: datetime
    han_gui: datetime
    dinh_ky: int = 0

class LoaiBaoCaoCreate(LoaiBaoCaoBase):
    pass

class LoaiBaoCaoOut(LoaiBaoCaoBase):
    id: int

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\report.py =====

from pydantic import BaseModel
from datetime import datetime

class ReportOut(BaseModel):
    id: int
    filename: str
    filesize: int
    created_at: datetime
    is_late: bool
    late_seconds: int
    has_event: bool

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\user.py =====
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str
    ten_chi_nhanh: str = ""
    is_admin: bool = False

class UserLogin(BaseModel):
    username: str
    password: str

class UserOut(BaseModel):
    id: int
    username: str
    ten_chi_nhanh: str
    is_admin: bool

    class Config:
        from_attributes = True


===== FILE: backend/app\services\auth.py =====
from passlib.context import CryptContext
from datetime import datetime, timedelta, timezone
from jose import jwt
from ..config import settings

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from ..models.user import User

SECRET_KEY = settings.SECRET_KEY
ALGORITHM = settings.ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_user_by_username(db: AsyncSession, username: str):
    result = await db.execute(select(User).filter(User.username == username))
    return result.scalar_one_or_none()


===== FILE: frontend/index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Report System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


===== FILE: frontend/postcss.config.js =====
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== FILE: frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


===== FILE: frontend/vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


===== FILE: frontend/src\App.jsx =====
import React from "react";

function App() {
  return (
    <div className="p-4 text-center text-white bg-blue-600">
      <h1 className="text-2xl font-bold">Hệ thống báo cáo đã khởi tạo!</h1>
    </div>
  );
}

export default App;


===== FILE: frontend/src\index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;


===== FILE: frontend/src\main.jsx =====
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import { RouterProvider } from 'react-router-dom'
import { router } from './router/router.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
)


===== FILE: frontend/src\router.jsx =====


===== FILE: frontend/src\components\CountdownClock.jsx =====
import React, { useEffect, useState } from "react";

function CountdownClock({ deadline }) {
  const [timeLeft, setTimeLeft] = useState(getTimeLeft());

  function getTimeLeft() {
    const now = new Date();
    const diff = Math.max(0, deadline - now);
    const seconds = Math.floor((diff / 1000) % 60);
    const minutes = Math.floor((diff / 1000 / 60) % 60);
    const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    return { days, hours, minutes, seconds };
  }

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(getTimeLeft());
    }, 1000);
    return () => clearInterval(timer);
  }, [deadline]);

  return (
    <div className="mt-2 text-sm">
      Còn lại: {timeLeft.days} ngày {timeLeft.hours} giờ {timeLeft.minutes} phút {timeLeft.seconds} giây
    </div>
  );
}

export default CountdownClock;


===== FILE: frontend/src\pages\AdminAccounts.jsx =====

import React, { useEffect, useState } from "react";
import { fetchUsers, createUser, updateUser, deleteUser } from "../services/userService";

function AdminAccounts() {
  const [users, setUsers] = useState([]);
  const [form, setForm] = useState({
    username: "",
    password: "",
    ten_chi_nhanh: "",
    is_admin: false
  });
  const [editId, setEditId] = useState(null);
  const [error, setError] = useState("");

  const token = localStorage.getItem("token");

  useEffect(() => {
    loadUsers();
  }, []);

  const loadUsers = async () => {
    try {
      const res = await fetchUsers(token);
      setUsers(res.data);
    } catch (err) {
      setError("Không thể tải danh sách người dùng.");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await updateUser(editId, form, token);
      } else {
        await createUser(form, token);
      }
      setForm({ username: "", password: "", ten_chi_nhanh: "", is_admin: false });
      setEditId(null);
      loadUsers();
    } catch (err) {
      setError("Lỗi khi lưu tài khoản.");
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Xoá tài khoản này?")) {
      await deleteUser(id, token);
      loadUsers();
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Quản lý tài khoản chi nhánh</h2>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="mb-4 space-y-2">
        <input
          value={form.username || ""}
          onChange={(e) => setForm({ ...form, username: e.target.value })}
          placeholder="Username"
          className="border px-2 py-1"
          required
        />
        <input
          value={form.password || ""}
          onChange={(e) => setForm({ ...form, password: e.target.value })}
          placeholder="Password"
          type="password"
          className="border px-2 py-1"
          required
        />
        <input
          value={form.ten_chi_nhanh || ""}
          onChange={(e) => setForm({ ...form, ten_chi_nhanh: e.target.value })}
          placeholder="Tên chi nhánh"
          className="border px-2 py-1"
        />
        <label className="inline-flex items-center">
          <input
            type="checkbox"
            checked={form.is_admin}
            onChange={(e) => setForm({ ...form, is_admin: e.target.checked })}
            className="mr-1"
          />
          Admin?
        </label>
        <button type="submit" className="bg-blue-600 text-white px-4 py-1 rounded">
          {editId ? "Cập nhật" : "Tạo mới"}
        </button>
      </form>
      <table className="w-full table-auto border">
        <thead>
          <tr className="bg-gray-200">
            <th>ID</th><th>Username</th><th>Tên chi nhánh</th><th>Admin</th><th>Hành động</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id} className="text-center border-t">
              <td>{user.id}</td>
              <td>{user.username}</td>
              <td>{user.ten_chi_nhanh}</td>
              <td>{user.is_admin ? "✔" : ""}</td>
              <td>
                <button
                  onClick={() => {
                    setForm({
                      username: user.username || "",
                      password: "",
                      ten_chi_nhanh: user.ten_chi_nhanh || "",
                      is_admin: user.is_admin || false
                    });
                    setEditId(user.id);
                  }}
                  className="text-blue-600 mr-2"
                >
                  Sửa
                </button>
                <button
                  onClick={() => handleDelete(user.id)}
                  className="text-red-600"
                >
                  Xoá
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminAccounts;


===== FILE: frontend/src\pages\LoginPage.jsx =====
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const form = new FormData();
      form.append("username", username);
      form.append("password", password);

      const response = await axios.post("http://localhost:8000/auth/login", form);
      localStorage.setItem("token", response.data.access_token);
      navigate("dashboard");
    } catch (err) {
      setError("Sai tài khoản hoặc mật khẩu");
    }
  };

  return (
    <div className="flex items-center justify-center h-screen bg-gray-100">
      <form onSubmit={handleLogin} className="bg-white p-6 rounded shadow-md w-80">
        <h2 className="text-xl font-bold mb-4 text-center">Đăng nhập</h2>
        {error && <p className="text-red-500 mb-2">{error}</p>}
        <input
          type="text"
          placeholder="Tên đăng nhập"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="w-full mb-3 px-3 py-2 border rounded"
          required
        />
        <input
          type="password"
          placeholder="Mật khẩu"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full mb-4 px-3 py-2 border rounded"
          required
        />
        <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">
          Đăng nhập
        </button>
      </form>
    </div>
  );
}

export default LoginPage;


===== FILE: frontend/src\pages\UploadReport.jsx =====
import React, { useEffect, useState } from "react";
import axios from "axios";
import CountdownClock from "../components/CountdownClock";

function UploadReport() {
  const [loaiBaoCaos, setLoaiBaoCaos] = useState([]);
  const [selectedId, setSelectedId] = useState("");
  const [selectedLoai, setSelectedLoai] = useState(null);
  const [hasEvent, setHasEvent] = useState(true);
  const [file, setFile] = useState(null);
  const [statusMsg, setStatusMsg] = useState("");
  const token = localStorage.getItem("token");

  useEffect(() => {
    axios
      .get("http://localhost:8000/admin/loaibaocao/public", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => setLoaiBaoCaos(res.data))
      .catch(() => setStatusMsg("Không thể tải loại báo cáo"));
  }, []);

  useEffect(() => {
    const loai = loaiBaoCaos.find((l) => l.id === parseInt(selectedId));
    setSelectedLoai(loai);
  }, [selectedId, loaiBaoCaos]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file || !selectedId) return setStatusMsg("Vui lòng chọn loại và file");

    const formData = new FormData();
    formData.append("file", file);
    formData.append("loai_baocao_id", selectedId);
    formData.append("has_event", hasEvent);

    try {
      await axios.post("http://localhost:8000/report/upload", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });
      setStatusMsg("Gửi báo cáo thành công");
    } catch (err) {
      setStatusMsg("Gửi báo cáo thất bại");
    }
  };

  const isLate = selectedLoai && new Date() > new Date(selectedLoai.han_gui);
  const deadline = selectedLoai ? new Date(selectedLoai.han_gui) : null;

  return (
    <div className="p-4 max-w-xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Gửi báo cáo</h2>
      {statusMsg && <p className="mb-2 text-center text-blue-600">{statusMsg}</p>}

      <form onSubmit={handleSubmit} className="space-y-4">
        <select
          value={selectedId}
          onChange={(e) => setSelectedId(e.target.value)}
          className="w-full border px-2 py-2 rounded"
          required
        >
          <option value="">-- Chọn loại báo cáo --</option>
          {loaiBaoCaos.map((l) => (
            <option key={l.id} value={l.id}>
              {l.ten_loai}
            </option>
          ))}
        </select>

        {selectedLoai?.ten_loai.toLowerCase().includes("ngày") && (
          <div className="space-x-4">
            <label>
              <input
                type="radio"
                name="hasEvent"
                checked={hasEvent === true}
                onChange={() => setHasEvent(true)}
              />
              <span className="ml-1">Có sự kiện đáng chú ý</span>
            </label>
            <label>
              <input
                type="radio"
                name="hasEvent"
                checked={hasEvent === false}
                onChange={() => setHasEvent(false)}
              />
              <span className="ml-1">Không có sự kiện đáng chú ý</span>
            </label>
          </div>
        )}

        <input
          type="file"
          accept="*"
          onChange={(e) => setFile(e.target.files[0])}
          className="w-full"
        />

        {deadline && (
          <div className={`p-2 rounded text-white ${isLate ? "bg-red-500" : "bg-green-600"}`}>
            Hạn gửi: {deadline.toLocaleString("vi-VN")}
            <CountdownClock deadline={deadline} />
          </div>
        )}

        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          Gửi báo cáo
        </button>
      </form>
    </div>
  );
}

export default UploadReport;


===== FILE: frontend/src\router\router.jsx =====
import { createBrowserRouter } from "react-router-dom";
import App from "../App";
import LoginPage from "../pages/LoginPage";
import AdminAccounts from "../pages/AdminAccounts";
import UploadReport from "../pages/UploadReport";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <LoginPage />,
  },
  {
    path: "/dashboard",
    element: <App />,
  },
  {
    path: "/admin/accounts",
    element: <AdminAccounts />,
  },
  {
    path: "/upload-report",
    element: <UploadReport />,
  }
]);

===== FILE: frontend/src\services\api.js =====
import axios from "axios";

const instance = axios.create({
  baseURL: "http://localhost:8000", // hoặc URL thật khi deploy
  headers: {
    "Content-Type": "application/json",
  },
});

export default instance;

===== FILE: frontend/src\services\userService.js =====

import axios from "./api";

export const fetchUsers = (token) =>
  axios.get("/admin/user", {
    headers: { Authorization: `Bearer ${token}` }
  });

export const createUser = (data, token) =>
  axios.post("/admin/user", data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const updateUser = (id, data, token) =>
  axios.put(`/admin/user/${id}`, data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const deleteUser = (id, token) =>
  axios.delete(`/admin/user/${id}`, {
    headers: { Authorization: `Bearer ${token}` }
  });

