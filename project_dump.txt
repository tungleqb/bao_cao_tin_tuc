
===== FILE: backend/requirements.txt =====
fastapi
uvicorn[standard]
sqlalchemy
asyncpg
python-jose
passlib[bcrypt]
pydantic
python-multipart


===== FILE: backend/app\config.py =====
import os
from pydantic import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "postgresql+asyncpg://user:password@localhost/dbname"
    SECRET_KEY: str = "your_secret_key"
    ALGORITHM: str = "HS256"

settings = Settings()


===== FILE: backend/app\main.py =====
from fastapi import FastAPI
from .routers import auth

app = FastAPI()

app.include_router(auth.router, prefix="/auth", tags=["Auth"])

@app.get("/ping")
async def ping():
    return {"msg": "pong"}


===== FILE: backend/app\dependencies\auth.py =====
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from ..schemas.user import UserOut

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")
SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"

def get_current_user(token: str = Depends(oauth2_scheme)) -> UserOut:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        return UserOut(id=1, username=username, ten_chi_nhanh="Test", is_admin=False)
    except JWTError:
        raise credentials_exception


===== FILE: backend/app\models\user.py =====
from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    ten_chi_nhanh = Column(String)
    is_admin = Column(Boolean, default=False)


===== FILE: backend/app\routers\auth.py =====
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from ..schemas.user import UserCreate, UserLogin, UserOut
from ..services.auth import create_access_token, get_password_hash, verify_password

router = APIRouter()

fake_users_db = {}

@router.post("/register", response_model=UserOut)
def register(user: UserCreate):
    if user.username in fake_users_db:
        raise HTTPException(status_code=400, detail="Username already registered")
    hashed_password = get_password_hash(user.password)
    user_data = {
        "id": len(fake_users_db) + 1,
        "username": user.username,
        "ten_chi_nhanh": user.ten_chi_nhanh,
        "hashed_password": hashed_password,
        "is_admin": user.is_admin
    }
    fake_users_db[user.username] = user_data
    return UserOut(**user_data)

@router.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = fake_users_db.get(form_data.username)
    if not user or not verify_password(form_data.password, user["hashed_password"]):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    token = create_access_token(data={"sub": user["username"]})
    return {"access_token": token, "token_type": "bearer"}


===== FILE: backend/app\schemas\user.py =====
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str
    ten_chi_nhanh: str = ""
    is_admin: bool = False

class UserLogin(BaseModel):
    username: str
    password: str

class UserOut(BaseModel):
    id: int
    username: str
    ten_chi_nhanh: str
    is_admin: bool

    class Config:
        orm_mode = True


===== FILE: backend/app\services\auth.py =====
from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import JWTError, jwt

SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


===== FILE: frontend/index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Report System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


===== FILE: frontend/postcss.config.js =====
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== FILE: frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


===== FILE: frontend/vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


===== FILE: frontend/src\App.jsx =====
import React from "react";

function App() {
  return (
    <div className="p-4 text-center text-white bg-blue-600">
      <h1 className="text-2xl font-bold">Hệ thống báo cáo đã khởi tạo!</h1>
    </div>
  );
}

export default App;


===== FILE: frontend/src\index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;


===== FILE: frontend/src\main.jsx =====
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)


===== FILE: frontend/src\router.jsx =====


===== FILE: frontend/src\router\router.jsx =====
import { createBrowserRouter } from "react-router-dom";
import App from "../App";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <App />,
  },
]);

