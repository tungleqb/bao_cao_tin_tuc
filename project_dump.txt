
===== FILE: backend/.env =====
DATABASE_URL=postgresql+asyncpg://user:password@localhost/baocao
SECRET_KEY=Tori@@123!!

===== FILE: backend/alembic.ini =====
[alembic]
script_location = alembic
sqlalchemy.url = postgresql+asyncpg://user:password@localhost/baocao

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

===== FILE: backend/promts.txt =====
Có sự thay đổi về logic dự án.
1. Mô tả dự án: 
	Xây dựng website báo cáo tin tức, sự kiện diễn ra trong ngày, tuần, tháng, đột xuất (mới bổ sung) cho các đơn vị hành chính.
	Mỗi đơn vị hành chính sẽ được quản trị viên cấp một tài khoản (gọi là tài khoản chi nhánh) để đăng nhập (không đổi).
	Mỗi tài khoản chi nhánh sau khi đăng nhập sẽ chọn loại báo cáo. Các loại báo cáo gồm Báo cáo ngày, Báo cáo tuần, Báo cáo tháng, các báo cáo đột xuất (mới bổ sung).
	(Mới) Cấu trúc các loại báo cáo như sau:
        Nhóm Báo cáo định kỳ:
            Báo cáo ngày dạng:
                {
                    ID: BCNGAY 
                    Name: Báo cáo ngày
                    ActiveAt: 00:00:00 (Giờ, phút , giây theo máy chủ)
                    DeactiveAfter: 24:00:00 (24 giờ)
                    StartAt: 12:00:00 (Bắt đầu nhận báo cáo đúng hạn - Giờ, phút , giây theo máy chủ)
                    EndAfter: 2:00:00 (Kết thúc thời gian nhận đúng hạn lúc StartAt + EndAfter)
                    From: None (phục vụ cho loại báo cáo đột xuất)
                    To: None (phục vụ cho loại báo cáo đột xuất)
                    DocExtList: .doc .docx .pdf .bm2 .jpg .xlsx .xls
                    MaxSize: 100MB
                    Active: True
                },
            Báo cáo tuần:
                {
                    ID: BCTUAN
                    Name: Báo cáo tuần
                    ActiveAt: 12:00:00, Thứ 4 (Giờ, phút, giây và thứ trong tuần theo máy chủ)
                    DeactiveAfter: 24:00:00 (24 giờ)
                    StartAt: 12:00:00, Thứ 4 (Bắt đầu nhận báo cáo đúng hạn - Giờ, phút , giây và thứ trong tuần theo máy chủ)
                    EndAfter: 24:00:00 (Kết thúc thời gian nhận đúng hạn lúc StartAt + EndAfter)
                    From: None (phục vụ cho loại báo cáo đột xuất)
                    To: None (phục vụ cho loại báo cáo đột xuất)
                    DocExtList: .doc .docx .pdf .bm2 .jpg .xlsx .xls
                    MaxSize: 100MB
                    Active: True
                },
            Báo cáo tháng:
                {
                    ID: BCTHANG
                    Name: Báo cáo tháng
                    ActiveAt: 00:00:00, 15th (Giờ, phút, giây và ngày trong tháng theo máy chủ)
                    DeactiveAfter: 24:00:00 (24 giờ)
                    StartAt: 00:00:00, 15th (Bắt đầu nhận báo cáo đúng hạn - Giờ, phút , giây và ngày trong tháng theo máy chủ)
                    EndAfter: 24:00:00 (Kết thúc thời gian nhận đúng hạn lúc StartAt + EndAfter)
                    From: None (phục vụ cho loại báo cáo đột xuất)
                    To: None (phục vụ cho loại báo cáo đột xuất)
                    DocExtList: .doc .docx .pdf .bm2 .jpg .xlsx .xls
                    MaxSize: 100MB
                    Active: True
                },
        Nhóm Báo cáo đột xuất:
            {
                ID: BCDOTXUAT_{số thứ tự tăng dành}
                Name: Báo cáo đột xuất số 123
                ActiveAt: 00:00:00, 12/5/2025 (Giờ, phút, giây và ngày tháng năm theo máy chủ)
                DeactiveAfter: 24:00:00 (24 giờ)
                StartAt: 00:00:00, 12/5/2025 (Bắt đầu nhận báo cáo đúng hạn - Giờ, phút , giây và ngày trong tháng theo máy chủ)
                EndAfter: 24:00:00 (Kết thúc thời gian nhận đúng hạn lúc StartAt + EndAfter)
                From: dd/mm/yyyy (thời gian bắt đầu thống kê để báo cáo)
                To: dd/mm/yyyy (thời gian kết thúc thống kê để báo cáo)
                DocExtList: .doc .docx .pdf .bm2 .jpg .xlsx .xls
                MaxSize: 100MB
                Active: False
            }
        Trong đó, thuộc tính ID: là mã định danh của loại báo cáo;
            Name là tên của loại báo cáo;
            ActiveAt là thời điểm kích hoạt để tạo Kỳ báo cáo mới, khi được kích hoạt, các tài khoản chi nhánh sẽ được hiển thị Kỳ báo cáo này trên trang cá nhân và có thể gửi báo cáo; 
            DeactiveAfter là khoảng thời gian kể từ khi ActiveAt thì Kỳ báo cáo sẽ tự động bỏ kích hoạt, khi bị không kích hoạt các tài khoản chi nhánh không hiển thị Kỳ báo cáo và không thể gửi báo cáo;
            StartAt là mốc thời gian bắt đầu tính đúng hạn gửi báo cáo;
            EndAfter là khoảng thời gian kể từ khi StartAt, mốc thời gian kết thúc tính đúng hạn gửi báo cáo là StartAt + EndAfter. Các số cụ thể sẽ liên quan đến Kỳ báo cáo;
            From làm mốc thời gian bắt đầu thống kê để báo cáo;
            To làm mốc thời gian kết thúc thống kê để báo cáo;
            DocExtList là danh sách các định dạng hợp lệ để đính kèm file gửi báo cáo, cách nhau bởi dấu cách;
            MaxSize là kích thước tối đa của file đính kèm;
            Active là trạng thái cho biết loại báo cáo còn có khả năng sẽ được tự động kích hoạt trong tương lai.

        Mỗi khi đến thời điểm ActiveAt thì hệ thống sẽ tự động tạo ra một Kỳ báo cáo cho loại báo cáo đó. Kỳ báo cáo có định dạng:
        {
            TYPE: <ID của loại báo cáo>
            ID: <ID của loại báo cáo xác định ở TYPE>_<ActiveAt của loại báo cáo>.
            Name: <Name của loại báo cáo>_<thời gian của Kỳ báo cáo> (thời gian của kỳ báo cáo tuỳ thuộc loại báo cáo: đối với loại báo cáo ngày có dạng <dd/mm/yyyy> là ngày tháng năm của StartAt.
             đối với loại báo cáo tuần hoặc báo cáo đột xuất có dạng <từ From đến To>; đối với loại báo cáo tháng có dạng <mm/yyyy> là tháng của StartAt).
            StartAt: <ActiveAt của loại báo cáo> (Thời gian bắt đầu hiển thị và cho phép chi nhánh gửi báo cáo)
            EndAt: (Thời gian kết thúc hiển thị và ngừng cho phép chi nhánh gửi báo cáo)
            From: dd/mm/yyyy (tính theo From của Loại báo cáo đột xuất; nếu Báo cáo ngày thì là ngày, tháng, năm của StartAt, nếu báo cáo tuần thì ngày tháng năm của EndAt - 7 ngày)
            To: dd/mm/yyyy (tính theo To của Loại báo cáo đột xuất; nếu Báo cáo ngày thì là ngày, tháng, năm của StartAt, nếu báo cáo tuần thì ngày tháng năm của EndAt)
            Killer: <Auto or Admin> (Ai là người kết thúc Kỳ báo cáo)
            Status: (Trạng thái đang sống hay đã bị Kill)
            Reports: (danh sách các Báo cáo đã nhận được từ cách chi nhánh (nếu chi nhánh gửi nhiều lần thì chỉ ghi nhận cái sau cùng))
            FolderPath: (Đường dẫn thư mục lưu trữ file đính kèm báo cáo của các chi nhánh)
        }
        Báo cáo có định dạng:
        {
            Sender: (tên tài khoản gửi báo cáo)
            ID: <tên tài khoản gửi>_<ID của kỳ báo cáo>_<giờ, phút, giây gửi>
            Period_ID: (ID của kỳ báo cáo)
            ReportTypeID: BCNGAY
            ReportPeriodName: "Báo cáo ngày 20/4/2025"
            Blake3sum: (Blake3 checksum của file đính kèm)
            FilePath: <đường dẫn file đính kèm được lưu trên máy chủ>
            FileName: (tên file đã lưu có dạng <tên chi nhánh viết liền không dấu>_<Period_ID>)
            OriFileName: (tên file gốc khi upload lên)
            FileSize: (Kích thước file)
            SentAt: (Thời gian gửi báo cáo)
            Comment: (Nội dung lời nhắn)
            HasEvent: (có sự kiện đáng chú ý hay không)
            LateSeconds: (số giây bị trễ so với đúng hạn, số âm là gửi sớm hơn StartAt của loại báo cáo, số dương là quá thời gian đúng hạn, trong khoảng thời gian đúng hạn là 0)
        }
        Tài khoản chi nhánh có định dạng:
        {
            ID: (Theo số thứ tự)
            Account: (tên đăng nhập không dấu)
            Password: (Mã hoá)
            Name: (Tên chi nhánh)
            TimeCreated: (Thời gian tạo)
            Avatar: (tên file avatar trên server)
            Level: (Cấp chi nhánh gồm CAPPHONG/CAPXA)
            IsAdmin: false
        }
        Tài khoản admin:
        {
            ID: 0
            Account: admin
            Password: (Mã hoá)
            Name: Quản trị viên
            TimeCreated: (Thời gian tạo)
            Avatar: (tên file avatar trên server)
            Level: CAPPHONG
            IsAdmin: true
        }
    Phần backend:
        Tạo bảng Các loại báo cáo;
        Tạo bảng Kỳ báo cáo;
        Tạo bảng Báo cáo;
        Tạo bảng user;
        Tạo router cho CRUD của tất cả các bảng;
        Ghi và lưu trữ nhật ký thao tác của tài khoản Admin
        Ghi và lưu trữ nhật ký các gửi báo cáo của tài khoản chi nhánh.
        Chú ý đặt tên tất cả các biến, tên bảng bằng tiếng Anh.
    Phần frontend sẽ được cung cấp file figma chi tiết, cụ thể.
    Logic được mô tả sơ lược như sau:
        Phần frontend của tài khoản chi nhánh như sau:
            Trang đăng nhập{
                Mô tả:{
                    - input nhập tên đăng nhập (có nhãn "Tên tài khoản:")
                    - input nhập mất khẩu (có nhãn "Mật khẩu:")
                    - Nút đăng nhập
                    - Checkbox ghi nhớ đăng nhập.
                    }
                Xử lý logic như các trang đăng nhập bình thường, chú ý tự động đăng nhập nếu có ghi nhớ.  
            }
            Trang cá nhân{
                Mô tả:{
                    - Phía trên bên trái và giữa là tên và logo phần mềm "Hệ thống gửi báo cáo" có kích thước phù hợp.
                    - Góc trên bên phải là menu thông tin tài khoản (kiểu tương tự zimbra mail) gồm Tên chi nhánh luôn được hiển thị và có nút tam giác để người dùng bấm vào thì danh sách sổ xuống gồm Tên chi nhánh, tên đăng nhập, đổi mật khẩu, nhật ký gửi báo cáo.
                    Người dùng click vào đổi mật khẩu thì sẽ hiển ra giao diện đổi mật khẩu trong vùng nội dung của trang (vùng chiếm phần lớn của trang web)
                    Người dùng click vào Xem nhật ký báo cáo thì hiển thị bảng các báo cáo đã gửi (có thể xem nhiều báo cáo của cùng một kỳ nếu gửi nhiều lần), có thể lọc và phân trang nếu nhật ký dài. 
                    - Phía bên trái (khoảng 1/5 màn hình) là danh sách các kỳ báo cáo đang kích hoạt của tài khoản, sắp xếp theo thời hạn còn lại. Thông tin của mỗi kỳ gồm Tên kỳ báo cáo và thời gian bắt đầu - thời gian hết hạn báo cáo (đúng hạn).
                    Người dùng click vào Kỳ báo cáo nào thì giao diện gửi báo cáo của kỳ báo cáo đó sẽ được hiển thị ở vùng nội dung. 
                    Giao diện báo cáo như sau:{
                        Tên kỳ báo cáo
                        Tên đơn vị báo cáo
                        Tên loại báo cáo
                        Thời gian hiện tại

                    }
                }
            }
        Phần frontend của tài khoản quản trị:
            Đăng nhập
            Quản trị
                Thông tin tài khoản quản trị
                Quản lý Kỳ báo cáo
                Quản lý tài khoản
                Quản lý Báo cáo
                Quản lý các loại báo cáo
                Nhật ký thao tác
	
2. Công nghệ, giải pháp kỹ thuật (lập trình), các thành phần của mã nguồn dự án trong file congnghe.txt
3. Các file roadmap được cung cấp trong file dự án.
4. Nội dung các file mã nguồn của backend và frontend được lưu trong file project_dump.txt.
Nguyên tắc khi thực hiện dự án:
1. Công nghệ, giải pháp kỹ thuật (lập trình), các thành phần của mã nguồn dự án được lưu trong file congnghe.txt
2. Roadmap tổng thể của toàn bộ dự án được cung cấp trong file roadmap_tongthe.md
3. Roadmap con các cấp thấp hơn để có thể dễ dàng thực hiện và tự động hoá được lưu trong file roadmap_....md
4. Các bước thực hiện trong roadmap phải lần lượt theo thứ tự, trong đó yêu cầu phải kiểm tra kết quả của từng bước (bằng cách tạo và chạy các scripts kiểm tra), nếu thành công thì hãy triển khai bước tiếp theo, nếu khó khăn (sau 10 lần thử) thì đề xuất hướng xử lý và người dùng sẽ quyết định (hạn chế điều này).
5. Khi đã kiểm tra thành công bước tổng thể thì hoàn thiện các chi tiết nhỏ hơn. Ví dụ, ưu tiên xây dựng cây thư mục của toàn bộ/hoặc những phần quan trọng của dự án trước; ưu tiên tạo các file quan trọng để chạy logic của dự án trước; ưu tiên xây dựng các thành phần để sử dụng kiểm tra cho các bước phía sau trước.
6. Phải tuân thủ roadmap, giải pháp kỹ thuật,  công nghệ và cách thành phần để thực hiện dự án.
7. Lưu các file tôi cung cấp trong thư mục dự án và cập nhật sau khi thực hiện mỗi bước trong roadmap để dễ theo dõi và chạy lại khi bị ngắt. Nếu sửa đổi, bổ sung thì phải nêu rõ lý do thay đổi.
8. Cập nhật cây thư mục mỗi khi phát sinh mới file hoặc thư mục. Cây thư mục được lưu trong file tree.md.
9. Nếu phát sinh mới file hoặc thư mục thì hãy đóng gói đúng cấu trúc thư mục và nén trong một file .zip. Tôi chỉ cần giải nén và copy vào dự án.





===== FILE: backend/requirements.txt =====
fastapi
uvicorn[standard]
sqlalchemy
asyncpg
python-jose
passlib
bcrypt==3.2.0
pydantic
pydantic-settings
python-multipart
unidecode
alembic
psycopg2-binary


===== FILE: backend/run_test_ping.sh =====
#!/bin/bash
echo "Running FastAPI server at http://127.0.0.1:8000"
uvicorn backend.app.main:app --reload


===== FILE: backend/alembic\env.py =====
from logging.config import fileConfig
from sqlalchemy import pool
from alembic import context
from app.models import user, loai_baocao, report  # Import models
from app.database import Base
from app.config import settings

config = context.config
fileConfig(config.config_file_name)
target_metadata = Base.metadata

def run_migrations_offline():
    context.configure(
        url=settings.DATABASE_URL,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    from sqlalchemy import create_engine

    connectable = create_engine(settings.DATABASE_URL.replace("asyncpg", "psycopg2"))

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

===== FILE: backend/alembic\script.py.mako =====


===== FILE: backend/alembic\versions\20250416_152221_create_loai_baocao.py =====
"""create loai_baocao

Revision ID: 20250416_152221
Revises: 
Create Date: 2025-04-16 15:22:21

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20250416_152221'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.create_table(
        'loai_baocao',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('ten_loai', sa.String(), nullable=False),
        sa.Column('thoi_gian_bat_dau', sa.DateTime(), nullable=False),
        sa.Column('han_gui', sa.DateTime(), nullable=False),
        sa.Column('dinh_ky', sa.Integer(), nullable=False, server_default='0'),
    )


def downgrade():
    op.drop_table('loai_baocao')

===== FILE: backend/app\config.py =====
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"

    class Config:
        env_file = ".env"

settings = Settings()

===== FILE: backend/app\database.py =====
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .config import settings

DATABASE_URL = settings.DATABASE_URL

engine = create_async_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

async def get_db():
    async with SessionLocal() as session:
        yield session


===== FILE: backend/app\main.py =====
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routers import auth, user
from .database import engine, Base
from .routers import report
from .routers import loai_baocao
from .routers import yeu_cau
from .routers import audit_log

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth.router, prefix="/auth", tags=["Auth"])
app.include_router(user.router, prefix="/admin/user", tags=["Admin User"])
app.include_router(audit_log.router, prefix="/admin", tags=["Audit Log"])
app.include_router(report.router, prefix="/report", tags=["Report"])
app.include_router(loai_baocao.router, prefix="/admin/loaibaocao", tags=["Loại báo cáo"])
app.include_router(yeu_cau.router, prefix="/report/request", tags=["Yêu cầu báo cáo"])


@app.get("/ping")
async def ping():
    return {"msg": "pong"}





===== FILE: backend/app\crud\audit_log.py =====
from ..models.audit_log import AuditLog

async def log_action(db, user_id: int, action: str, model: str, model_id: int | None = None, details: str = ""):
    log = AuditLog(
        user_id=user_id,
        action=action,
        model=model,
        model_id=model_id,
        details=details
    )
    db.add(log)
    await db.commit()


===== FILE: backend/app\dependencies\auth.py =====
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from ..config import settings
from jose import JWTError, jwt
from ..schemas.user import UserOut
from ..database import get_db
from ..services.auth import get_user_by_username
from sqlalchemy.ext.asyncio import AsyncSession

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")
SECRET_KEY = settings.SECRET_KEY
ALGORITHM = "HS256"

async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db)) -> UserOut:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        db_user = await get_user_by_username(db, username)
        if db_user is None:
            raise credentials_exception
        return UserOut.model_validate(db_user)
    except JWTError:
        raise credentials_exception

async def get_current_admin(user: UserOut = Depends(get_current_user)):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Không có quyền truy cập")
    return user


===== FILE: backend/app\models\audit_log.py =====
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text
from sqlalchemy.sql import func
from ..database import Base

class AuditLog(Base):
    __tablename__ = "audit_logs"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    action = Column(String, nullable=False)  # create / update / delete
    model = Column(String, nullable=False)   # LoaiBaoCao / YeuCauBaoCao
    model_id = Column(Integer, nullable=True)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    details = Column(Text, nullable=True)


===== FILE: backend/app\models\loai_baocao.py =====

from sqlalchemy import Column, Integer, String, DateTime
from ..database import Base

class LoaiBaoCao(Base):
    __tablename__ = "loai_baocao"

    id = Column(Integer, primary_key=True, index=True)
    ten_loai = Column(String, nullable=False)
    from sqlalchemy import DateTime
    thoi_gian_bat_dau = Column(DateTime(timezone=True), nullable=False)
    han_gui = Column(DateTime(timezone=True), nullable=False)
    dinh_ky = Column(Integer, default=0)  # đơn vị giờ/ngày/tuần...


===== FILE: backend/app\models\period.py =====
from sqlalchemy import Column, String, DateTime
from sqlalchemy.orm import relationship
from ..database import Base

class Period(Base):
    __tablename__ = "periods"

    TYPE = Column(String, nullable=False)  # ID của loại báo cáo
    ID = Column(String, primary_key=True, index=True)  # <TYPE>_<ActiveAt>
    Name = Column(String, nullable=False)
    ActiveAt = Column(DateTime(timezone=True), nullable=False)
    DeactiveAt = Column(DateTime(timezone=True), nullable=False)
    StartAt = Column(DateTime(timezone=True), nullable=False)
    EndAt = Column(DateTime(timezone=True), nullable=False)
    FromAt = Column(DateTime(timezone=True), nullable=False)
    ToAt = Column(DateTime(timezone=True), nullable=False)
    Killer = Column(String, nullable=False)  # Auto / Admin
    Status = Column(String, nullable=False)  # Active / Deactive
    FolderPath = Column(String, nullable=True)  # Đường dẫn thư mục lưu báo cáo

    reports = relationship("Report", back_populates="period")


===== FILE: backend/app\models\report.py =====
from sqlalchemy import Column, String, Integer, DateTime, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from ..database import Base

class Report(Base):
    __tablename__ = "reports"

    ID = Column(String, primary_key=True, index=True)
    Sender = Column(String, nullable=False)
    SendID = Column(Integer, nullable=False)
    PeriodID = Column(String, ForeignKey("periods.ID"), nullable=False)
    ReportTypeID = Column(String, nullable=False)
    ReportPeriodName = Column(String, nullable=False)
    Blake3sum = Column(String, nullable=False)
    FilePath = Column(String, nullable=False)
    FileName = Column(String, nullable=False)
    OriFileName = Column(String, nullable=False)
    FileSize = Column(Integer, nullable=False)
    SentAt = Column(DateTime(timezone=True), nullable=False)
    Comment = Column(String, nullable=True)
    HasEvent = Column(Boolean, default=True)
    LateSeconds = Column(Integer, default=0)

    period = relationship("Period", back_populates="reports")


===== FILE: backend/app\models\user.py =====
from sqlalchemy import Column, Integer, String, Boolean
from ..database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    ten_chi_nhanh = Column(String, nullable=True)
    is_admin = Column(Boolean, default=False)


===== FILE: backend/app\models\yeu_cau_baocao.py =====
from sqlalchemy import Column, Integer, ForeignKey, Table, Boolean, Enum
from sqlalchemy.orm import relationship
from ..database import Base
import enum

yeu_cau_user_table = Table(
    "yeu_cau_user", Base.metadata,
    Column("yeu_cau_id", ForeignKey("yeu_cau_baocao.id")),
    Column("user_id", ForeignKey("users.id")),
)

class DinhKyEnum(str, enum.Enum):
    hour = "hour"
    day = "day"
    month = "month"

class YeuCauBaoCao(Base):
    __tablename__ = "yeu_cau_baocao"

    id = Column(Integer, primary_key=True, index=True)
    loai_baocao_id = Column(Integer, ForeignKey("loai_baocao.id"))
    dinh_ky_value = Column(Integer, default=0)
    dinh_ky_unit = Column(Enum(DinhKyEnum), default=DinhKyEnum.day)
    is_active = Column(Boolean, default=True)

    users = relationship("User", secondary=yeu_cau_user_table)


===== FILE: backend/app\routers\audit_log.py =====
from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from ..models.audit_log import AuditLog
from ..schemas.audit_log import AuditLogOut
from ..database import get_db
from ..dependencies.auth import get_current_admin

router = APIRouter()

@router.get("/logs", response_model=list[AuditLogOut])
async def get_logs(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(AuditLog).order_by(AuditLog.timestamp.desc()))
    return result.scalars().all()


===== FILE: backend/app\routers\auth.py =====
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession

from ..schemas.user import UserCreate, UserOut
from ..models.user import User
from ..services.auth import get_password_hash, verify_password, create_access_token, get_user_by_username
from ..database import get_db

router = APIRouter()

@router.post("/register", response_model=UserOut)
async def register(user: UserCreate, db: AsyncSession = Depends(get_db)):
    existing_user = await get_user_by_username(db, user.username)
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    hashed_pw = get_password_hash(user.password)
    new_user = User(
        username=user.username,
        hashed_password=hashed_pw,
        ten_chi_nhanh=user.ten_chi_nhanh,
        is_admin=user.is_admin
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return new_user

@router.post("/login")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    user = await get_user_by_username(db, form_data.username)
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    token = create_access_token(data={"sub": user.username})
    return {"access_token": token, "token_type": "bearer"}


===== FILE: backend/app\routers\loai_baocao.py =====

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from ..schemas.loai_baocao import LoaiBaoCaoCreate, LoaiBaoCaoOut
from ..models.loai_baocao import LoaiBaoCao
from ..dependencies.auth import get_current_admin, get_current_user
from ..database import get_db
from ..crud.audit_log import log_action

router = APIRouter()

@router.get("/", response_model=list[LoaiBaoCaoOut])
async def get_all(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao))
    return result.scalars().all()

@router.post("/", response_model=LoaiBaoCaoOut)
async def create(item: LoaiBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    obj = LoaiBaoCao(**item.dict())
    db.add(obj)
    await db.commit()
    await log_action(db, admin.id, "create", "LoaiBaoCao", obj.id, f"Tạo loại báo cáo: {item.ten_loai}")
    await db.refresh(obj)
    return obj

@router.put("/{id}", response_model=LoaiBaoCaoOut)
async def update(id: int, item: LoaiBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao).where(LoaiBaoCao.id == id))
    obj = result.scalar_one_or_none()
    if not obj:
        raise HTTPException(status_code=404, detail="Không tìm thấy")
    for k, v in item.dict().items():
        setattr(obj, k, v)
    await db.commit()
    await log_action(db, admin.id, "update", "LoaiBaoCao", id, f"Cập nhật loại báo cáo: {item.ten_loai}")
    await db.refresh(obj)
    return obj

@router.delete("/{id}")
async def delete(id: int, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(LoaiBaoCao).where(LoaiBaoCao.id == id))
    obj = result.scalar_one_or_none()
    if not obj:
        raise HTTPException(status_code=404, detail="Không tìm thấy")
    await db.delete(obj)
    await db.commit()
    await log_action(db, admin.id, "delete", "LoaiBaoCao", id, f"Xoá loại báo cáo: {obj.ten_loai}")
    return {"msg": "Đã xoá"}

@router.get("/public", response_model=list[LoaiBaoCaoOut], tags=["Loại báo cáo công khai"])
async def get_all_public(db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):
    result = await db.execute(select(LoaiBaoCao))
    return result.scalars().all()

===== FILE: backend/app\routers\report.py =====

from fastapi import APIRouter, UploadFile, File, Form, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..database import get_db
from ..models.report import Report
from ..models.loai_baocao import LoaiBaoCao
from ..schemas.report import ReportOut
from ..dependencies.auth import get_current_user
from datetime import datetime
import os
from pathlib import Path
from unidecode import unidecode

router = APIRouter()

@router.post("/upload", response_model=ReportOut)
async def upload_report(
    file: UploadFile = File(...),
    loai_baocao_id: int = Form(...),
    has_event: bool = Form(True),
    db: AsyncSession = Depends(get_db),
    user = Depends(get_current_user)
):
    loai = await db.get(LoaiBaoCao, loai_baocao_id)
    if not loai:
        raise HTTPException(status_code=404, detail="Loại báo cáo không tồn tại")

    now = datetime.now()
    is_late = now > loai.han_gui
    late_seconds = int((now - loai.han_gui).total_seconds()) if is_late else 0

    ext = file.filename.split(".")[-1]
    filename_raw = f"{user.ten_chi_nhanh}_{loai.ten_loai}_{now.strftime('%Y-%m-%d_%H-%M-%S')}.{ext}"
    filename = unidecode(filename_raw).replace(" ", "_")
    base_dir = Path("static/reports") / unidecode(loai.ten_loai).replace(" ", "_") / now.strftime("%Y-%m-%d")
    if loai.ten_loai.lower() == "báo cáo ngày":
        base_dir = base_dir / ("co_su_kien" if has_event else "khong_su_kien")
    os.makedirs(base_dir, exist_ok=True)

    path = base_dir / filename
    content = await file.read()
    with open(path, "wb") as f:
        f.write(content)

    new_report = Report(
        loai_baocao_id=loai_baocao_id,
        user_id=user.id,
        filename=str(filename),
        filesize=len(content),
        has_event=has_event,
        is_late=is_late,
        late_seconds=late_seconds
    )
    db.add(new_report)
    await db.commit()
    await db.refresh(new_report)
    return new_report


===== FILE: backend/app\routers\user.py =====
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..schemas.user import UserCreate, UserOut
from ..models.user import User
from ..services.auth import get_user_by_username, get_password_hash
from ..database import get_db
from ..dependencies.auth import get_current_admin
from sqlalchemy.future import select

router = APIRouter()

@router.get("/", response_model=list[UserOut])
async def list_users(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User))
    return result.scalars().all()

@router.post("/", response_model=UserOut)
async def create_user(user: UserCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    if await get_user_by_username(db, user.username):
        raise HTTPException(status_code=400, detail="Username đã tồn tại")
    new_user = User(
        username=user.username,
        hashed_password=get_password_hash(user.password),
        ten_chi_nhanh=user.ten_chi_nhanh,
        is_admin=user.is_admin
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return new_user

@router.put("/{user_id}", response_model=UserOut)
async def update_user(user_id: int, user: UserCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User).where(User.id == user_id))
    db_user = result.scalar_one_or_none()
    if not db_user:
        raise HTTPException(status_code=404, detail="User không tồn tại")
    db_user.username = user.username
    db_user.hashed_password = get_password_hash(user.password)
    db_user.ten_chi_nhanh = user.ten_chi_nhanh
    db_user.is_admin = user.is_admin
    await db.commit()
    await db.refresh(db_user)
    return db_user

@router.delete("/{user_id}")
async def delete_user(user_id: int, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(User).where(User.id == user_id))
    db_user = result.scalar_one_or_none()
    if not db_user:
        raise HTTPException(status_code=404, detail="User không tồn tại")
    await db.delete(db_user)
    await db.commit()
    return {"msg": "Đã xoá tài khoản thành công"}


===== FILE: backend/app\routers\yeu_cau.py =====

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from ..database import get_db
from ..models.yeu_cau_baocao import YeuCauBaoCao
from ..models.user import User
from ..schemas.yeu_cau import YeuCauBaoCaoCreate, YeuCauBaoCaoOut, ActiveUpdate
from ..dependencies.auth import get_current_admin, get_current_user
from ..crud.audit_log import log_action

router = APIRouter()

@router.post("/", response_model=YeuCauBaoCaoOut)
async def create_request(data: YeuCauBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    users = await db.execute(select(User).where(User.id.in_(data.user_ids)))
    user_list = users.scalars().all()
    if not user_list:
        raise HTTPException(status_code=404, detail="Không tìm thấy chi nhánh")
    req = YeuCauBaoCao(
        loai_baocao_id=data.loai_baocao_id,
        dinh_ky_value=data.dinh_ky_value,
        dinh_ky_unit=data.dinh_ky_unit,
        is_active=data.is_active,
        users=user_list
    )
    db.add(req)
    await db.commit()
    await log_action(db, admin.id, "create", "YeuCauBaoCao", req.id, f"Tạo yêu cầu báo cáo tới {len(user_list)} chi nhánh")
    refreshed = await db.execute(
        select(YeuCauBaoCao).options(selectinload(YeuCauBaoCao.users)).where(YeuCauBaoCao.id == req.id)
    )
    req = refreshed.scalar_one()
    return YeuCauBaoCaoOut(
        id=req.id,
        loai_baocao_id=req.loai_baocao_id,
        dinh_ky_value=req.dinh_ky_value,
        dinh_ky_unit=req.dinh_ky_unit,
        is_active=req.is_active,
        user_ids=[u.id for u in req.users]
    )

@router.get("/", response_model=list[YeuCauBaoCaoOut])
async def get_requests(db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(YeuCauBaoCao).options(selectinload(YeuCauBaoCao.users)))
    requests = result.scalars().all()
    return [
        YeuCauBaoCaoOut(
            id=r.id,
            loai_baocao_id=r.loai_baocao_id,
            dinh_ky_value=r.dinh_ky_value,
            dinh_ky_unit=r.dinh_ky_unit,
            is_active=r.is_active,
            user_ids=[u.id for u in r.users]
        ) for r in requests
    ]

@router.get("/my", response_model=list[YeuCauBaoCaoOut])
async def get_my_requests(user=Depends(get_current_user), db: AsyncSession = Depends(get_db)):
    result = await db.execute(
        select(YeuCauBaoCao).options(selectinload(YeuCauBaoCao.users)).where(YeuCauBaoCao.is_active == True)
    )
    all_requests = result.scalars().all()
    filtered = [r for r in all_requests if any(u.id == user.id for u in r.users)]
    return [
        YeuCauBaoCaoOut(
            id=r.id,
            loai_baocao_id=r.loai_baocao_id,
            dinh_ky_value=r.dinh_ky_value,
            dinh_ky_unit=r.dinh_ky_unit,
            is_active=r.is_active,
            user_ids=[u.id for u in r.users]
        ) for r in filtered
    ]

@router.put("/{id}", response_model=YeuCauBaoCaoOut)
async def update_request(id: int, data: YeuCauBaoCaoCreate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(YeuCauBaoCao).where(YeuCauBaoCao.id == id))
    req = result.scalar_one_or_none()
    if not req:
        raise HTTPException(status_code=404, detail="Không tìm thấy yêu cầu")
    user_result = await db.execute(select(User).where(User.id.in_(data.user_ids)))
    req.users = user_result.scalars().all()
    req.loai_baocao_id = data.loai_baocao_id
    req.dinh_ky_value = data.dinh_ky_value
    req.dinh_ky_unit = data.dinh_ky_unit
    req.is_active = data.is_active
    await db.commit()
    await db.refresh(req)
    await log_action(db, admin.id, "update", "YeuCauBaoCao", req.id, "Cập nhật yêu cầu báo cáo")
    refreshed = await db.execute(select(YeuCauBaoCao).options(selectinload(YeuCauBaoCao.users)).where(YeuCauBaoCao.id == req.id))
    req = refreshed.scalar_one()
    return YeuCauBaoCaoOut(
        id=req.id,
        loai_baocao_id=req.loai_baocao_id,
        dinh_ky_value=req.dinh_ky_value,
        dinh_ky_unit=req.dinh_ky_unit,
        is_active=req.is_active,
        user_ids=[u.id for u in req.users]
    )

@router.put("/{id}/active", response_model=YeuCauBaoCaoOut)
async def update_active_status(id: int, data: ActiveUpdate, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(YeuCauBaoCao).where(YeuCauBaoCao.id == id))
    req = result.scalar_one_or_none()
    if not req:
        raise HTTPException(status_code=404, detail="Không tìm thấy yêu cầu")
    req.is_active = data.is_active
    await db.commit()
    await db.refresh(req)
    await log_action(db, admin.id, "update", "YeuCauBaoCao", req.id, f"{'Kích hoạt' if data.is_active else 'Huỷ kích hoạt'} yêu cầu")
    refreshed = await db.execute(select(YeuCauBaoCao).options(selectinload(YeuCauBaoCao.users)).where(YeuCauBaoCao.id == req.id))
    req = refreshed.scalar_one()
    return YeuCauBaoCaoOut(
        id=req.id,
        loai_baocao_id=req.loai_baocao_id,
        dinh_ky_value=req.dinh_ky_value,
        dinh_ky_unit=req.dinh_ky_unit,
        is_active=req.is_active,
        user_ids=[u.id for u in req.users]
    )

@router.delete("/{id}")
async def delete_request(id: int, db: AsyncSession = Depends(get_db), admin=Depends(get_current_admin)):
    result = await db.execute(select(YeuCauBaoCao).where(YeuCauBaoCao.id == id))
    req = result.scalar_one_or_none()
    if not req:
        raise HTTPException(status_code=404, detail="Không tìm thấy yêu cầu")
    await db.delete(req)
    await db.commit()
    await log_action(db, admin.id, "delete", "YeuCauBaoCao", req.id, "Xoá yêu cầu báo cáo")
    return {"msg": "Đã xoá yêu cầu báo cáo"}


===== FILE: backend/app\schemas\audit_log.py =====
from pydantic import BaseModel
from datetime import datetime

class AuditLogOut(BaseModel):
    id: int
    action: str
    model: str
    model_id: int | None
    timestamp: datetime
    details: str | None

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\loai_baocao.py =====

from pydantic import BaseModel
from datetime import datetime

class LoaiBaoCaoBase(BaseModel):
    ten_loai: str
    thoi_gian_bat_dau: datetime
    han_gui: datetime
    dinh_ky: int = 0

class LoaiBaoCaoCreate(LoaiBaoCaoBase):
    pass

class LoaiBaoCaoOut(LoaiBaoCaoBase):
    id: int

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\report.py =====

from pydantic import BaseModel
from datetime import datetime

class ReportOut(BaseModel):
    id: int
    filename: str
    filesize: int
    created_at: datetime
    is_late: bool
    late_seconds: int
    has_event: bool

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\user.py =====
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str
    ten_chi_nhanh: str = ""
    is_admin: bool = False

class UserLogin(BaseModel):
    username: str
    password: str

class UserOut(BaseModel):
    id: int
    username: str
    ten_chi_nhanh: str
    is_admin: bool

    class Config:
        from_attributes = True


===== FILE: backend/app\schemas\yeu_cau.py =====
from pydantic import BaseModel, Field
from typing import List
from enum import Enum

class ActiveUpdate(BaseModel):
    is_active: bool

class DinhKyEnum(str, Enum):
    hour = "hour"
    day = "day"
    month = "month"

class YeuCauBaoCaoCreate(BaseModel):
    loai_baocao_id: int
    user_ids: List[int]
    dinh_ky_value: int = 0
    dinh_ky_unit: DinhKyEnum = DinhKyEnum.day
    is_active: bool = True

class YeuCauBaoCaoOut(BaseModel):
    id: int
    loai_baocao_id: int
    dinh_ky_value: int
    dinh_ky_unit: DinhKyEnum
    is_active: bool
    user_ids: List[int] = Field(...)

    class Config:
        from_attributes = True


===== FILE: backend/app\services\auth.py =====
from passlib.context import CryptContext
from datetime import datetime, timedelta, timezone
from jose import jwt
from ..config import settings

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from ..models.user import User

SECRET_KEY = settings.SECRET_KEY
ALGORITHM = settings.ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_user_by_username(db: AsyncSession, username: str):
    result = await db.execute(select(User).filter(User.username == username))
    return result.scalar_one_or_none()


===== FILE: frontend/index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Report System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


===== FILE: frontend/postcss.config.js =====
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== FILE: frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


===== FILE: frontend/vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


===== FILE: frontend/src\App.jsx =====
import React from "react";

function App() {
  return (
    <div className="p-4 text-center text-white bg-blue-600">
      <h1 className="text-2xl font-bold">Hệ thống báo cáo đã khởi tạo!</h1>
    </div>
  );
}

export default App;


===== FILE: frontend/src\index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;


===== FILE: frontend/src\main.jsx =====
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import { RouterProvider } from 'react-router-dom'
import { router } from './router/router.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
)


===== FILE: frontend/src\components\CountdownClock.jsx =====
import React, { useEffect, useState } from "react";

function CountdownClock({ deadline }) {
  const [timeLeft, setTimeLeft] = useState(getTimeLeft());

  function getTimeLeft() {
    const now = new Date();
    const diff = Math.max(0, deadline - now);
    const seconds = Math.floor((diff / 1000) % 60);
    const minutes = Math.floor((diff / 1000 / 60) % 60);
    const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    return { days, hours, minutes, seconds };
  }

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(getTimeLeft());
    }, 1000);
    return () => clearInterval(timer);
  }, [deadline]);

  return (
    <div className="mt-2 text-sm">
      Còn lại: {timeLeft.days} ngày {timeLeft.hours} giờ {timeLeft.minutes} phút {timeLeft.seconds} giây
    </div>
  );
}

export default CountdownClock;


===== FILE: frontend/src\pages\AdminAccounts.jsx =====

import React, { useEffect, useState } from "react";
import { fetchUsers, createUser, updateUser, deleteUser } from "../services/userService";

function AdminAccounts() {
  const [users, setUsers] = useState([]);
  const [form, setForm] = useState({
    username: "",
    password: "",
    ten_chi_nhanh: "",
    is_admin: false
  });
  const [editId, setEditId] = useState(null);
  const [error, setError] = useState("");

  const token = localStorage.getItem("token");

  useEffect(() => {
    loadUsers();
  }, []);

  const loadUsers = async () => {
    try {
      const res = await fetchUsers(token);
      setUsers(res.data);
    } catch (err) {
      setError("Không thể tải danh sách người dùng.");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await updateUser(editId, form, token);
      } else {
        await createUser(form, token);
      }
      setForm({ username: "", password: "", ten_chi_nhanh: "", is_admin: false });
      setEditId(null);
      loadUsers();
    } catch (err) {
      setError("Lỗi khi lưu tài khoản.");
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Xoá tài khoản này?")) {
      await deleteUser(id, token);
      loadUsers();
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Quản lý tài khoản chi nhánh</h2>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="mb-4 space-y-2">
        <input
          value={form.username || ""}
          onChange={(e) => setForm({ ...form, username: e.target.value })}
          placeholder="Username"
          className="border px-2 py-1"
          required
        />
        <input
          value={form.password || ""}
          onChange={(e) => setForm({ ...form, password: e.target.value })}
          placeholder="Password"
          type="password"
          className="border px-2 py-1"
          required
        />
        <input
          value={form.ten_chi_nhanh || ""}
          onChange={(e) => setForm({ ...form, ten_chi_nhanh: e.target.value })}
          placeholder="Tên chi nhánh"
          className="border px-2 py-1"
        />
        <label className="inline-flex items-center">
          <input
            type="checkbox"
            checked={form.is_admin}
            onChange={(e) => setForm({ ...form, is_admin: e.target.checked })}
            className="mr-1"
          />
          Admin?
        </label>
        <button type="submit" className="bg-blue-600 text-white px-4 py-1 rounded">
          {editId ? "Cập nhật" : "Tạo mới"}
        </button>
      </form>
      <table className="w-full table-auto border">
        <thead>
          <tr className="bg-gray-200">
            <th>ID</th><th>Username</th><th>Tên chi nhánh</th><th>Admin</th><th>Hành động</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id} className="text-center border-t">
              <td>{user.id}</td>
              <td>{user.username}</td>
              <td>{user.ten_chi_nhanh}</td>
              <td>{user.is_admin ? "✔" : ""}</td>
              <td>
                <button
                  onClick={() => {
                    setForm({
                      username: user.username || "",
                      password: "",
                      ten_chi_nhanh: user.ten_chi_nhanh || "",
                      is_admin: user.is_admin || false
                    });
                    setEditId(user.id);
                  }}
                  className="text-blue-600 mr-2"
                >
                  Sửa
                </button>
                <button
                  onClick={() => handleDelete(user.id)}
                  className="text-red-600"
                >
                  Xoá
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminAccounts;


===== FILE: frontend/src\pages\AdminLoaiBaoCao.jsx =====
import React, { useEffect, useState } from "react";
import axios from "../services/api";

function AdminLoaiBaoCao() {
  const [list, setList] = useState([]);
  const [form, setForm] = useState({ ten_loai: "", thoi_gian_bat_dau: "", han_gui: "", dinh_ky: 0 });
  const [editId, setEditId] = useState(null);
  const token = localStorage.getItem("token");

  const load = async () => {
    const res = await axios.get("/admin/loaibaocao", { headers: { Authorization: `Bearer ${token}` } });
    setList(res.data);
  };

  useEffect(() => { load(); }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = { ...form };
    if (editId) {
      await axios.put(`/admin/loaibaocao/${editId}`, payload, { headers: { Authorization: `Bearer ${token}` } });
    } else {
      await axios.post("/admin/loaibaocao", payload, { headers: { Authorization: `Bearer ${token}` } });
    }
    setForm({ ten_loai: "", thoi_gian_bat_dau: "", han_gui: "", dinh_ky: 0 });
    setEditId(null);
    load();
  };

  const handleDelete = async (id) => {
    if (window.confirm("Xoá?")) {
      await axios.delete(`/admin/loaibaocao/${id}`, { headers: { Authorization: `Bearer ${token}` } });
      load();
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Quản lý loại báo cáo</h2>
      <form onSubmit={handleSubmit} className="space-y-2">
        <input value={form.ten_loai} onChange={e => setForm({ ...form, ten_loai: e.target.value })} placeholder="Tên loại" className="border px-2 py-1" required />
        <input type="datetime-local" value={form.thoi_gian_bat_dau} onChange={e => setForm({ ...form, thoi_gian_bat_dau: e.target.value })} className="border px-2 py-1" required />
        <input type="datetime-local" value={form.han_gui} onChange={e => setForm({ ...form, han_gui: e.target.value })} className="border px-2 py-1" required />
        <input type="number" value={form.dinh_ky} onChange={e => setForm({ ...form, dinh_ky: parseInt(e.target.value) })} placeholder="Định kỳ" className="border px-2 py-1" />
        <button type="submit" className="bg-blue-600 text-white px-4 py-1 rounded">{editId ? "Cập nhật" : "Tạo mới"}</button>
      </form>
      <table className="w-full mt-4 border">
        <thead><tr><th>Tên</th><th>Bắt đầu</th><th>Hạn</th><th>Định kỳ</th><th>Hành động</th></tr></thead>
        <tbody>
          {list.map(item => (
            <tr key={item.id} className="text-center border-t">
              <td>{item.ten_loai}</td>
              <td>{new Date(item.thoi_gian_bat_dau).toLocaleString()}</td>
              <td>{new Date(item.han_gui).toLocaleString()}</td>
              <td>{item.dinh_ky}</td>
              <td>
                <button onClick={() => { setEditId(item.id); setForm(item); }} className="text-blue-600 mr-2">Sửa</button>
                <button onClick={() => handleDelete(item.id)} className="text-red-600">Xoá</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminLoaiBaoCao;


===== FILE: frontend/src\pages\AdminYeuCauBaoCao.jsx =====
import React, { useEffect, useState } from "react";
import axios from "../services/api";

function AdminYeuCauBaoCao() {
  const [requests, setRequests] = useState([]);
  const [users, setUsers] = useState([]);
  const [loaiBaoCao, setLoaiBaoCao] = useState([]);
  const [form, setForm] = useState({
    loai_baocao_id: "",
    user_ids: [],
    dinh_ky_value: 0,
    dinh_ky_unit: "day",
    is_active: true
  });
  const [editId, setEditId] = useState(null);
  const token = localStorage.getItem("token");

  const loadAll = async () => {
    const [r1, r2, r3] = await Promise.all([
      axios.get("/report/request", { headers: { Authorization: `Bearer ${token}` } }),
      axios.get("/admin/user", { headers: { Authorization: `Bearer ${token}` } }),
      axios.get("/admin/loaibaocao", { headers: { Authorization: `Bearer ${token}` } }),
    ]);
    setRequests(r1.data);
    setUsers(r2.data);
    setLoaiBaoCao(r3.data.filter(l => new Date(l.han_gui) > new Date())); // lọc còn hiệu lực
  };

  useEffect(() => { loadAll(); }, []);

  const handleCheckbox = (id) => {
    const ids = form.user_ids.includes(id) ? form.user_ids.filter(x => x !== id) : [...form.user_ids, id];
    setForm({ ...form, user_ids: ids });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (editId) {
      await axios.put(`/report/request/${editId}`, form, { headers: { Authorization: `Bearer ${token}` } });
    } else {
      await axios.post("/report/request", form, { headers: { Authorization: `Bearer ${token}` } });
    }
    setForm({ loai_baocao_id: "", user_ids: [], dinh_ky_value: 0, dinh_ky_unit: "day", is_active: true });
    setEditId(null);
    loadAll();
  };

  const handleDelete = async (id) => {
    if (window.confirm("Bạn có chắc muốn xoá?")) {
      await axios.delete(`/report/request/${id}`, { headers: { Authorization: `Bearer ${token}` } });
      loadAll();
    }
  };

  const toggleActive = async (id, current) => {
    await axios.put(`/report/request/${id}/active`, { is_active: !current }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    loadAll();
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Quản lý yêu cầu báo cáo</h2>
      <form onSubmit={handleSubmit} className="space-y-2 mb-4">
        <select
          value={form.loai_baocao_id}
          onChange={e => setForm({ ...form, loai_baocao_id: parseInt(e.target.value) })}
          className="border px-2 py-1"
          required
        >
          <option value="">-- Chọn loại báo cáo --</option>
          {loaiBaoCao.map(l => <option key={l.id} value={l.id}>{l.ten_loai}</option>)}
        </select>
        <div>
          {users.map(u => (
            <label key={u.id} className="inline-block mr-4">
              <input
                type="checkbox"
                checked={form.user_ids.includes(u.id)}
                onChange={() => handleCheckbox(u.id)}
              />
              <span className="ml-1">{u.ten_chi_nhanh}</span>
            </label>
          ))}
        </div>
        <div className="flex space-x-2">
          <input
            type="number"
            value={form.dinh_ky_value}
            onChange={e => setForm({ ...form, dinh_ky_value: parseInt(e.target.value) })}
            className="border px-2 py-1 w-1/3"
            placeholder="Định kỳ"
          />
          <select
            value={form.dinh_ky_unit}
            onChange={e => setForm({ ...form, dinh_ky_unit: e.target.value })}
            className="border px-2 py-1 w-1/3"
          >
            <option value="hour">Giờ</option>
            <option value="day">Ngày</option>
            <option value="month">Tháng</option>
          </select>
        </div>
        <button type="submit" className="bg-blue-600 text-white px-4 py-1 rounded">
          {editId ? "Cập nhật" : "Tạo yêu cầu"}
        </button>
      </form>

      <table className="table-auto border w-full text-sm">
        <thead>
          <tr className="bg-gray-200 text-center">
            <th>ID</th><th>Loại</th><th>Chi nhánh</th><th>Định kỳ</th><th>Kích hoạt</th><th>Hành động</th>
          </tr>
        </thead>
        <tbody>
          {requests.map(r => (
            <tr key={r.id} className="text-center border-t">
              <td>{r.id}</td>
              <td>{loaiBaoCao.find(l => l.id === r.loai_baocao_id)?.ten_loai || r.loai_baocao_id}</td>
              <td>{r.user_ids.map(id => users.find(u => u.id === id)?.ten_chi_nhanh || id).join(", ")}</td>
              <td>{r.dinh_ky_value} {r.dinh_ky_unit}</td>
              <td>{r.is_active ? "✔️" : "❌"}</td>
              <td>
                <button onClick={() => {
                  setForm({
                    loai_baocao_id: r.loai_baocao_id,
                    user_ids: r.user_ids,
                    dinh_ky_value: r.dinh_ky_value,
                    dinh_ky_unit: r.dinh_ky_unit,
                    is_active: r.is_active
                  });
                  setEditId(r.id);
                }} className="text-blue-600 mr-2">Sửa</button>
                <button onClick={() => handleDelete(r.id)} className="text-red-600 mr-2">Xoá</button>
                <button onClick={() => toggleActive(r.id, r.is_active)} className="text-yellow-600">
                  {r.is_active ? "Huỷ kích hoạt" : "Kích hoạt lại"}
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminYeuCauBaoCao;


===== FILE: frontend/src\pages\LoginPage.jsx =====
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const form = new FormData();
      form.append("username", username);
      form.append("password", password);

      const response = await axios.post("http://localhost:8000/auth/login", form);
      localStorage.setItem("token", response.data.access_token);
      navigate("dashboard");
    } catch (err) {
      setError("Sai tài khoản hoặc mật khẩu");
    }
  };

  return (
    <div className="flex items-center justify-center h-screen bg-gray-100">
      <form onSubmit={handleLogin} className="bg-white p-6 rounded shadow-md w-80">
        <h2 className="text-xl font-bold mb-4 text-center">Đăng nhập</h2>
        {error && <p className="text-red-500 mb-2">{error}</p>}
        <input
          type="text"
          placeholder="Tên đăng nhập"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="w-full mb-3 px-3 py-2 border rounded"
          required
        />
        <input
          type="password"
          placeholder="Mật khẩu"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full mb-4 px-3 py-2 border rounded"
          required
        />
        <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">
          Đăng nhập
        </button>
      </form>
    </div>
  );
}

export default LoginPage;


===== FILE: frontend/src\pages\UploadReport.jsx =====

import React, { useEffect, useState } from "react";
import axios from "axios";
import CountdownClock from "../components/CountdownClock";
import { getMyReportRequests } from "../services/requestService";

function UploadReport() {
  const [loaiBaoCaos, setLoaiBaoCaos] = useState([]);
  const [selectedId, setSelectedId] = useState("");
  const [selectedLoai, setSelectedLoai] = useState(null);
  const [hasEvent, setHasEvent] = useState(true);
  const [file, setFile] = useState(null);
  const [statusMsg, setStatusMsg] = useState("");
  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await getMyReportRequests(token);
        const requestLoaiIds = res.data.map(r => r.loai_baocao_id);
        const allLoai = await axios.get("http://localhost:8000/admin/loaibaocao/public", {
          headers: { Authorization: `Bearer ${token}` }
        });
        const filteredLoai = allLoai.data.filter(l => requestLoaiIds.includes(l.id));
        setLoaiBaoCaos(filteredLoai);
      } catch (err) {
        setStatusMsg("Không thể tải loại báo cáo");
      }
    };
    fetchData();
  }, []);

  useEffect(() => {
    const loai = loaiBaoCaos.find((l) => l.id === parseInt(selectedId));
    setSelectedLoai(loai);
  }, [selectedId, loaiBaoCaos]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file || !selectedId) return setStatusMsg("Vui lòng chọn loại và file");

    const formData = new FormData();
    formData.append("file", file);
    formData.append("loai_baocao_id", selectedId);
    formData.append("has_event", hasEvent);

    try {
      await axios.post("http://localhost:8000/report/upload", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });
      setStatusMsg("Gửi báo cáo thành công");
    } catch (err) {
      setStatusMsg("Gửi báo cáo thất bại");
    }
  };

  const isLate = selectedLoai && new Date() > new Date(selectedLoai.han_gui);
  const deadline = selectedLoai ? new Date(selectedLoai.han_gui) : null;

  return (
    <div className="p-4 max-w-xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Gửi báo cáo</h2>
      {statusMsg && <p className="mb-2 text-center text-blue-600">{statusMsg}</p>}

      <form onSubmit={handleSubmit} className="space-y-4">
        <select
          value={selectedId}
          onChange={(e) => setSelectedId(e.target.value)}
          className="w-full border px-2 py-2 rounded"
          required
        >
          <option value="">-- Chọn loại báo cáo --</option>
          {loaiBaoCaos.map((l) => (
            <option key={l.id} value={l.id}>
              {l.ten_loai}
            </option>
          ))}
        </select>

        {selectedLoai?.ten_loai.toLowerCase().includes("ngày") && (
          <div className="space-x-4">
            <label>
              <input
                type="radio"
                name="hasEvent"
                checked={hasEvent === true}
                onChange={() => setHasEvent(true)}
              />
              <span className="ml-1">Có sự kiện đáng chú ý</span>
            </label>
            <label>
              <input
                type="radio"
                name="hasEvent"
                checked={hasEvent === false}
                onChange={() => setHasEvent(false)}
              />
              <span className="ml-1">Không có sự kiện đáng chú ý</span>
            </label>
          </div>
        )}

        <input
          type="file"
          accept="*"
          onChange={(e) => setFile(e.target.files[0])}
          className="w-full"
        />

        {deadline && (
          <div className={`p-2 rounded text-white ${isLate ? "bg-red-500" : "bg-green-600"}`}>
            Hạn gửi: {deadline.toLocaleString("vi-VN")}
            <CountdownClock deadline={deadline} />
          </div>
        )}

        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          Gửi báo cáo
        </button>
      </form>
    </div>
  );
}

export default UploadReport;


===== FILE: frontend/src\router\router.jsx =====
import { createBrowserRouter } from "react-router-dom";
import App from "../App";
import LoginPage from "../pages/LoginPage";
import AdminAccounts from "../pages/AdminAccounts";
import UploadReport from "../pages/UploadReport";
import AdminLoaiBaoCao from "../pages/AdminLoaiBaoCao";
import AdminYeuCauBaoCao from "../pages/AdminYeuCauBaoCao";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <LoginPage />,
  },
  {
    path: "/dashboard",
    element: <App />,
  },
  {
    path: "/admin/accounts",
    element: <AdminAccounts />,
  },
  {
    path: "/admin/loaibaocao",
    element: <AdminLoaiBaoCao />,
  },
  {
    path: "/admin/yeucau",
    element: <AdminYeuCauBaoCao />,
  },
  {
    path: "/upload-report",
    element: <UploadReport />,
  }
]);

===== FILE: frontend/src\services\api.js =====
import axios from "axios";

const instance = axios.create({
  baseURL: "http://localhost:8000", // hoặc URL thật khi deploy
  headers: {
    "Content-Type": "application/json",
  },
});

export default instance;

===== FILE: frontend/src\services\requestService.js =====

import axios from "./api";

export const getMyReportRequests = (token) =>
  axios.get("/report/request/my", {
    headers: { Authorization: `Bearer ${token}` }
  });


===== FILE: frontend/src\services\userService.js =====

import axios from "./api";

export const fetchUsers = (token) =>
  axios.get("/admin/user", {
    headers: { Authorization: `Bearer ${token}` }
  });

export const createUser = (data, token) =>
  axios.post("/admin/user", data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const updateUser = (id, data, token) =>
  axios.put(`/admin/user/${id}`, data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const deleteUser = (id, token) =>
  axios.delete(`/admin/user/${id}`, {
    headers: { Authorization: `Bearer ${token}` }
  });

