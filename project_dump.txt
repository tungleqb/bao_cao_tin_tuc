
===== FILE: backend/.env =====
DATABASE_URL=postgresql+asyncpg://report_user:password@localhost:5444/baocao
SECRET_KEY=Tori@@123!!

===== FILE: backend/alembic.ini =====
[alembic]
script_location = alembic
sqlalchemy.url = postgresql+asyncpg://report_user:password@localhost:5444/baocao
output_encoding = utf-8
templates_path = alembic/templates

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


===== FILE: backend/Dockerfile =====
FROM python:3.10-slim

ENV PYTHONUNBUFFERED=1 \
    PORT=8000 \
    LOG_LEVEL=info

RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    unzip \
	nano \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

COPY requirements.txt /app/requirements.txt
RUN pip install --upgrade pip \
 && pip install -r requirements.txt
 
COPY . /app
COPY start.sh /app/start.sh
RUN chmod +x /app/start.sh

EXPOSE 8000

CMD ["/app/start.sh"]


===== FILE: backend/requirements.txt =====
alembic==1.7.7
SQLAlchemy==1.4.52
asyncpg==0.29.0
psycopg2-binary==2.9.9
fastapi==0.110.0
uvicorn[standard]==0.27.1
python-dotenv==1.0.1
pydantic-settings
pytest-asyncio
httpx
passlib
python-jose
python-multipart
bcrypt==3.2.2
aiofiles
apscheduler


===== FILE: backend/start.sh =====
#!/bin/bash

CERT_DIR="/cert"
CERT_KEY="$CERT_DIR/server.key"
CERT_CRT="$CERT_DIR/server.crt"

# N·∫øu ch∆∞a c√≥ ch·ª©ng ch·ªâ, t·∫°o m·ªõi
if [ ! -f "$CERT_KEY" ] || [ ! -f "$CERT_CRT" ]; then
    echo "üîê Generating self-signed certificate..."
    mkdir -p "$CERT_DIR"

    openssl req -x509 -nodes -days 3650 \
        -newkey rsa:2048 \
        -keyout "$CERT_KEY" \
        -out "$CERT_CRT" \
        -subj "/CN=${CERT_HOST:-localhost}"
    
    echo "‚úÖ Certificate created for ${CERT_HOST:-localhost}"
else
    echo "‚úîÔ∏è Using existing certificate"
fi

# Kh·ªüi ch·∫°y uvicorn
exec uvicorn app.main:app \
    --host 0.0.0.0 \
    --port ${PORT:-8000} \
    --ssl-keyfile "$CERT_KEY" \
    --ssl-certfile "$CERT_CRT"


===== FILE: backend/.pytest_cache\.gitignore =====
# Created by pytest automatically.
*


===== FILE: backend/.pytest_cache\CACHEDIR.TAG =====
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html


===== FILE: backend/.pytest_cache\README.md =====
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.


===== FILE: backend/.pytest_cache\v\cache\lastfailed =====
{}

===== FILE: backend/.pytest_cache\v\cache\nodeids =====
[
  "test/test_period.py::test_crud_period",
  "test/test_report_type_api.py::test_crud_report_type",
  "test/test_user_api.py::test_crud_user"
]

===== FILE: backend/.pytest_cache\v\cache\stepwise =====
[]

===== FILE: backend/alembic\env.py =====
import sys
import os
from logging.config import fileConfig
from sqlalchemy import create_engine, pool
from alembic import context

# Th√™m backend v√†o sys.path ƒë·ªÉ import app.*
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.database import Base
from app.config import settings
from app.models import user, report_type, period, report, audit_log

# L·∫•y c·∫•u h√¨nh t·ª´ alembic.ini
config = context.config
fileConfig(config.config_file_name)

target_metadata = Base.metadata

# Chuy·ªÉn asyncpg ‚ûî psycopg2 cho Alembic (sync engine)
database_url = settings.DATABASE_URL.replace("asyncpg", "psycopg2")

# B·ªè qua c√°c b·∫£ng h·ªá th·ªëng EDB, PostgreSQL
def include_object(object, name, type_, reflected, compare_to):
    if type_ == "table" and (
        name.startswith('edb$') or
        name.startswith('pg_') or
        name.startswith('dual') or
        name.startswith('callback_queue') or
        name.startswith('plsql')
    ):
        return False
    return True

def run_migrations_offline():
    context.configure(
        url=database_url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
        render_as_batch=True,
        include_object=include_object,
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    connectable = create_engine(
        database_url,
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            render_as_batch=True,
            include_object=include_object,
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


===== FILE: backend/alembic\script.py.mako =====
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""

from alembic import op
import sqlalchemy as sa

${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = "${up_revision}"
down_revision = ${down_revision if down_revision else "None"}
branch_labels = ${branch_labels if branch_labels else "None"}
depends_on = ${depends_on if depends_on else "None"}

def upgrade():
    ${upgrades if upgrades else "pass"}

def downgrade():
    ${downgrades if downgrades else "pass"}


===== FILE: backend/alembic\templates\script.py.mako =====
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""

from alembic import op
import sqlalchemy as sa

${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = "${up_revision}"
down_revision = ${down_revision if down_revision else "None"}
branch_labels = ${branch_labels if branch_labels else "None"}
depends_on = ${depends_on if depends_on else "None"}

def upgrade():
    ${upgrades if upgrades else "pass"}

def downgrade():
    ${downgrades if downgrades else "pass"}


===== FILE: backend/alembic\versions\20250429_update_period_table.py =====
"""Update Period Table: Add Xa fields and Reports

Revision ID: 20250429_update_period_table
Revises: 27e1d0e0c28c
Create Date: 2025-04-29 11:00:00

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic
revision = '20250429_update_period_table'
down_revision = '27e1d0e0c28c'
branch_labels = None
depends_on = None

def upgrade():
    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.add_column(sa.Column('XaActiveAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaDeactiveAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaStartAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaEndAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaFromAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaToAt', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('XaStatus', sa.String(), nullable=False, server_default='Deactive'))

def downgrade():
    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.drop_column('XaStatus')
        batch_op.drop_column('XaToAt')
        batch_op.drop_column('XaFromAt')
        batch_op.drop_column('XaEndAt')
        batch_op.drop_column('XaStartAt')
        batch_op.drop_column('XaDeactiveAt')
        batch_op.drop_column('XaActiveAt')


===== FILE: backend/alembic\versions\27e1d0e0c28c_init_database_schema.py =====
"""init database schema

Revision ID: 27e1d0e0c28c
Revises: 
Create Date: 2025-04-28 17:07:22.121843

"""

from alembic import op
import sqlalchemy as sa



# revision identifiers, used by Alembic.
revision = "27e1d0e0c28c"
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_audit_logs_id'), ['id'], unique=False)

    op.create_table('periods',
    sa.Column('TYPE', sa.String(), nullable=False),
    sa.Column('ID', sa.String(), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('ActiveAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('DeactiveAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('StartAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('EndAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('FromAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ToAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('Killer', sa.String(), nullable=False),
    sa.Column('Status', sa.String(), nullable=False),
    sa.Column('FolderPath', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('ID')
    )
    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_periods_ID'), ['ID'], unique=False)

    op.create_table('report_types',
    sa.Column('ID', sa.String(), nullable=False),
    sa.Column('DateCreated', sa.DateTime(), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Period_ID', sa.String(), nullable=False),
    sa.Column('ActiveOffset', sa.Integer(), nullable=True),
    sa.Column('ActiveOn', sa.Integer(), nullable=True),
    sa.Column('ActiveAt', sa.Time(), nullable=False),
    sa.Column('DeactiveOffset', sa.Integer(), nullable=True),
    sa.Column('DeactiveOn', sa.Integer(), nullable=True),
    sa.Column('DeactiveAt', sa.Time(), nullable=False),
    sa.Column('StartOffset', sa.Integer(), nullable=True),
    sa.Column('StartOn', sa.Integer(), nullable=True),
    sa.Column('StartAt', sa.Time(), nullable=False),
    sa.Column('EndOffset', sa.Integer(), nullable=True),
    sa.Column('EndOn', sa.Integer(), nullable=True),
    sa.Column('EndAt', sa.Time(), nullable=False),
    sa.Column('FromOffset', sa.Integer(), nullable=True),
    sa.Column('FromOn', sa.Integer(), nullable=True),
    sa.Column('From', sa.Time(), nullable=False),
    sa.Column('ToOffset', sa.Integer(), nullable=True),
    sa.Column('ToOn', sa.Integer(), nullable=True),
    sa.Column('To', sa.Time(), nullable=False),
    sa.Column('XaActiveOffset', sa.Integer(), nullable=True),
    sa.Column('XaActiveOn', sa.Integer(), nullable=True),
    sa.Column('XaActiveAt', sa.Time(), nullable=True),
    sa.Column('XaDeactiveOffset', sa.Integer(), nullable=True),
    sa.Column('XaDeactiveOn', sa.Integer(), nullable=True),
    sa.Column('XaDeactiveAt', sa.Time(), nullable=True),
    sa.Column('XaStartOffset', sa.Integer(), nullable=True),
    sa.Column('XaStartOn', sa.Integer(), nullable=True),
    sa.Column('XaStartAt', sa.Time(), nullable=True),
    sa.Column('XaEndOffset', sa.Integer(), nullable=True),
    sa.Column('XaEndOn', sa.Integer(), nullable=True),
    sa.Column('XaEndAt', sa.Time(), nullable=True),
    sa.Column('XaFromOffset', sa.Integer(), nullable=True),
    sa.Column('XaFromOn', sa.Integer(), nullable=True),
    sa.Column('XaFromAt', sa.Time(), nullable=True),
    sa.Column('XaToOffset', sa.Integer(), nullable=True),
    sa.Column('XaToOn', sa.Integer(), nullable=True),
    sa.Column('XaToAt', sa.Time(), nullable=True),
    sa.Column('DocExtList', sa.String(), nullable=True),
    sa.Column('MaxSize', sa.String(), nullable=True),
    sa.Column('NextAt', sa.DateTime(), nullable=True),
    sa.CheckConstraint('"Period_ID" IN (\'DAILY\',\'WEEKLY\',\'MONTHLY\',\'NONE\')', name='period_id_check'),
    sa.PrimaryKeyConstraint('ID')
    )
    with op.batch_alter_table('report_types', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_report_types_ID'), ['ID'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('time_created', sa.DateTime(), nullable=True),
    sa.Column('avatar', sa.String(), nullable=True),
    sa.Column('level', sa.String(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('reports',
    sa.Column('ID', sa.String(), nullable=False),
    sa.Column('Sender', sa.String(), nullable=False),
    sa.Column('SendID', sa.Integer(), nullable=False),
    sa.Column('PeriodID', sa.String(), nullable=False),
    sa.Column('ReportTypeID', sa.String(), nullable=False),
    sa.Column('ReportPeriodName', sa.String(), nullable=False),
    sa.Column('Blake3sum', sa.String(), nullable=False),
    sa.Column('FilePath', sa.String(), nullable=False),
    sa.Column('FileName', sa.String(), nullable=False),
    sa.Column('OriFileName', sa.String(), nullable=False),
    sa.Column('FileSize', sa.Integer(), nullable=False),
    sa.Column('SentAt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('Comment', sa.String(), nullable=True),
    sa.Column('HasEvent', sa.Boolean(), nullable=True),
    sa.Column('LateSeconds', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['PeriodID'], ['periods.ID'], ),
    sa.PrimaryKeyConstraint('ID')
    )
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_reports_ID'), ['ID'], unique=False)

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_reports_ID'))

    op.drop_table('reports')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_id'))

    op.drop_table('users')
    with op.batch_alter_table('report_types', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_report_types_ID'))

    op.drop_table('report_types')
    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_periods_ID'))

    op.drop_table('periods')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_audit_logs_id'))

    op.drop_table('audit_logs')
    # ### end Alembic commands ###


===== FILE: backend/alembic\versions\63ddd3d48607_create_audit_logs_table_with_model_id_.py =====
"""create audit_logs table with model_id as string

Revision ID: 63ddd3d48607
Revises: 20250429_update_period_table
Create Date: 2025-05-07 17:01:18.849144

"""

from alembic import op
import sqlalchemy as sa



# revision identifiers, used by Alembic.
revision = "63ddd3d48607"
down_revision = "20250429_update_period_table"
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('model_id', sa.String(), nullable=False),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_audit_logs_id'), ['id'], unique=False)

    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.alter_column('XaStatus',
               existing_type=sa.VARCHAR(),
               server_default=None,
               nullable=True)

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('periods', schema=None) as batch_op:
        batch_op.alter_column('XaStatus',
               existing_type=sa.VARCHAR(),
               server_default=sa.text("'Deactive'::character varying"),
               nullable=False)

    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_audit_logs_id'))

    op.drop_table('audit_logs')
    # ### end Alembic commands ###


===== FILE: backend/app\config.py =====
from pydantic_settings import BaseSettings
from pathlib import Path

class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"

    class Config:
        env_file = Path(__file__).resolve().parent.parent / ".env"
        env_file_encoding = "utf-8"

settings = Settings()

===== FILE: backend/app\database.py =====
# backend/app/database.py

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from contextlib import asynccontextmanager
from typing import AsyncGenerator
from .config import settings

# L·∫•y DATABASE_URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c .env
DATABASE_URL = settings.DATABASE_URL

# T·∫°o engine async
engine = create_async_engine(DATABASE_URL, future=True, echo=True)

# T·∫°o session maker
async_session_maker = sessionmaker(
    bind=engine,
    expire_on_commit=False,
    class_=AsyncSession
)

# T·∫°o Base ƒë·ªÉ k·∫ø th·ª´a trong models
Base = declarative_base()

# H√†m async dependency l·∫•y session
@asynccontextmanager
async def get_async_session():
    async with async_session_maker() as session:
        yield session

# Tu·ª≥ ch·ªçn: kh·ªüi t·∫°o b·∫£ng n·∫øu c·∫ßn
async def create_db_and_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with async_session_maker() as session:
        yield session



===== FILE: backend/app\main.py =====
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routers import admin_user, admin_report_type, period, report, auth, admin_audit_log
from fastapi.openapi.utils import get_openapi
from .scheduler import start_scheduler
from contextlib import asynccontextmanager
@asynccontextmanager
async def lifespan(app: FastAPI):
    start_scheduler()
    yield  # n∆°i ƒë·ªÉ cleanup n·∫øu c·∫ßn
    # V√≠ d·ª•: stop_scheduler()

app = FastAPI(lifespan=lifespan)
#app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


app.include_router(admin_user.router)
app.include_router(admin_report_type.router)
app.include_router(admin_audit_log.router)
app.include_router(period.router)
app.include_router(report.router)
app.include_router(auth.router)


# ‚úÖ Custom OpenAPI ƒë·ªÉ Swagger g·ª≠i token
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Report System API",
        version="1.0.0",
        description="API backend h·ªá th·ªëng b√°o c√°o.",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            if isinstance(method, dict):  # b·∫£o v·ªá ch·ªëng l·ªói
                method["security"] = [{"BearerAuth": []}]  # ‚úÖ B·∫Øt bu·ªôc th√™m security
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi


===== FILE: backend/app\scheduler.py =====
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone
import asyncio
import logging

from .database import async_session_maker as async_session
from .crud.period import get_all_periods, update_period_status
from .crud.period_create import create_period_if_needed

logger = logging.getLogger("scheduler")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("[%(asctime)s] %(levelname)s - %(message)s"))
logger.addHandler(handler)

scheduler = AsyncIOScheduler()

# ‚úÖ C√°c h√†m job t·∫°o session ri√™ng
async def activate_status(period_id: str):
    async with async_session() as db:
        logger.info(f"[CAPPHONG] Activating Status for Period: {period_id}")
        await update_period_status(db=db, period_id=period_id, status="Active")

async def deactivate_status(period_id: str):
    async with async_session() as db:
        logger.info(f"[CAPPHONG] Deactivating Status for Period: {period_id}")
        await update_period_status(db=db, period_id=period_id, status="INACTIVE")

async def activate_xastatus(period_id: str):
    async with async_session() as db:
        logger.info(f"[CAPXA] Activating XaStatus for Period: {period_id}")
        await update_period_status(db=db, period_id=period_id, xa_status="Active")

async def deactivate_xastatus(period_id: str):
    async with async_session() as db:
        logger.info(f"[CAPXA] Deactivating XaStatus for Period: {period_id}")
        await update_period_status(db=db, period_id=period_id, xa_status="INACTIVE")

def job_exists(job_id: str):
    return scheduler.get_job(job_id) is not None

async def schedule_existing_periods():
    try:
        async with async_session() as db:
            now = datetime.now(timezone.utc)

            print("‚è≥ G·ªçi create_period_if_needed PHONG")
            await create_period_if_needed(db=db, cap="CAPPHONG", now=now)

            print("‚è≥ G·ªçi create_period_if_needed XA")
            await create_period_if_needed(db=db, cap="CAPXA", now=now)

            print("‚è≥ G·ªçi get_all_periods")
            periods = await get_all_periods(db)

            print(f"‚úÖ S·ªë l∆∞·ª£ng periods: {len(periods)}")
            print(">>> D·ªØ li·ªáu periods:", periods)
            for p in periods:
                print("‚õ≥ Period ID:", getattr(p, "ID", p))  # tr√°nh l·ªói crash n·∫øu kh√¥ng ph·∫£i object
                print(f"üìÖ Scheduling activate-status-{p.ID} at {p.ActiveAt}")
                # Status jobs (CAPPHONG)
                if p.ActiveAt and p.ActiveAt > now:
                    job_id = f"activate-status-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            activate_status,
                            trigger=DateTrigger(run_date=p.ActiveAt),
                            args=[p.ID],
                            id=job_id
                        )
                if p.Status != "INACTIVE" and p.DeactiveAt and p.DeactiveAt < now:
                    job_id = f"deactivate-status-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            deactivate_status,
                            trigger=DateTrigger(run_date=now),
                            args=[p.ID],
                            id=job_id
                        )
                if p.DeactiveAt and p.DeactiveAt > now:
                    job_id = f"deactivate-status-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            deactivate_status,
                            trigger=DateTrigger(run_date=p.DeactiveAt),
                            args=[p.ID],
                            id=job_id
                        )

                # XaStatus jobs (CAPXA)
                if p.XaActiveAt and p.XaActiveAt > now:
                    job_id = f"activate-xastatus-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            activate_xastatus,
                            trigger=DateTrigger(run_date=p.XaActiveAt),
                            args=[p.ID],
                            id=job_id
                        )
                if p.XaStatus != "INACTIVE" and p.XaDeactiveAt and p.XaDeactiveAt < now:
                    job_id = f"deactivate-xastatus-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            deactivate_xastatus,
                            trigger=DateTrigger(run_date=now),
                            args=[p.ID],
                            id=job_id
                        )
                if p.XaDeactiveAt and p.XaDeactiveAt > now:
                    job_id = f"deactivate-xastatus-{p.ID}"
                    if not job_exists(job_id):
                        scheduler.add_job(
                            deactivate_xastatus,
                            trigger=DateTrigger(run_date=p.XaDeactiveAt),
                            args=[p.ID],
                            id=job_id
                        )
        print("‚úÖ schedule_existing_periods SUCCESS")
    except Exception as e:
        print(f"‚ùå schedule_existing_periods FAILED: {e}")
def start_scheduler():
    scheduler.start()

    loop = asyncio.get_event_loop()
    loop.create_task(schedule_existing_periods())

    def schedule_again():
        loop.call_soon_threadsafe(lambda: asyncio.create_task(schedule_existing_periods()))

    scheduler.add_job(
        schedule_again,
        trigger=IntervalTrigger(seconds=180),
        id="period-rescheduler",
        replace_existing=True
    )


===== FILE: backend/app\crud\audit_log.py =====
# backend/app/crud/audit_log.py

from sqlalchemy.ext.asyncio import AsyncSession
from ..models.audit_log import AuditLog
from ..schemas.audit_log import AuditLogCreate
from sqlalchemy.future import select
from sqlalchemy import update, delete

async def create_audit_log(db: AsyncSession, audit_log_in: AuditLogCreate):
    try:
        audit_log = AuditLog(**audit_log_in.model_dump())
        db.add(audit_log)
        await db.commit()
        await db.refresh(audit_log)
        return audit_log
    except Exception as e:
        print(f"‚ùå Error creating audit log: {e}")
        await db.rollback()
        return None
    
async def get_audit_logs(db: AsyncSession):
    try:
        result = await db.execute(select(AuditLog))
        return result.scalars().all()
    except Exception as e:
        print(f"‚ùå Error fetching audit logs: {e}")
        return []

async def get_audit_log(db: AsyncSession, audit_log_id: int):
    try:
        result = await db.execute(select(AuditLog).where(AuditLog.id == audit_log_id))
        return result.scalar_one_or_none()
    except Exception as e:
        print(f"‚ùå Error fetching audit log with ID {audit_log_id}: {e}")
        return None

async def delete_audit_log(db: AsyncSession, audit_log_id: int):
    try:
        stmt = delete(AuditLog).where(AuditLog.id == audit_log_id)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error deleting audit log with ID {audit_log_id}: {e}")
        await db.rollback()
        return False
    return True


===== FILE: backend/app\crud\period.py =====
# backend/app/crud/period.py

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update, delete
from fastapi import HTTPException
from ..models.period import Period
from ..schemas.period import PeriodCreate, PeriodUpdate
from datetime import datetime

async def create_period(db: AsyncSession, period_in: PeriodCreate):
    try:
        result = await db.execute(select(Period).where(Period.ID == period_in.ID))
        if result.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="Period ID already exists")

        period = Period(**period_in.model_dump())
        db.add(period)
        await db.commit()
        await db.refresh(period)
        return period
    except Exception as e:
        print(f"‚ùå Error creating period: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_periods(db: AsyncSession):
    try:
        result = await db.execute(select(Period))
        return result.scalars().all()
    except Exception as e:
        print(f"‚ùå Error fetching periods: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_period(db: AsyncSession, period_id: str):
    try:
        result = await db.execute(select(Period).where(Period.ID == period_id))
        return result.scalar_one_or_none()
    except Exception as e:
        print(f"‚ùå Error fetching period with ID {period_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_period(db: AsyncSession, period_id: str, period_in: PeriodUpdate):
    try:
        stmt = update(Period).where(Period.ID == period_id).values(**period_in.model_dump(exclude_unset=True))
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error updating period with ID {period_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def delete_period(db: AsyncSession, period_id: str):
    try:
        stmt = delete(Period).where(Period.ID == period_id)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error deleting period with ID {period_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_all_periods(db: AsyncSession):
    try:
        result = await db.execute(select(Period))
        return result.scalars().all()
    except Exception as e:  
        print(f"‚ùå Error fetching all periods: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_period_status(db: AsyncSession, period_id: str, status: str = None, xa_status: str = None):
    try:
        result = await db.execute(select(Period).where(Period.ID == period_id))
        period = result.scalar_one_or_none()
        if period:
            if status is not None:
                period.Status = status
            if xa_status is not None:
                period.XaStatus = xa_status
            await db.commit()
            await db.refresh(period)
        return period
    except Exception as e:  
        print(f"‚ùå Error updating status for period with ID {period_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

===== FILE: backend/app\crud\period_create.py =====
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime
from ..models.period import Period
from ..models.report_type import ReportType
from ..utils.period_utils import calculate_datetime
from ..utils.period_utils import generate_all_datetimes

#from ..models.report import Report
from pathlib import Path
import os

BASE_REPORT_FOLDER = "..\\uploaded_reports"

async def get_valid_report_types(db: AsyncSession, cap: str, now: datetime):
    try:
        result = await db.execute(select(ReportType))
        report_types = result.scalars().all()
        valid = []
        for r in report_types:
            active_at = calculate_datetime(now,
                                        r.ActiveOffset if cap == "CAPPHONG" else r.XaActiveOffset,
                                        r.ActiveOn if cap == "CAPPHONG" else r.XaActiveOn,
                                        r.ActiveAt if cap == "CAPPHONG" else r.XaActiveAt,
                                        r.Period_ID)
            deactive_at = calculate_datetime(now,
                                            r.DeactiveOffset if cap == "CAPPHONG" else r.XaDeactiveOffset,
                                            r.DeactiveOn if cap == "CAPPHONG" else r.XaDeactiveOn,
                                            r.DeactiveAt if cap == "CAPPHONG" else r.XaDeactiveAt,
                                            r.Period_ID)
            if active_at <= now <= deactive_at:
                valid.append((r, active_at, deactive_at))
        return valid
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y ReportType (cap={cap}): {e}")
        return None

async def create_period_if_needed(db: AsyncSession, cap: str, now: datetime):
    try:
        report_type_with_times = await get_valid_report_types(db, cap, now)
        new_periods = []
        for rt, _, _ in report_type_with_times:
            # D·ª±ng to√†n b·ªô m·ªëc th·ªùi gian
            datetimes = generate_all_datetimes(now, rt)

            phong_valid = datetimes["ActiveAt"] <= now <= datetimes["DeactiveAt"]
            xa_valid = datetimes["XaActiveAt"] and datetimes["XaActiveAt"] <= now <= datetimes["XaDeactiveAt"]

            if not (phong_valid or xa_valid):
                continue  # Kh√¥ng h·ª£p l·ªá ·ªü c·∫£ 2 c·∫•p ‚Üí b·ªè

            new_id = f"{rt.ID}_{datetimes['ActiveAt'].strftime('%Y%m%d%H%M%S')}"
            exists = await db.execute(select(Period).where(Period.ID == new_id))
            if exists.scalar_one_or_none():
                continue

            folder_path = os.path.join(BASE_REPORT_FOLDER, new_id)
            os.makedirs(folder_path, exist_ok=True)

            period = Period(
                ID=new_id,
                Name=f"{rt.Name} - {datetimes['ActiveAt'].strftime('%d/%m/%Y')}",
                TYPE=rt.ID,
                ActiveAt=datetimes["ActiveAt"],
                DeactiveAt=datetimes["DeactiveAt"],
                StartAt=datetimes["StartAt"],
                EndAt=datetimes["EndAt"],
                FromAt=datetimes["FromAt"],
                ToAt=datetimes["ToAt"],
                XaActiveAt=datetimes["XaActiveAt"],
                XaDeactiveAt=datetimes["XaDeactiveAt"],
                XaStartAt=datetimes["XaStartAt"],
                XaEndAt=datetimes["XaEndAt"],
                XaFromAt=datetimes["XaFromAt"],
                XaToAt=datetimes["XaToAt"],
                Status="Active" if phong_valid else "Deactive",
                XaStatus="Active" if xa_valid else "Deactive",
                FolderPath=folder_path,
                Killer="Auto"
            )
            db.add(period)
            new_periods.append(period)

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o Period (cap={cap}): {e}")
        return None
    if new_periods:
        try:
            await db.commit()
            for p in new_periods:
                await db.refresh(p)
        except Exception as e:
            await db.rollback()
            print(f"‚ùå L·ªói khi commit t·∫°o Period (cap={cap}): {e}")

    return new_periods


===== FILE: backend/app\crud\report.py =====
# backend/app/crud/report.py

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update, delete
from fastapi import HTTPException
from ..models.report import Report
from ..models.period import Period
from ..schemas.report import ReportCreate, ReportUpdate
from sqlalchemy import func
from ..models.report import Report

async def create_report(db: AsyncSession, report_in: ReportCreate):
    # Check if Report ID already exists
    try:
        result = await db.execute(select(Report).where(Report.ID == report_in.ID))
        if result.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="Report ID already exists")

        # Check if PeriodID exists
        period_check = await db.execute(select(Period).where(Period.ID == report_in.PeriodID))
        if not period_check.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="Period ID does not exist")

        report = Report(**report_in.model_dump())
        db.add(report)
        await db.commit()
        await db.refresh(report)
        return report
    except Exception as e:  
        print(f"‚ùå Error creating report: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_reports(db: AsyncSession):
    try:
        result = await db.execute(select(Report))
        return result.scalars().all()
    except Exception as e:  
        print(f"‚ùå Error fetching reports: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_report(db: AsyncSession, report_id: str):
    try:
        result = await db.execute(select(Report).where(Report.ID == report_id))
        return result.scalar_one_or_none()
    except Exception as e:
        print(f"‚ùå Error fetching report with ID {report_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_report(db: AsyncSession, report_id: str, report_in: ReportUpdate):
    try:
        stmt = update(Report).where(Report.ID == report_id).values(**report_in.model_dump(exclude_unset=True))
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error updating report with ID {report_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def delete_report(db: AsyncSession, report_id: str):
    try:
        stmt = delete(Report).where(Report.ID == report_id)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error deleting report with ID {report_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_all_periods(db: AsyncSession):
    try:
        result = await db.execute(select(Period))
        return result.scalars().all()
    except Exception as e:
        print(f"‚ùå Error fetching all periods: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_period_status(db: AsyncSession, period_id: str, status: str = None, xa_status: str = None):
    try:
        result = await db.execute(select(Period).where(Period.ID == period_id))
        period = result.scalar_one_or_none()
        if period:
            if status is not None:
                period.Status = status
            if xa_status is not None:
                period.XaStatus = xa_status
            await db.commit()
            await db.refresh(period)
        return period
    except Exception as e:  
        print(f"‚ùå Error updating period status with ID {period_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_report_by_sender_and_period(db: AsyncSession, sender: str, period_id: str):
    try:
        result = await db.execute(
            select(Report).where(Report.Sender == sender, Report.PeriodID == period_id)
        )
        return result.scalar_one_or_none()
    except Exception as e:  
        print(f"‚ùå Error fetching report by sender and period: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_all_reports_by_sender_and_period(db: AsyncSession, sender: str, period_id: str):
    try:
        result = await db.execute(
            select(Report).where(
                Report.Sender == sender,
                Report.PeriodID == period_id
            )
        )
        return result.scalars().all()
    except Exception as e:
        print(f"‚ùå Error fetching all reports by sender and period: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# L·∫•y b√°o c√°o cu·ªëi c√πng m·ªói t√†i kho·∫£n trong k·ª≥
async def get_latest_reports_by_period(db: AsyncSession, period_id: str):
    try:
        subq = (
            select(
                Report.Sender,
                func.max(Report.SentAt).label("LatestTime")
            )
            .where(Report.PeriodID == period_id)
            .group_by(Report.Sender)
            .subquery()
        )

        q = (
            select(Report)
            .join(subq, (Report.Sender == subq.c.Sender) & (Report.SentAt == subq.c.LatestTime))
            .where(Report.PeriodID == period_id)
        )

        result = await db.execute(q)
        return result.scalars().all()
    except Exception as e:  
        print(f"‚ùå Error fetching latest reports by period: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


===== FILE: backend/app\crud\report_type.py =====
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update, delete
from fastapi import HTTPException
from ..models.report_type import ReportType
from ..schemas.report_type import ReportTypeCreate, ReportTypeUpdate
from datetime import datetime
from uuid import uuid4

async def create_report_type(db: AsyncSession, report_type_in: ReportTypeCreate):
    try:
        result = await db.execute(select(ReportType).where(ReportType.Name == report_type_in.Name))
        if result.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="ReportType Name already exists")

        # ReportType(**report_type_in.dict()) is now validated with `Literal` for Period_ID
        id = f"{report_type_in.Period_ID}_{uuid4().hex[:8].upper()}"
        date_created = datetime.now()
        next_at = datetime.now()

        report_type_data = report_type_in.model_dump()
        report_type = ReportType(
            ID=id,
            DateCreated=date_created,
            NextAt=next_at,
            **report_type_data
        )
        db.add(report_type)
        await db.commit()
        await db.refresh(report_type)
        return report_type
    except Exception as e:  
        print(f"‚ùå Error creating report type: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_report_types(db: AsyncSession):
    try:
        result = await db.execute(select(ReportType))
        return result.scalars().all()
    except Exception as e:  
        print(f"‚ùå Error fetching report types: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_report_type(db: AsyncSession, report_type_id: str):
    try:
        result = await db.execute(select(ReportType).where(ReportType.ID == report_type_id))
        return result.scalar_one_or_none()
    except Exception as e:  
        print(f"‚ùå Error fetching report type with ID {report_type_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_report_type(db: AsyncSession, report_type_id: str, report_type_in: ReportTypeUpdate):
    try:
        stmt = update(ReportType).where(ReportType.ID == report_type_id).values(**report_type_in.model_dump(exclude_unset=True))
        await db.execute(stmt)
        await db.commit()
    except Exception as e:   
        print(f"‚ùå Error updating report type with ID {report_type_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def delete_report_type(db: AsyncSession, report_type_id: str):
    try:
        stmt = delete(ReportType).where(ReportType.ID == report_type_id)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:   
        print(f"‚ùå Error deleting report type with ID {report_type_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")


===== FILE: backend/app\crud\user.py =====
# backend/app/crud/user.py (phi√™n b·∫£n chu·∫©n h√≥a)

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update, delete
from fastapi import HTTPException
from ..models.user import User
from ..schemas.user import UserCreate, UserUpdate
from ..services.auth import get_password_hash
from datetime import datetime

async def create_user(db: AsyncSession, user_in: UserCreate):
    try:
        result = await db.execute(select(User).where(User.username == user_in.username))
        if result.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="Username already exists")

        hashed_password = get_password_hash(user_in.password)
        user = User(
            username=user_in.username,
            hashed_password=hashed_password,
            name=user_in.name,
            time_created=datetime.now(),  # ‚úÖ Th√™m d√≤ng n√†y
            level=user_in.level,
            is_admin=user_in.is_admin,
        )
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return user
    except Exception as e:  
        print(f"‚ùå Error creating user: {e}")
        await db.rollback() # Rollback the transaction in case of error 
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_users(db: AsyncSession):
    try:
        result = await db.execute(select(User))
        return result.scalars().all()
    except Exception as e:
        print(f"‚ùå Error fetching users: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_user(db: AsyncSession, user_id: int):
    try:
        result = await db.execute(select(User).where(User.id == user_id))
        return result.scalar_one_or_none()
    except Exception as e:
        print(f"‚ùå Error fetching user with ID {user_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_user(db: AsyncSession, user_id: int, user_in: UserUpdate):
    try:
        update_data = user_in.model_dump(exclude_unset=True)
        if "password" in update_data:
            update_data["hashed_password"] = get_password_hash(update_data.pop("password"))

        stmt = update(User).where(User.id == user_id).values(**update_data)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error updating user with ID {user_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def delete_user(db: AsyncSession, user_id: int):
    try:
        stmt = delete(User).where(User.id == user_id)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error deleting user with ID {user_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")

async def update_password_only(db: AsyncSession, user_id: int, new_password: str):
    try:  
        hashed = get_password_hash(new_password)
        stmt = update(User).where(User.id == user_id).values(hashed_password=hashed)
        await db.execute(stmt)
        await db.commit()
    except Exception as e:
        print(f"‚ùå Error updating password for user with ID {user_id}: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")


===== FILE: backend/app\dependencies\auth.py =====
from fastapi import Depends, HTTPException, status, Security
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional
from ..database import get_db
from ..schemas.user import UserOut
from ..services.auth import decode_token
from ..crud.user import get_user

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/admin/user/login")

async def get_current_user(token: str = Security(oauth2_scheme), db: AsyncSession = Depends(get_db)) -> UserOut:
    try:
        print(f"üß™ TOKEN RECEIVED = {token}")
        if not token:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Missing authentication token")

        try:
            payload = decode_token(token)
            user_id_raw = payload.get("sub")
            if user_id_raw is None:
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token payload")

            try:
                user_id = int(user_id_raw)
            except ValueError:
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token `sub` must be integer")

        except JWTError:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials")

        db_user = await get_user(db, user_id)
        if db_user is None:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

        print("‚úÖ Authenticated user:", db_user.username)
        print("‚úÖ Is admin:", db_user.is_admin)
        return UserOut.model_validate(db_user)
    except HTTPException as e:  
        print(f"‚ùå Error in get_current_user: {e.detail}")
        raise e
    except Exception as e:
        print(f"‚ùå Unexpected error in get_current_user: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")

async def get_current_admin(user: UserOut = Depends(get_current_user)):
    try:
        print(f"üß™ Ki·ªÉm tra quy·ªÅn admin c·ªßa user {user.username} - is_admin={user.is_admin}")
        if not user.is_admin:
            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="No permission")
        return user
    except HTTPException as e:
        print(f"‚ùå Error in get_current_admin: {e.detail}")
        raise e
    except Exception as e:
        print(f"‚ùå Unexpected error in get_current_admin: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")

===== FILE: backend/app\models\audit_log.py =====
from sqlalchemy import Column, Integer, String, DateTime
from ..database import Base


class AuditLog(Base):
    __tablename__ = "audit_logs"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False)
    action = Column(String, nullable=False)
    model = Column(String, nullable=False)
    model_id = Column(String, nullable=False)  # ‚úÖ ƒë·ªïi t·ª´ Integer sang String
    details = Column(String)
    timestamp = Column(DateTime, nullable=False)



===== FILE: backend/app\models\period.py =====
from sqlalchemy import Column, String, DateTime
from sqlalchemy.orm import relationship
from ..database import Base

class Period(Base):
    __tablename__ = "periods"

    TYPE = Column(String, nullable=False)
    ID = Column(String, primary_key=True, index=True)
    Name = Column(String, nullable=False)

    ActiveAt = Column(DateTime(timezone=True), nullable=False)
    DeactiveAt = Column(DateTime(timezone=True), nullable=False)
    StartAt = Column(DateTime(timezone=True), nullable=False)
    EndAt = Column(DateTime(timezone=True), nullable=False)
    FromAt = Column(DateTime(timezone=True), nullable=False)
    ToAt = Column(DateTime(timezone=True), nullable=False)

    XaActiveAt = Column(DateTime(timezone=True), nullable=True)
    XaDeactiveAt = Column(DateTime(timezone=True), nullable=True)
    XaStartAt = Column(DateTime(timezone=True), nullable=True)
    XaEndAt = Column(DateTime(timezone=True), nullable=True)
    XaFromAt = Column(DateTime(timezone=True), nullable=True)
    XaToAt = Column(DateTime(timezone=True), nullable=True)

    Status = Column(String, nullable=False)
    XaStatus = Column(String, nullable=True)

    Killer = Column(String, nullable=False)
    FolderPath = Column(String, nullable=True)

    reports = relationship("Report", back_populates="period")


===== FILE: backend/app\models\report.py =====
from sqlalchemy import Column, String, Integer, DateTime, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from ..database import Base


class Report(Base):
    __tablename__ = "reports"

    ID = Column(String, primary_key=True, index=True)
    Sender = Column(String, nullable=False)
    SendID = Column(Integer, nullable=False)
    PeriodID = Column(String, ForeignKey("periods.ID"), nullable=False)
    ReportTypeID = Column(String, nullable=False)
    ReportPeriodName = Column(String, nullable=False)
    Blake3sum = Column(String, nullable=False)
    FilePath = Column(String, nullable=False)
    FileName = Column(String, nullable=False)
    OriFileName = Column(String, nullable=False)
    FileSize = Column(Integer, nullable=False)
    SentAt = Column(DateTime(timezone=True), nullable=False)
    Comment = Column(String, nullable=True)
    HasEvent = Column(Boolean, default=False)
    LateSeconds = Column(Integer, default=0)

    period = relationship("Period", back_populates="reports")


===== FILE: backend/app\models\report_type.py =====
from sqlalchemy import Column, String, Integer, Time, DateTime, CheckConstraint
from ..database import Base

class ReportType(Base):
    __tablename__ = "report_types"
    __table_args__ = (
        CheckConstraint('"Period_ID" IN (\'DAILY\',\'WEEKLY\',\'MONTHLY\',\'NONE\')', name='period_id_check'),
    )

    ID = Column(String, primary_key=True, index=True)
    DateCreated = Column(DateTime, nullable=False)
    Name = Column(String, nullable=False)
    Period_ID = Column(String, nullable=False)  # DAILY, WEEKLY, MONTHLY, NONE

    ActiveOffset = Column(Integer, default=0)
    ActiveOn = Column(Integer, default=0)
    ActiveAt = Column(Time, nullable=False)

    DeactiveOffset = Column(Integer, default=0)
    DeactiveOn = Column(Integer, default=0)
    DeactiveAt = Column(Time, nullable=False)

    StartOffset = Column(Integer, default=0)
    StartOn = Column(Integer, default=0)
    StartAt = Column(Time, nullable=False)

    EndOffset = Column(Integer, default=0)
    EndOn = Column(Integer, default=0)
    EndAt = Column(Time, nullable=False)

    FromOffset = Column(Integer, default=0)
    FromOn = Column(Integer, default=0)
    From = Column(Time, nullable=False)

    ToOffset = Column(Integer, default=0)
    ToOn = Column(Integer, default=0)
    To = Column(Time, nullable=False)

    XaActiveOffset = Column(Integer, default=0)
    XaActiveOn = Column(Integer, default=0)
    XaActiveAt = Column(Time, nullable=True)

    XaDeactiveOffset = Column(Integer, default=0)
    XaDeactiveOn = Column(Integer, default=0)
    XaDeactiveAt = Column(Time, nullable=True)

    XaStartOffset = Column(Integer, default=0)
    XaStartOn = Column(Integer, default=0)
    XaStartAt = Column(Time, nullable=True)

    XaEndOffset = Column(Integer, default=0)
    XaEndOn = Column(Integer, default=0)
    XaEndAt = Column(Time, nullable=True)

    XaFromOffset = Column(Integer, default=0)
    XaFromOn = Column(Integer, default=0)
    XaFromAt = Column(Time, nullable=True)

    XaToOffset = Column(Integer, default=0)
    XaToOn = Column(Integer, default=0)
    XaToAt = Column(Time, nullable=True)

    DocExtList = Column(String, default=".doc .docx .pdf .bm2 .jpg .xlsx .xls")
    MaxSize = Column(String, default="100MB")
    NextAt = Column(DateTime, nullable=True)

===== FILE: backend/app\models\user.py =====
from sqlalchemy import Column, Integer, String, Boolean, DateTime
from ..database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    name = Column(String, nullable=True)
    time_created = Column(DateTime, nullable=True)
    avatar = Column(String, nullable=True)
    level = Column(String, nullable=True)
    is_admin = Column(Boolean, default=False)


===== FILE: backend/app\models\__init__.py =====
from .user import User
from .period import Period
from .report_type import ReportType
from .report import Report
from .audit_log import AuditLog



===== FILE: backend/app\routers\admin_audit_log.py =====
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..database import get_db
from ..crud import audit_log as crud
from ..schemas.audit_log import AuditLogOut
from ..dependencies.auth import get_current_admin
from ..schemas.user import UserOut

router = APIRouter(
    prefix="/admin/auditlogs",
    tags=["Admin-AuditLog"]
)

@router.get("/", response_model=list[AuditLogOut])
async def read_audit_logs(db: AsyncSession = Depends(get_db), user: UserOut = Depends(get_current_admin)):
    logs = None
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        logs = await crud.get_audit_logs(db)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching audit logs: {str(e)}")
        return logs
    return logs


===== FILE: backend/app\routers\admin_report_type.py =====
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..schemas import report_type as schema
from ..crud import report_type as crud
from ..dependencies.auth import get_current_admin
from ..database import get_db

router = APIRouter(prefix="/admin/loaibaocao", tags=["Admin-LoaiBaoCao"])

@router.post("/", response_model=schema.ReportTypeOut)
async def create(report_type_in: schema.ReportTypeCreate, db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        return await crud.create_report_type(db, report_type_in)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error creating report type: {str(e)}")

@router.get("/", response_model=list[schema.ReportTypeOut])
async def read_all(db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        return await crud.get_report_types(db)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching report types: {str(e)}")   

@router.put("/{id}", response_model=schema.ReportTypeOut)
async def update(id: str, report_type_in: schema.ReportTypeUpdate, db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        old = await crud.get_report_type(db, id)
        if not old:
            raise HTTPException(status_code=404, detail="ReportType not found")
        await crud.update_report_type(db, id, report_type_in)
        updated = await crud.get_report_type(db, id)
        return updated
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error updating report type: {str(e)}")

@router.delete("/{id}")
async def delete(id: str, db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        old = await crud.get_report_type(db, id)
        if not old:
            raise HTTPException(status_code=404, detail="ReportType not found")
        await crud.delete_report_type(db, id)
        return {"msg": "Deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error deleting report type: {str(e)}")


===== FILE: backend/app\routers\admin_user.py =====
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from ..schemas.user import UserCreate, UserUpdate, UserOut
from ..crud import user as crud_user
from ..dependencies.auth import get_current_admin
from ..database import get_db
from fastapi.security import OAuth2PasswordRequestForm
from ..services.auth import authenticate_admin_user, create_access_token

router = APIRouter(
    prefix="/admin/user",
    tags=["AdminUser"]
)

@router.post("/login")
async def login_admin(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    try:
        user = await authenticate_admin_user(db, form_data.username, form_data.password)
        if not user:
            raise HTTPException(status_code=401, detail="Incorrect username or password")
        access_token = create_access_token({"sub": str(user.id), "role": "admin"})
        return {"access_token": access_token, "token_type": "bearer"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error during login: {str(e)}")

@router.post("/", response_model=UserOut)
async def create_user(user_in: UserCreate, db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        return await crud_user.create_user(db, user_in)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error creating user: {str(e)}")

@router.get("/", response_model=list[UserOut])
async def read_users(db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        return await crud_user.get_users(db)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching users: {str(e)}")

@router.put("/{user_id}")
async def update_user(user_id: int, user_in: UserUpdate, db: AsyncSession = Depends(get_db), user=Depends(get_current_admin)):
    try:
        db_user = await crud_user.get_user(db, user_id)
        if not db_user:
            raise HTTPException(status_code=404, detail="User not found")
        await crud_user.update_user(db, user_id, user_in)
        return {"msg": "Updated successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error updating user: {str(e)}")

@router.delete("/{user_id}", dependencies=[Depends(get_current_admin)])
async def delete_user(user_id: int, db: AsyncSession = Depends(get_db)):
    try:
        db_user = await crud_user.get_user(db, user_id)
        if not db_user:
            raise HTTPException(status_code=404, detail="User not found")
        await crud_user.delete_user(db, user_id)
        return {"msg": "Deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error deleting user: {str(e)}")


===== FILE: backend/app\routers\auth.py =====
from fastapi import APIRouter, HTTPException, Depends
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession
from ..database import get_db
from ..services import auth as auth_service
from ..schemas.user import Token
from ..schemas.user import UserCreate, UserUpdate, UserOut, PasswordChange
from ..dependencies.auth import get_current_user
from ..services.auth import verify_password

router = APIRouter(prefix="/auth", tags=["Auth"])

@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    try:
        user = await auth_service.authenticate_user(db, form_data.username, form_data.password)
        if not user:
            raise HTTPException(status_code=401, detail="Incorrect username or password")
        token = auth_service.create_access_token({"sub": str(user.id)})
        return {"access_token": token, "token_type": "bearer"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error during login: {str(e)}")

@router.get("/me", response_model=UserOut)
async def get_current_user_info(user: UserOut = Depends(get_current_user)):
    return user

@router.post("/changepassword", status_code=200)
async def change_password(
    payload: PasswordChange,
    db: AsyncSession = Depends(get_db),
    user: UserOut = Depends(get_current_user)):
    try:
        from ..crud.user import get_user, update_password_only

        db_user = await get_user(db, user.id)
        if not db_user:
            raise HTTPException(status_code=404, detail="User not found")

        # ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
        hashed_password = db_user.hashed_password
        if not verify_password(payload.old_password, hashed_password):
            raise HTTPException(status_code=401, detail="M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng")

        await update_password_only(db, user.id, payload.new_password)
        return {"message": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error during password change: {str(e)}")


===== FILE: backend/app\routers\period.py =====
import os
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import IntegrityError
from datetime import datetime, timezone
from ..schemas.period import PeriodCreate, PeriodUpdate, PeriodOut
from ..models.period import Period
from ..crud import period as crud_period
from ..database import get_db
from ..dependencies.auth import get_current_user
from ..schemas.user import UserOut

router = APIRouter(prefix="/period", tags=["Period"])

@router.post("/", response_model=PeriodOut)
async def create_period(period_in: PeriodCreate, db: AsyncSession = Depends(get_db),
                        user: UserOut = Depends(get_current_user)):
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        exists = await db.execute(select(Period).where(Period.ID == period_in.ID))
        if exists.scalar_one_or_none():
            raise HTTPException(status_code=400, detail="Period ID already exists")

        period = Period(**period_in.model_dump())
        db.add(period)
        try:
            await db.commit()
            await db.refresh(period)
        except IntegrityError:
            await db.rollback()
            raise HTTPException(status_code=400, detail="Invalid period creation")
        return period
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating period: {str(e)}")

@router.get("/", response_model=list[PeriodOut])
async def get_periods(db: AsyncSession = Depends(get_db), user: UserOut = Depends(get_current_user)):
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        result = await db.execute(select(Period))
        return result.scalars().all()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching periods: {str(e)}")

@router.get("/active", response_model=list[PeriodOut])
async def get_active_periods_by_user_level(
    db: AsyncSession = Depends(get_db),
    user: UserOut = Depends(get_current_user)):
    try:
        now = datetime.now(timezone.utc)
        if user.level == "CAPXA":
            stmt = select(Period).where(
                Period.XaStatus == "Active",
                Period.XaActiveAt.isnot(None),
                Period.XaDeactiveAt.isnot(None),
                Period.XaActiveAt <= now,
                Period.XaDeactiveAt >= now
            )
        else:
            stmt = select(Period).where(
                Period.Status == "Active",
                Period.ActiveAt.isnot(None),
                Period.DeactiveAt.isnot(None),
                Period.ActiveAt <= now,
                Period.DeactiveAt >= now
            )
        result = await db.execute(stmt)
        return result.scalars().all()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching active periods: {str(e)}")

@router.get("/{period_id}", response_model=PeriodOut)
async def get_period(period_id: str, db: AsyncSession = Depends(get_db), user: UserOut = Depends(get_current_user)):
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        result = await db.execute(select(Period).where(Period.ID == period_id))
        period = result.scalar_one_or_none()
        if not period:
            raise HTTPException(status_code=404, detail="Period not found")
        return period
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching period: {str(e)}")

@router.put("/{period_id}", response_model=PeriodOut)
async def update_period(period_id: str, period_in: PeriodUpdate, db: AsyncSession = Depends(get_db), user: UserOut = Depends(get_current_user)):
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        result = await db.execute(select(Period).where(Period.ID == period_id))
        period = result.scalar_one_or_none()
        if not period:
            raise HTTPException(status_code=404, detail="Period not found")

        update_data = period_in.model_dump(exclude_unset=True)
        for key, value in update_data.items():
            setattr(period, key, value)
        try:
            await db.commit()
            await db.refresh(period)
        except IntegrityError:
            await db.rollback()
            raise HTTPException(status_code=400, detail="Invalid data update")

        return period
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating period: {str(e)}") 

@router.delete("/{period_id}")
async def delete_period(period_id: str, db: AsyncSession = Depends(get_db), user: UserOut = Depends(get_current_user)):
    try:
        if not user.is_admin:
            raise HTTPException(status_code=403, detail="Permission denied")
        stmt = select(Period).options(selectinload(Period.reports)).where(Period.ID == period_id)
        result = await db.execute(stmt)
        period = result.scalar_one_or_none()
        if not period:
            raise HTTPException(status_code=404, detail="Period not found")

        if period.reports:
            raise HTTPException(status_code=400, detail="Cannot delete period with attached reports")

        await db.delete(period)
        await db.commit()
        return {"ok": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting period: {str(e)}")


===== FILE: backend/app\routers\report.py =====
# backend/app/routers/report.py

from fastapi import APIRouter, Depends, UploadFile, File, Form, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from ..crud import report as crud_report
from ..crud import audit_log as crud_audit_log
from ..models.period import Period
from ..models.report_type import ReportType
from ..models.report import Report
from ..schemas.report import ReportCreate, ReportOut, ReportStatus
from ..schemas.audit_log import AuditLogCreate
from ..dependencies.auth import get_current_user
from ..dependencies.auth import get_current_admin
from ..database import get_db
import os
import hashlib
from datetime import datetime, timezone
 
from fastapi.responses import FileResponse
import zipfile
import tempfile

router = APIRouter(prefix="/report", tags=["Report"])

@router.post("/upload", response_model=ReportOut)
async def upload_report(
    file: UploadFile = File(...),
    #report_type_id: str = Form(...),
    period_id: str = Form(...),
    comment: str = Form(""),
    has_event: bool = Form(False),
    db: AsyncSession = Depends(get_db),
    user=Depends(get_current_user)):
    report = None
    try:
        #print("‚è≥ B·∫Øt ƒë·∫ßu upload")
        now = datetime.now(timezone.utc)

        # Ki·ªÉm tra k·ª≥ b√°o c√°o
        period_result = await db.execute(select(Period).where(Period.ID == period_id))
        period = period_result.scalar_one_or_none()
        if not period:
            raise HTTPException(status_code=404, detail="Period not found")

        #print(f"‚úÖ Period: {period.ID}")
        # Ki·ªÉm tra lo·∫°i b√°o c√°o
        report_type_result = await db.execute(select(ReportType).where(ReportType.ID == period.TYPE))
        report_type = report_type_result.scalar_one_or_none()
        if not report_type:
            raise HTTPException(status_code=404, detail="ReportType not found")
        report_type_id = report_type.ID
        #print(f"‚úÖ ReportType: {report_type.ID}")
        # Ki·ªÉm tra tr·∫°ng th√°i theo c·∫•p t√†i kho·∫£n
        if user.level == "CAPXA":
            if period.XaStatus != "Active":
                raise HTTPException(status_code=400, detail="This reporting period is not active for your level.")
        else:
            if period.Status != "Active":
                raise HTTPException(status_code=400, detail="This reporting period is not active.")

        #print(f"‚úÖ ReportType: {report_type.MaxSize[:-2]}")
        # ƒê·ªçc v√† ki·ªÉm tra file
        content = await file.read()
        if len(content) > float(report_type.MaxSize[:-2]) * 1024 * 1024:
            raise HTTPException(status_code=400, detail=f"File size exceeds {report_type.MaxSize} limit")

        #print(f"‚úÖ ReportType: {report_type.ID}")
        ext_list = (report_type.DocExtList or "").lower().split()
        ext_list = [e.strip().lstrip(".") for e in ext_list if e.strip()]
        file_ext = file.filename.lower().rsplit(".", 1)[-1]
        if file_ext not in ext_list:
            raise HTTPException(status_code=400, detail=f"Invalid file extension '.{file_ext}'. Allowed: {', '.join(ext_list)}")
        
        #print(f"‚úÖ File check OK: {file.filename}")

        checksum = hashlib.blake2b(content).hexdigest()
        #print(f"‚úÖ Checksum: {checksum}")

        # T·∫°o ƒë∆∞·ªùng d·∫´n l∆∞u file
        folder_path = period.FolderPath
        full_folder_path = folder_path
        timestamp_str = now.strftime("%Y%m%d_%H%M%S")
        new_filename = f"{user.username}_{period.ID}_{timestamp_str}.{file_ext}"    
        #new_filename = f"{user.username}_{period.ID}.{file_ext}"
        if period.TYPE[:5] == "DAILY":
            subfolder = "has_event" if has_event else "no_event"
            full_folder_path = os.path.join(folder_path, subfolder)

        os.makedirs(full_folder_path, exist_ok=True)

        save_path = os.path.join(full_folder_path, new_filename)
        with open(save_path, "wb") as f:
            f.write(content)

        # T√≠nh ƒë·ªô tr·ªÖ
        if now < period.StartAt:
            late_seconds = int((now - period.StartAt).total_seconds())
        elif now > period.EndAt:
            late_seconds = int((now - period.EndAt).total_seconds())
        else:
            late_seconds = 0

        # Sinh ID tr√°nh tr√πng
        import uuid
        report_id = f"{user.username}_{period_id}_{uuid.uuid4().hex[:8]}"

        old_reports = await crud_report.get_all_reports_by_sender_and_period(db, user.username, period_id)

        report_in = ReportCreate(
            ID=report_id,
            Sender=user.username,
            SendID=user.id,
            PeriodID=period_id,
            ReportTypeID=report_type_id,
            ReportPeriodName=period.Name,
            Blake3sum=checksum,
            FilePath=save_path,
            FileName= new_filename,
            OriFileName=file.filename,
            FileSize=len(content),
            SentAt=now,
            Comment=comment,
            HasEvent=has_event,
            LateSeconds=late_seconds,
        )

        # Ghi b√°o c√°o
        report = await crud_report.create_report(db, report_in)
        #print("üì¶ G·ªçi create_report")
        # Sau khi ghi b√°o c√°o m·ªõi th√†nh c√¥ng
        for old in old_reports:
            if old.FilePath and os.path.exists(old.FilePath):
                try:
                    os.remove(old.FilePath)
                    print(f"üßπ ƒê√£ xo√° file c≈©: {old.FilePath}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° file {old.FilePath}: {e}")

        try:
            await crud_audit_log.create_audit_log(db, AuditLogCreate(
                user_id=user.id,
                action="UPLOAD_REPORT",
                model="Report",
                model_id=report.ID,
                details=f"Uploaded report {report.ID}",
                timestamp=now.replace(tzinfo=None)
            ))
        except Exception as e:
            print(f"‚ö†Ô∏è Audit log failed: {e}")
    except Exception as e:
        print(f"‚ùå L·ªói khi upload b√°o c√°o: {e}")
        raise HTTPException(status_code=500, detail="Failed to upload report")
    return report


@router.get("/reports", response_model=list[ReportOut])
async def get_my_reports(db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):
    try:
        all_reports = await crud_report.get_reports(db)
        return [r for r in all_reports if r.SendID == user.id]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching reports: {str(e)}")


@router.get("/{period_id}", response_model=ReportStatus)
async def get_user_report_for_period(
    period_id: str,
    db: AsyncSession = Depends(get_db),
    user=Depends(get_current_user)):
    try:
        result = await db.execute(
            select(Report)
            .where(Report.PeriodID == period_id, Report.SendID == user.id)
            .order_by(Report.SentAt.desc())
        )
        report = result.scalars().first()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"DB error: {str(e)}")

    if not report:
        return ReportStatus(Status="not_sent")

    return ReportStatus(
        Status="sent",
        Blake3sum=report.Blake3sum,
        SentAt=report.SentAt,
        LateSeconds=report.LateSeconds,
        HasEvent=report.HasEvent,
        OriFileName=report.OriFileName,
        ID=report.ID
    )


@router.get("/admin/{period_id}", response_model=list[ReportOut])
async def get_reports_by_period(
    period_id: str,
    db: AsyncSession = Depends(get_db),
    admin=Depends(get_current_admin)
):
    try:
        from ..crud import report as crud_report
        reports = await crud_report.get_latest_reports_by_period(db, period_id)
        return reports
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch reports: {str(e)}")
   

@router.get("/download/{period_id}")
async def download_period_folder(
    period_id: str,
    db: AsyncSession = Depends(get_db),
    admin=Depends(get_current_admin)  # ‚úÖ Ch·ªâ cho admin
    ):
    try:
        result = await db.execute(select(Period).where(Period.ID == period_id))
        period = result.scalar_one_or_none()
        if not period:
            raise HTTPException(status_code=404, detail="Period not found")

        folder_path = period.FolderPath
        if not os.path.isdir(folder_path):
            raise HTTPException(status_code=404, detail="Folder not found")

        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".zip")
        with zipfile.ZipFile(tmp.name, "w", zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(folder_path):
                for file in files:
                    full_path = os.path.join(root, file)
                    relative_path = os.path.relpath(full_path, folder_path)
                    zipf.write(full_path, arcname=relative_path)

        zip_filename = f"{period_id}.zip"
        return FileResponse(tmp.name, filename=zip_filename, media_type="application/zip")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to download folder: {str(e)}")





===== FILE: backend/app\schemas\audit_log.py =====
# backend/app/schemas/audit_log.py

from datetime import datetime
from pydantic import BaseModel
from pydantic import ConfigDict

class AuditLogBase(BaseModel):
    user_id: int
    action: str
    model: str
    model_id: str | None = None
    details: str | None = None
    timestamp: datetime

class AuditLogCreate(BaseModel):
    user_id: int
    action: str
    model: str
    model_id: str  # ‚úÖ CH·ªàNH t·ª´ int ‚Üí str
    details: str
    timestamp: datetime


class AuditLogOut(AuditLogBase):
    id: int
    model_config = ConfigDict(from_attributes=True)


===== FILE: backend/app\schemas\period.py =====
from datetime import datetime
from pydantic import BaseModel, field_validator
from pydantic import ConfigDict

class PeriodBase(BaseModel):
    TYPE: str
    ID: str
    Name: str

    ActiveAt: datetime
    DeactiveAt: datetime
    StartAt: datetime
    EndAt: datetime
    FromAt: datetime
    ToAt: datetime

    XaActiveAt: datetime | None = None
    XaDeactiveAt: datetime | None = None
    XaStartAt: datetime | None = None
    XaEndAt: datetime | None = None
    XaFromAt: datetime | None = None
    XaToAt: datetime | None = None

    Status: str
    XaStatus: str | None = None

    Killer: str
    FolderPath: str

    # ‚úÖ VALIDATORS
    @field_validator("EndAt")
    def validate_end_after_start(cls, v, info):
        if v <= info.data["StartAt"]:
            raise ValueError("EndAt ph·∫£i sau StartAt")
        return v

    @field_validator("ToAt")
    def validate_to_after_from(cls, v, info):
        if v <= info.data["FromAt"]:
            raise ValueError("ToAt ph·∫£i sau FromAt")
        return v

    @field_validator("XaEndAt")
    def validate_xa_end_after_start(cls, v, info):
        start = info.data.get("XaStartAt")
        if v and start and v <= start:
            raise ValueError("XaEndAt ph·∫£i sau XaStartAt")
        return v

    @field_validator("XaToAt")
    def validate_xa_to_after_from(cls, v, info):
        from_ = info.data.get("XaFromAt")
        if v and from_ and v <= from_:
            raise ValueError("XaToAt ph·∫£i sau XaFromAt")
        return v

    @field_validator("XaStartAt")
    def validate_xa_start_after_active(cls, v, info):
        active = info.data.get("XaActiveAt")
        if v and active and v < active:
            raise ValueError("XaStartAt ph·∫£i sau ho·∫∑c b·∫±ng XaActiveAt")
        return v

    @field_validator("StartAt")
    def validate_start_after_active(cls, v, info):
        active = info.data.get("ActiveAt")
        if v < active:
            raise ValueError("StartAt ph·∫£i sau ho·∫∑c b·∫±ng ActiveAt")
        return v

class PeriodCreate(PeriodBase):
    pass

class PeriodUpdate(BaseModel):
    Name: str | None = None
    Status: str | None = None
    XaStatus: str | None = None
    Killer: str | None = None

class PeriodOut(PeriodBase):
    model_config = ConfigDict(from_attributes=True)

===== FILE: backend/app\schemas\report.py =====
# backend/app/schemas/report.py
from datetime import datetime
from pydantic import BaseModel
from typing import Optional
from pydantic import ConfigDict

class ReportBase(BaseModel):
    Sender: str
    SendID: int
    PeriodID: str
    ReportTypeID: str
    ReportPeriodName: str
    Blake3sum: str
    FilePath: str
    FileName: str
    OriFileName: str
    FileSize: int
    SentAt: datetime
    Comment: Optional[str] = None
    HasEvent: Optional[bool] = False
    LateSeconds: Optional[int] = 0

class ReportCreate(ReportBase):
    ID: str

class ReportUpdate(BaseModel):
    Comment: Optional[str] = None
    HasEvent: Optional[bool] = None

class ReportOut(ReportCreate):
    model_config = ConfigDict(from_attributes=True)

class ReportStatus(BaseModel):
    Status: str  # "sent" ho·∫∑c "not_sent"
    Blake3sum: Optional[str] = None
    SentAt: Optional[datetime] = None
    LateSeconds: Optional[int] = None
    HasEvent: Optional[bool] = None
    OriFileName: Optional[str] = None
    ID: Optional[str] = None
    model_config = ConfigDict(from_attributes=True)




===== FILE: backend/app\schemas\report_type.py =====
from datetime import datetime, time
from pydantic import BaseModel
from typing import Optional, Literal
from pydantic import ConfigDict
from pydantic import BaseModel, field_validator, ValidationInfo
from ..utils.period_utils import calculate_datetime

# ƒê·ªãnh nghƒ©a ki·ªÉu cho Period_ID
PeriodIDType = Literal["DAILY", "WEEKLY", "MONTHLY", "NONE"]

class ReportTypeBase(BaseModel):
    Name: str
    Period_ID: PeriodIDType

    ActiveOffset: int = 0
    ActiveOn: int = 0
    ActiveAt: time

    DeactiveOffset: int = 0
    DeactiveOn: int = 0
    DeactiveAt: time

    StartOffset: int = 0
    StartOn: int = 0
    StartAt: time

    EndOffset: int = 0
    EndOn: int = 0
    EndAt: time

    FromOffset: int = 0
    FromOn: int = 0
    From: time

    ToOffset: int = 0
    ToOn: int = 0
    To: time

    XaActiveOffset: int = 0
    XaActiveOn: int = 0
    XaActiveAt: time

    XaDeactiveOffset: int = 0
    XaDeactiveOn: int = 0
    XaDeactiveAt: time

    XaStartOffset: int = 0
    XaStartOn: int = 0
    XaStartAt: time

    XaEndOffset: int = 0
    XaEndOn: int = 0
    XaEndAt: time

    XaFromOffset: int = 0
    XaFromOn: int = 0
    XaFromAt: time

    XaToOffset: int = 0
    XaToOn: int = 0
    XaToAt: time

    DocExtList: Optional[str] = ".doc .docx .pdf .bm2 .jpg .xlsx .xls"
    MaxSize: Optional[str] = "100MB"
    #NextAt: Optional[datetime] = None

    # Validator m·ªõi
    
    @field_validator("EndAt")
    def validate_end_after_start(cls, end_at, info: ValidationInfo):
        data = info.data
        required_fields = ["Period_ID", "StartOffset", "StartOn", "StartAt", "EndOffset", "EndOn"]
        
        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá m·ªëc th·ªùi gian")

        period_id = data["Period_ID"]

        base_date = datetime(2025, 1, 1)  # ng√†y c∆° s·ªü tham chi·∫øu (b·∫•t k·ª≥)

        # T√≠nh to√°n m·ªëc th·ªùi gian Start
        start_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["StartOffset"],
            on=data["StartOn"],
            at=data["StartAt"],
            period_id=period_id
        )

        # T√≠nh to√°n m·ªëc th·ªùi gian End
        end_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["EndOffset"],
            on=data["EndOn"],
            at=end_at,
            period_id=period_id
        )
        print(f"Start: {start_datetime}, End: {end_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if end_datetime <= start_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (EndOffset, EndOn, EndAt) ph·∫£i l·ªõn h∆°n (StartOffset, StartOn, StartAt)")

        return end_at
    
    @field_validator("To")
    def validate_to_after_from(cls, to_at, info: ValidationInfo):
        data = info.data
        required_fields = ["Period_ID", "FromOffset", "FromOn", "From", "ToOffset", "ToOn"]

        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá To v√† From")

        period_id = data["Period_ID"]
        base_date = datetime(2025, 1, 1)

        from_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["FromOffset"],
            on=data["FromOn"],
            at=data["From"],
            period_id=period_id
        )

        to_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["ToOffset"],
            on=data["ToOn"],
            at=to_at,
            period_id=period_id
        )
        print(f"From: {from_datetime}, To: {to_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if to_datetime <= from_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (ToOffset, ToOn, To) ph·∫£i l·ªõn h∆°n (FromOffset, FromOn, From)")

        return to_at

    @field_validator("XaEndAt")
    def validate_xa_end_after_start(cls, xa_end_at, info: ValidationInfo): 
        data = info.data
        required_fields = ["Period_ID", "XaStartOffset", "XaStartOn", "XaStartAt", "XaEndOffset", "XaEndOn"]

        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá XaStartAt v√† XaEndAt")

        period_id = data["Period_ID"]
        base_date = datetime(2025, 1, 1)

        xa_start_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaStartOffset"],
            on=data["XaStartOn"],
            at=data["XaStartAt"],
            period_id=period_id
        )

        xa_end_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaEndOffset"],
            on=data["XaEndOn"],
            at=xa_end_at,
            period_id=period_id
        )
        print(f"XaStart: {xa_start_datetime}, XaEnd: {xa_end_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if xa_end_datetime <= xa_start_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (XaEndOffset, XaEndOn, XaEndAt) ph·∫£i l·ªõn h∆°n (XaStartOffset, XaStartOn, XaStartAt)")

        return xa_end_at
    
    @field_validator("XaToAt")
    def validate_xa_to_after_from(cls, xa_to_at, info: ValidationInfo):
        data = info.data
        required_fields = ["Period_ID", "XaFromOffset", "XaFromOn", "XaFromAt", "XaToOffset", "XaToOn"]

        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá  XaToAt v√† XaFromAt")
        period_id = data["Period_ID"]
        base_date = datetime(2025, 1, 1)

        xa_from_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaFromOffset"],
            on=data["XaFromOn"],
            at=data["XaFromAt"],
            period_id=period_id
        )

        xa_to_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaToOffset"],
            on=data["XaToOn"],
            at=xa_to_at,
            period_id=period_id
        )
        print(f"XaFrom: {xa_from_datetime}, XaTo: {xa_to_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if xa_to_datetime <= xa_from_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (XaToOffset, XaToOn, XaToAt) ph·∫£i l·ªõn h∆°n (XaFromOffset, XaFromOn, XaFromAt)")

        return xa_to_at
    
    @field_validator("DeactiveAt")
    def validate_deactive_after_active(cls, deactive_at, info: ValidationInfo):
        data = info.data
        required_fields = ["Period_ID", "ActiveOffset", "ActiveOn", "ActiveAt", "DeactiveOffset", "DeactiveOn"]

        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá DeactiveAt v√† ActiveAt")

        period_id = data["Period_ID"]
        base_date = datetime(2025, 1, 1)

        active_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["ActiveOffset"],
            on=data["ActiveOn"],
            at=data["ActiveAt"],
            period_id=period_id
        )

        deactive_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["DeactiveOffset"],
            on=data["DeactiveOn"],
            at=deactive_at,
            period_id=period_id
        )
        print(f"Active: {active_datetime}, Deactive: {deactive_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán    
        if deactive_datetime <= active_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (DeactiveOffset, DeactiveOn, DeactiveAt) ph·∫£i l·ªõn h∆°n (ActiveOffset, ActiveOn, ActiveAt)")

        return deactive_at

    @field_validator("XaDeactiveAt")
    def validate_xa_deactive_after_active(cls, xa_deactive_at, info: ValidationInfo):
        data = info.data
        required_fields = ["Period_ID", "XaActiveOffset", "XaActiveOn", "XaActiveAt", "XaDeactiveOffset", "XaDeactiveOn"]

        if not all(k in data for k in required_fields):
            raise ValueError("Thi·∫øu th√¥ng tin ƒë·ªÉ ki·ªÉm tra h·ª£p l·ªá XaActiveAt v√† XaDeactiveAt")

        period_id = data["Period_ID"]
        base_date = datetime(2025, 1, 1)

        xa_active_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaActiveOffset"],
            on=data["XaActiveOn"],
            at=data["XaActiveAt"],
            period_id=period_id
        )

        xa_deactive_datetime = calculate_datetime(
            base_date=base_date,
            offset=data["XaDeactiveOffset"],
            on=data["XaDeactiveOn"],
            at=xa_deactive_at,
            period_id=period_id
        )

        print(f"XaActive: {xa_active_datetime}, XaDeactive: {xa_deactive_datetime}")
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if xa_deactive_datetime <= xa_active_datetime:
            raise ValueError("Th·ªùi ƒëi·ªÉm (XaDeactiveOffset, XaDeactiveOn, XaDeactiveAt) ph·∫£i l·ªõn h∆°n (XaActiveOffset, XaActiveOn, XaActiveAt)")

        return xa_deactive_at

    
class ReportTypeCreate(ReportTypeBase):
    #ID: str
    #DateCreated: datetime
    pass

class ReportTypeUpdate(ReportTypeBase):
    #ID: str
    #DateCreated: datetime
    #NextAt: Optional[datetime] = None
    pass

class ReportTypeOut(ReportTypeCreate):
    ID: str
    DateCreated: datetime
    NextAt: Optional[datetime] = None
    model_config = ConfigDict(from_attributes=True)


===== FILE: backend/app\schemas\user.py =====
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from pydantic import ConfigDict

class UserBase(BaseModel):
    username: str
    name: Optional[str] = None
    level: Optional[str] = None
    is_admin: bool = False

class UserCreate(UserBase):
    password: str

class UserUpdate(BaseModel):
    name: Optional[str] = None
    level: Optional[str] = None
    password: Optional[str] = None
    is_admin: Optional[bool] = None

class UserOut(BaseModel):
    id: int
    username: str
    name: Optional[str] = None
    level: Optional[str] = None
    is_admin: bool
    time_created: Optional[datetime] = None  # ‚úÖ B·ªï sung
    avatar: Optional[str] = None              # ‚úÖ B·ªï sung

    model_config = ConfigDict(from_attributes=True)

class Token(BaseModel):
    access_token: str
    token_type: str

class PasswordChange(BaseModel):
    old_password: str
    new_password: str

===== FILE: backend/app\services\auth.py =====
from passlib.context import CryptContext
from datetime import datetime, timedelta, timezone
from jose import jwt, JWTError
from fastapi import HTTPException, status  # üõ†Ô∏è <- Th√™m d√≤ng n√†y!
from ..config import settings

from ..schemas.user import Token

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from ..models.user import User

SECRET_KEY = settings.SECRET_KEY
ALGORITHM = settings.ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    try:
        return pwd_context.verify(plain_password, hashed_password)
    except Exception as e:
        print(f"‚ùå Error verifying password: {e}")
        return False

def get_password_hash(password):
    try:
        return pwd_context.hash(password)
    except Exception as e:
        print(f"‚ùå Error hashing password: {e}")
        return None

def create_access_token(data: dict, expires_delta: timedelta = None):
    try:
        to_encode = data.copy()
        expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=15))
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
        return encoded_jwt
    except Exception as e:
        print(f"‚ùå Error creating access token: {e}")
        return None

def decode_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError as e:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")

async def get_user_by_username(db: AsyncSession, username: str):
    try:
        result = await db.execute(select(User).filter(User.username == username))
        return result.scalar_one_or_none()
    except Exception as e:
        print(f"‚ùå Error fetching user by username {username}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")

async def authenticate_admin_user(db: AsyncSession, username: str, password: str):
    try:
        user = await get_user_by_username(db, username)
        if not user or not user.is_admin:
            return None
        if not verify_password(password, user.hashed_password):
            return None
        return user
    except Exception as e:  
        print(f"‚ùå Error authenticating admin user: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")

async def authenticate_user(db: AsyncSession, username: str, password: str):
    try:
        result = await db.execute(select(User).where(User.username == username))
        user = result.scalar_one_or_none()
        if not user or not verify_password(password, user.hashed_password):
            return None
        return user
    except Exception as e:
        print(f"‚ùå Error authenticating user: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Internal server error")




===== FILE: backend/app\utils\period_utils.py =====

from datetime import datetime, timedelta, time, date, timezone

def validate_offset_on_at(offset: int, on: int, at: time, period_id: str):
    if period_id == "WEEKLY":
        if not (0 <= on <= 6):
            raise ValueError("V·ªõi WEEKLY, gi√° tr·ªã 'On' ph·∫£i n·∫±m trong kho·∫£ng 0-6 (0 l√† Th·ª© 2).")
    elif period_id == "MONTHLY":
        if not (1 <= on <= 31):
            raise ValueError("V·ªõi MONTHLY, gi√° tr·ªã 'On' ph·∫£i n·∫±m trong kho·∫£ng 1-31.")
    elif period_id == "DAILY":
        if on != 0:
            raise ValueError("V·ªõi DAILY, gi√° tr·ªã 'On' ph·∫£i l√† 0.")
    elif period_id == "NONE":
        if offset != 0 or on != 0:
            raise ValueError("V·ªõi NONE, 'Offset' v√† 'On' ph·∫£i l√† 0.")

def calculate_datetime(base_date: datetime, offset: int, on, at: time, period_id: str) -> datetime:
    try:
        if period_id == "NONE":
            if not isinstance(on, date):
                raise ValueError("With Period_ID = 'NONE', `on` must be a `datetime.date` object")
            return datetime.combine(on, at)
        if period_id == "WEEKLY":
            # T√¨m th·ª© Hai g·∫ßn nh·∫•t v·ªÅ tr∆∞·ªõc
            anchor = base_date - timedelta(days=base_date.weekday())
            shifted = anchor + timedelta(weeks=offset)
            if on:
                shifted += timedelta(days=on - 1)
        elif period_id == "MONTHLY":
            # V·ªÅ ng√†y ƒë·∫ßu th√°ng
            anchor = base_date.replace(day=1)
            month = anchor.month + offset
            year = anchor.year + (month - 1) // 12
            month = (month - 1) % 12 + 1
            shifted = anchor.replace(year=year, month=month)
            if on:
                shifted = shifted.replace(day=on)
        else:  # DAILY
            shifted = base_date + timedelta(days=offset)
            if on:
                shifted += timedelta(days=on)
        result = datetime.combine(shifted.date(), at)
        return result.replace(tzinfo=timezone.utc)
    except Exception as e:
        print(f"‚ùå L·ªói khi t√≠nh to√°n th·ªùi gian: {e}")
        raise

def generate_all_datetimes(base_date: datetime, rt) -> dict:
    try:
        period_id = rt.Period_ID
        return {
            "ActiveAt": calculate_datetime(base_date, rt.ActiveOffset, rt.ActiveOn, rt.ActiveAt, period_id),
            "DeactiveAt": calculate_datetime(base_date, rt.DeactiveOffset, rt.DeactiveOn, rt.DeactiveAt, period_id),
            "StartAt": calculate_datetime(base_date, rt.StartOffset, rt.StartOn, rt.StartAt, period_id),
            "EndAt": calculate_datetime(base_date, rt.EndOffset, rt.EndOn, rt.EndAt, period_id),
            "FromAt": calculate_datetime(base_date, rt.FromOffset, rt.FromOn, rt.From, period_id),
            "ToAt": calculate_datetime(base_date, rt.ToOffset, rt.ToOn, rt.To, period_id),
            "XaActiveAt": calculate_datetime(base_date, rt.XaActiveOffset, rt.XaActiveOn, rt.XaActiveAt, period_id) if rt.XaActiveAt else None,
            "XaDeactiveAt": calculate_datetime(base_date, rt.XaDeactiveOffset, rt.XaDeactiveOn, rt.XaDeactiveAt, period_id) if rt.XaDeactiveAt else None,
            "XaStartAt": calculate_datetime(base_date, rt.XaStartOffset, rt.XaStartOn, rt.XaStartAt, period_id) if rt.XaStartAt else None,
            "XaEndAt": calculate_datetime(base_date, rt.XaEndOffset, rt.XaEndOn, rt.XaEndAt, period_id) if rt.XaEndAt else None,
            "XaFromAt": calculate_datetime(base_date, rt.XaFromOffset, rt.XaFromOn, rt.XaFromAt, period_id) if rt.XaFromAt else None,
            "XaToAt": calculate_datetime(base_date, rt.XaToOffset, rt.XaToOn, rt.XaToAt, period_id) if rt.XaToAt else None,
        }
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o t·∫•t c·∫£ c√°c m·ªëc th·ªùi gian: {e}")
        raise


===== FILE: backend/cert\ca.crt =====
-----BEGIN CERTIFICATE-----
MIIC6DCCAdCgAwIBAgIUCPvS2Wm33u4CoYeKmVWdiby3oQowDQYJKoZIhvcNAQEL
BQAwFDESMBAGA1UEAwwJTXlMb2NhbENBMB4XDTI1MDUxMjAzNTQxOFoXDTM1MDUx
MDAzNTQxOFowFDESMBAGA1UEAwwJTXlMb2NhbENBMIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAh6YRsQJZEhZ0fwJbeLBtAciS7l71lI613N1uzOA2vnAN
HZa5S+CV2zwLgD81rHXRf8ynFHoEE9zC65DWCGRfSNmHVgxzcHpzvXuN7uSk19gi
cHle4WQc6HCT1Kdi9thB/K5A0JXfC4847Ewqyl0EagifLCZDOtEkvCad1tKnSK+i
2BR8/9E2DZhpbuxzR4ceAL+S17eCwppjwoP2tGAU4Er1DHPpDNrEi0uQTA+f27P2
LVPg81BjypEUyvcBaT1335/eUjR/SAGnUYoD1Wwy/mYeIpUT/inP166w/j5RdRxk
fcUGMtEk3MYJrp+Hp62W3UBkHJFaM8t40dSHthEefQIDAQABozIwMDAPBgNVHREE
CDAGhwRkWvwkMB0GA1UdDgQWBBT4lJFbjktqKcNa+43sOnZnY+j6hzANBgkqhkiG
9w0BAQsFAAOCAQEAPdpndI4XbEWI9WKeDYwxIwZXQ9oVhS7aoHLvfedFKvKaTaKz
vWry0iUwf3IK2p31x/YvKbpwo/je4AnoxS758N7WmBFyd+Es+cSKZAnTjHzGDUYs
5ZfnUbhUG3J2MAMb4ka7rKe+n8/uWsVQq6v3tEZlX+qpPYccz8bJ/UoC+t01OzRl
MXUyedOU4/AoWW45U9fTo1mr9JCbUWTNCwPg24YTx0TZH45Hv9Qaboded8uyJjwr
G99i6zvP7re/hTgxFzxNoMSeNsbOfm49Mpx5EEhcvsFHe2ZbyyVpGrvXT2OfIzVr
q2PndqDoRAUMySBaGKDvyIR9AyUS09NmOdlpsA==
-----END CERTIFICATE-----


===== FILE: backend/cert\ca.key =====
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCHphGxAlkSFnR/
Alt4sG0ByJLuXvWUjrXc3W7M4Da+cA0dlrlL4JXbPAuAPzWsddF/zKcUegQT3MLr
kNYIZF9I2YdWDHNwenO9e43u5KTX2CJweV7hZBzocJPUp2L22EH8rkDQld8Ljzjs
TCrKXQRqCJ8sJkM60SS8Jp3W0qdIr6LYFHz/0TYNmGlu7HNHhx4Av5LXt4LCmmPC
g/a0YBTgSvUMc+kM2sSLS5BMD5/bs/YtU+DzUGPKkRTK9wFpPXffn95SNH9IAadR
igPVbDL+Zh4ilRP+Kc/XrrD+PlF1HGR9xQYy0STcxgmun4enrZbdQGQckVozy3jR
1Ie2ER59AgMBAAECggEAApEbrc3uixOGmMJ1ecIYeVTS2r0xbUCRIJUJrP9gNMP0
uXlf2yUbuhlG2orNjoxwTMXfiiNP/fd9VAS1lFUgbFoIXKZ0Po3eAS1Yv3Oyohvr
uCz6F2l/zFP9qI+f4ffze7UfDXAFoYvrLm/SboTeqPYMOd4lRqNpggquZT/DXqgp
HkCGN/sp/P7feRtZ2mUnFvwwgBKFES7o1BHhE+d+v1398mYErgCqT67mzefSSEcp
sjhFacO1D310O/LsJMwyTVfCd7FfEQ1n3Jb0XL137WZdPsSktYfSR6oH/iYM7a8h
3gnIcp7INg861b+OYjZapu4wkQqzuU8xj6i/hmnW8wKBgQC7SSLEk9OZWc5yYoqb
3V6mljV1BT5/zxFijQg+SijtfprqB09NGx0UfdolAQUdRK0jlPEQuTWB5PU2qt+H
f9O2rC9a+/S5SsPb3f6Y1v7XloJvMdOIfbSP41kNFgo97JWCWESoU1kwe6wD6pdt
qaJhxl/Yigou90pt6NDA4CSQrwKBgQC5auogZstdGZDRUF3RpMLc2nWJSnP+7tMg
e1rbUa3BH8VWmJFzvC7Ha9Rv9LSsMTKO+GS25NoSi+KOYGk/KKgzaIA8Q6ehSaMP
kZR9Mg8FqrkpV50Wblyomz1FWMqBEmdp+YGdFQWxSi2r4u0dDhtptrJ+5le/0eZx
UD3nKE0WkwKBgBQiqtBDrG5CT4XQvmI/jJuQbrLkG3IWSyIzU32O75OJFxKuMoJx
tdCsLzXnRCt/ZLX8n2ZS40PR3+M+v8WLorFzFaxMhmUdeq060tKP2tpG3kMiMkHs
ces+YCaeBf/eXbyjzM3kGCS0Rywsnpc1s7WbZFadkLa385KZg0gZURUVAoGBAIHv
IF7Qala1obxs2zIcicmG9bLeD+doqV8r0oG6/U5G211R0SwPhaCOOfKywyGf4FQ8
USexu/gfOwaXHWn7LdPIuYSBzKjEF5bDaBFL0Schelw0X4rmj9w/3XIJRO+qW/nx
tRjFMJYK63J2tb8UsbUlKHSxKnDrwNdLafXhUhQtAoGATk1/w/WSQA6U2woElD+M
JRqZCdgI7CwBHPyBFPO7Vr/EtMNOTMI4XBKj5Rj3Ra96Wb9mA8EHw6bOceygakmt
SBSpiZOJncaKhgHNw9eMkAnlexr0NpztPbIL8IZCur2zH01A5Fy/JurPdZTp7RrO
vxn2KXNLvgJ04DMXBgvAG5s=
-----END PRIVATE KEY-----


===== FILE: backend/cert\ca.srl =====
4381AAE6D9A535D6CF1B28F109AF24A4514FE84E


===== FILE: backend/cert\openssl.cnf =====
[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
req_extensions     = v3_req
x509_extensions    = v3_req
prompt             = no

[ req_distinguished_name ]
CN = 100.90.252.36

[ v3_req ]
subjectAltName = @alt_names

[ alt_names ]
IP.1 = 100.90.252.36


===== FILE: backend/cert\server.crt =====
-----BEGIN CERTIFICATE-----
MIICszCCAZsCFEOBqubZpTXWzxso8QmvJKRRT+hOMA0GCSqGSIb3DQEBCwUAMBQx
EjAQBgNVBAMMCU15TG9jYWxDQTAeFw0yNTA1MTIwMzU1MThaFw0zNTA1MTAwMzU1
MThaMBgxFjAUBgNVBAMMDTEwMC45MC4yNTIuMzYwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQCM+9K+Bkwe1r8T0iqv8PlM8r41dWkV/IEb6zjTsOsqnzp2
gwx8IjEqW5FpYjzr1fkahKGz0F2dLB1YrHeB5inGTe5aQHVqbfxbAaTvUXrVA082
Qt4fMAIUtbEvWJafzh2kEoGIBA7X4rcr4m6ElAm9lgzz41VGPMClMeeyZVEg+jfk
WASbMCy0fFv/cIn1aAw6wA0YsZepBrnP/BZXcxwI8F4Tvy5ubudTScHDmp72QRsC
sy2Ms5DL49Bil/F6BacqHM+N6c9auWx/hmjp4hEm9Ft+cmqmioxXXNme0uQJEKIr
QJk2SLDFaLgaaFEXuLhk3ztyMyyc+T77FPxOF1o7AgMBAAEwDQYJKoZIhvcNAQEL
BQADggEBABwCL3d76PdX8+Wy96+0EDsFgYtXV3SUdHck6BzqWfObyvpu/Hd8BOY6
9t14k0GoANw6iJnsCCJx/uoByk+JLAL6dQ6+5FVHwrIDetZQQTUwDdlU9EqiSUHD
EgHRmS3BRqhcT5Jzknv/rPaLB9kYNuYW3n5GvGo73Eshg3xCkXfYnUd6cD+1H3sW
F0s292BuWzYzNxFhtSO+4w8oKIxhhZZhNbkkjuK0L2iLW66sjE1T8/y2uHbN0EQo
kYCfVTBIMSLdRo5ia665VeB6Rs/HUMLelAdQqATNmnJzvZNB7N53/xlrrBA4Bjxx
/Olexujd5cBbJuE3QuGXtn81dpgDp9Y=
-----END CERTIFICATE-----


===== FILE: backend/cert\server.csr =====
-----BEGIN CERTIFICATE REQUEST-----
MIICfzCCAWcCAQAwGDEWMBQGA1UEAwwNMTAwLjkwLjI1Mi4zNjCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAIz70r4GTB7WvxPSKq/w+UzyvjV1aRX8gRvr
ONOw6yqfOnaDDHwiMSpbkWliPOvV+RqEobPQXZ0sHVisd4HmKcZN7lpAdWpt/FsB
pO9RetUDTzZC3h8wAhS1sS9Ylp/OHaQSgYgEDtfityviboSUCb2WDPPjVUY8wKUx
57JlUSD6N+RYBJswLLR8W/9wifVoDDrADRixl6kGuc/8FldzHAjwXhO/Lm5u51NJ
wcOanvZBGwKzLYyzkMvj0GKX8XoFpyocz43pz1q5bH+GaOniESb0W35yaqaKjFdc
2Z7S5AkQoitAmTZIsMVouBpoURe4uGTfO3IzLJz5PvsU/E4XWjsCAwEAAaAiMCAG
CSqGSIb3DQEJDjETMBEwDwYDVR0RBAgwBocEZFr8JDANBgkqhkiG9w0BAQsFAAOC
AQEAcBmzeYsXmqFUsDeBckNhs1IF2t97gekokRYrjEWQMouUguWjxpP8AygRMbk4
guO8tbn2IhAXwZpxkl0CgUnaf1xzGMRYkQZuLuoVKC8Tv9q832mLwd4xLRoWnC53
HMhQy7oTjL8gcu7+udX3EJ6lY8bTWM7bm5fguyB3wzJt1j0jKEyHNH9Mdp7B5qbh
1KgO+vfQs/L7ULm7UJ/AyTpwFkNoLCo4BxYg6Xm2MBgKLkd8o3gMF6EpcljAtWF/
8uysKNtSWVReKcygDpf/BdfCLxoFbDftYDadBLHST6pfl8f6Qm66lYWUgZvi7NtZ
vKhl7obZ7ri1IcQDojQuMfLRfw==
-----END CERTIFICATE REQUEST-----


===== FILE: backend/cert\server.key =====
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCM+9K+Bkwe1r8T
0iqv8PlM8r41dWkV/IEb6zjTsOsqnzp2gwx8IjEqW5FpYjzr1fkahKGz0F2dLB1Y
rHeB5inGTe5aQHVqbfxbAaTvUXrVA082Qt4fMAIUtbEvWJafzh2kEoGIBA7X4rcr
4m6ElAm9lgzz41VGPMClMeeyZVEg+jfkWASbMCy0fFv/cIn1aAw6wA0YsZepBrnP
/BZXcxwI8F4Tvy5ubudTScHDmp72QRsCsy2Ms5DL49Bil/F6BacqHM+N6c9auWx/
hmjp4hEm9Ft+cmqmioxXXNme0uQJEKIrQJk2SLDFaLgaaFEXuLhk3ztyMyyc+T77
FPxOF1o7AgMBAAECggEABVg8noiVlSu19bXneWEMym5/aH5pe/RlHp5Vuqy/1Y9Q
w5JnREN1krIC+rhHL/eeKHOzv6HcEqvL9wMeyrVjiwmESjacXOsLgJW433u6yN2F
wLxbOFp1EbzrmSxmFWvWctRixbnFqEiHgink37DPB7lrB0nsfyupb/nK21f88d+M
HFT7JHoMM4n92rxtpCqigvCO4M7vuI01fl+RPNXatQ8T7rhRsMP2RV0T+DhXl2aA
fJAn8y7NlrNA/Fg0YUl8cxJdSFgRCvkClDacMlyJUlmx/h4hY5vFb8FdUMPIKM04
puQsQPjm89lyclpxvNdDpmdkSK0VeJJayx4tSBbeRQKBgQC+6mxGiZVG0tlmcn3g
GyUoS2H40RkVwgD2+tSEDKDr18hhkInKuK4N1oUd2+VfmOSr/hFRJu9rTFX6Kpt/
lXeT71f1sPFodot9WWcxe2dTIcmtynT1s0eUqu7P8QtJDBXLGosraAz/imqGU9hm
ZNmgOefTYce4N91F+yt6JxovTQKBgQC9C7y1Njc9tovjs47vPU4ADpTClWi+9EUt
Q2ZcuNtn5Lk4c1CMqME02WplOg4wgIoKPUn3qvtzStB71+8uZzjWbkGLBFjBQJmN
jFEl6vpWRZByEBgXeCpI9+0hAPk59/F35bVCaUpiEhjMqeCJCj+KKbnFGem2rzZQ
Hy//USr7pwKBgETlzqtqDXAguYoqOVj+EtvG0JV9yGK8v6JiBP2enRhfqBXlloSN
P2sJBsMuz0k/oQ6cwt0Zgv+i7cg5RiK16xB9KK4m7Af59/8Fm6MU2MX8hI7uaGUf
DO8O/N4YLC1xahABBUZl54L1DdpqOcdCD/Ot0gbL28qUhosxyI/tupplAoGAItBX
hzOdxrKoXl2B1BMBG0eUI6VqLchEOQqxfh/Y3/AiIAA0dELbmcT0MAIZ/NqfETWq
On71YY0EidoBRRVjRTH2xggd5DDmVkfh5c65HUwgRrEqDqBlgRyPQcWxH/jGMiNO
VxWWyiq1AHPEUthdTS9T87VK8gagRO8JYsZq2P8CgYBy4xDHB4PpG48DptdelbtQ
wl7RpTLoX+51rX3z+cbyRtdHjPHPPENW5a0yz0QxQIpoR+1vAjn8gej0UbD9lUeD
SaiJxO2lczklT0sreGcbtnKwHZX+1xAo+ZJUcWqNHZyX4Nl5rgQAJBv/HqThOGU8
H/USmTpSoyZXDmCkkJe0xA==
-----END PRIVATE KEY-----


===== FILE: backend/test\test_create_objects.py =====
# backend/test/test_create_objects.py

import asyncio
from datetime import datetime, time

from backend.app.database import Base, engine, SessionLocal
from backend.app.models.user import User
from backend.app.models.report_type import ReportType
from backend.app.models.period import Period
from backend.app.models.report import Report
from backend.app.models.audit_log import AuditLog

async def test_create_objects():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async with SessionLocal() as session:
        # Test User
        user = User(
            username="testuser",
            hashed_password="hashedpassword",
            name="Test Chi Nhanh",
            time_created=datetime.now(),
            avatar="avatar.png",
            level="CAPPHONG",
            is_admin=False
        )
        session.add(user)

        # Test ReportType
        report_type = ReportType(
            ID="BCNGAY",
            DateCreated=datetime.now(),
            Name="B√°o c√°o ng√†y",
            Period_ID="DAILY",
            ActiveAt=time(0, 0, 0),
            DeactiveAt=time(23, 59, 59),
            StartAt=time(12, 0, 0),
            EndAt=time(14, 0, 0),
            From=time(0, 0, 0),
            To=time(23, 59, 59)
        )
        session.add(report_type)

        # Test Period
        period = Period(
            TYPE="BCNGAY",
            ID="BCNGAY_20250427",
            Name="B√°o c√°o ng√†y 27/4/2025",
            ActiveAt=datetime.now(),
            DeactiveAt=datetime.now(),
            StartAt=datetime.now(),
            EndAt=datetime.now(),
            FromAt=datetime.now(),
            ToAt=datetime.now(),
            Killer="Auto",
            Status="Active",
            FolderPath="/static/reports/BCNGAY_20250427"
        )
        session.add(period)

        # Test Report
        report = Report(
            ID="testuser_BCNGAY_20250427_120000",
            Sender="testuser",
            SendID=1,
            PeriodID="BCNGAY_20250427",
            ReportTypeID="BCNGAY",
            ReportPeriodName="B√°o c√°o ng√†y 27/4/2025",
            Blake3sum="dummychecksum",
            FilePath="/static/reports/file1.pdf",
            FileName="testchinhanh_BCNGAY",
            OriFileName="file1.pdf",
            FileSize=1024,
            SentAt=datetime.now(),
            Comment="No comment",
            HasEvent=False,
            LateSeconds=0
        )
        session.add(report)

        # Test AuditLog
        audit_log = AuditLog(
            user_id=1,
            action="CREATE",
            model="Report",
            model_id=1,
            details="Created report",
            timestamp=datetime.now()
        )
        session.add(audit_log)

        await session.commit()
        print("‚úÖ Successfully created all test objects.")

if __name__ == "__main__":
    asyncio.run(test_create_objects())


===== FILE: backend/test\test_datameta.py =====
# file test_metadata.py
from database import Base
print(Base.metadata.tables.keys())


===== FILE: backend/test\test_period.py =====
# backend/test/test_period.py

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import pytest
import pytest_asyncio
from httpx import AsyncClient, ASGITransport
from app.main import app
from app.database import get_db
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql+asyncpg://report_user:password@localhost:5444/baocao"

test_engine = create_async_engine(DATABASE_URL, echo=False, future=True)
TestingSessionLocal = sessionmaker(test_engine, class_=AsyncSession, expire_on_commit=False)

async def override_get_db():
    async with TestingSessionLocal() as session:
        yield session

app.dependency_overrides[get_db] = override_get_db

@pytest_asyncio.fixture
def anyio_backend():
    return 'asyncio'

@pytest_asyncio.fixture
async def client():
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://test") as c:
        yield c

@pytest.mark.asyncio
async def test_crud_period(client: AsyncClient):
    payload = {
        "TYPE": "TEST",
        "ID": "TEST_001",
        "Name": "K·ª≥ b√°o c√°o test",
        "ActiveAt": "2025-05-01T08:00:00",
        "DeactiveAt": "2025-05-10T17:00:00",
        "StartAt": "2025-05-01T09:00:00",
        "EndAt": "2025-05-10T15:00:00",
        "FromAt": "2025-05-01T00:00:00",
        "ToAt": "2025-05-10T00:00:00",

        "XaActiveAt": "2025-05-02T08:00:00",
        "XaDeactiveAt": "2025-05-11T17:00:00",
        "XaStartAt": "2025-05-02T09:00:00",
        "XaEndAt": "2025-05-11T15:00:00",
        "XaFromAt": "2025-05-02T00:00:00",
        "XaToAt": "2025-05-11T00:00:00",

        "Status": "Active",
        "XaStatus": "Deactive",
        "Killer": "Auto",
        "FolderPath": "/static/reports/TEST_001"
    }

    # T·∫°o m·ªõi
    resp = await client.post("/period/", json=payload)
    assert resp.status_code == 200

    # L·∫•y l·∫°i
    resp = await client.get(f"/period/{payload['ID']}")
    assert resp.status_code == 200
    assert resp.json()["Name"] == payload["Name"]

    # C·∫≠p nh·∫≠t t√™n
    resp = await client.put(f"/period/{payload['ID']}", json={"Name": "T√™n m·ªõi"})
    assert resp.status_code == 200
    assert resp.json()["Name"] == "T√™n m·ªõi"

    # Xo√°
    resp = await client.delete(f"/period/{payload['ID']}")
    assert resp.status_code == 200
    assert resp.json()["ok"] == True


===== FILE: backend/test\test_report_api.py =====
# backend/test/test_report_api.py
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import pytest
from httpx import AsyncClient, ASGITransport
from backend.app.main import app
import aiofiles

@pytest.mark.asyncio
async def test_upload_report_full_check():
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://testserver") as ac:
        headers = {"Authorization": "Bearer fake-admin-token"}

        # Chu·∫©n b·ªã file dummy
        dummy_file_content = b"dummy content for testing upload"
        dummy_filename = "dummy_test_file.txt"
        dummy_file_path = os.path.join("backend", "static", "reports", "BCNGAY_20250427", dummy_filename)
        
        # T·∫°o th∆∞ m·ª•c n·∫øu c·∫ßn
        os.makedirs(os.path.dirname(dummy_file_path), exist_ok=True)

        # G·ª≠i y√™u c·∫ßu upload
        files = {"file": (dummy_filename, dummy_file_content)}
        data = {
            "report_type_id": "BCNGAY",
            "period_id": "BCNGAY_20250427",
            "comment": "Test full report upload",
            "has_event": "true",
        }
        response = await ac.post("/report/upload", files=files, data=data, headers=headers)

        assert response.status_code in (200, 201)
        json_data = response.json()

        # Ki·ªÉm tra c√°c field trong response
        assert "FileName" in json_data
        assert json_data["Comment"] == "Test full report upload"
        assert json_data["HasEvent"] is True
        assert isinstance(json_data["LateSeconds"], int)

        # Ki·ªÉm tra file ƒë√£ l∆∞u tr√™n server
        assert os.path.exists(dummy_file_path)

@pytest.mark.asyncio
async def test_get_my_reports_after_upload():
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://testserver") as ac:
        headers = {"Authorization": "Bearer fake-admin-token"}
        response = await ac.get("/report/user/reports", headers=headers)
        assert response.status_code == 200
        reports = response.json()
        assert isinstance(reports, list)
        assert len(reports) > 0


===== FILE: backend/test\test_report_type_api.py =====
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import pytest
from httpx import AsyncClient, ASGITransport
from backend.app.main import app

@pytest.mark.asyncio
async def test_crud_report_type():
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://testserver") as ac:
        headers = {"Authorization": "Bearer fake-admin-token"}

        # Xo√° tr∆∞·ªõc n·∫øu ID ƒë√£ t·ªìn t·∫°i
        await ac.delete("/admin/loaibaocao/BCTEST", headers=headers)

        # T·∫°o m·ªõi
        payload = {
            "ID": "BCTEST",
            "DateCreated": "2025-04-27T00:00:00",
            "Name": "B√°o c√°o test",
            "Period_ID": "DAILY",  # Ki·ªÉm tra c√°c gi√° tr·ªã h·ª£p l·ªá c·ªßa Period_ID
            "ActiveAt": "00:00:00",  # Gi·ªù cho ph√©p g·ª≠i b√°o c√°o
            "DeactiveAt": "23:59:59",  # Gi·ªù hu·ª∑ k√≠ch ho·∫°t
            "StartAt": "08:00:00",  # Gi·ªù b·∫Øt ƒë·∫ßu
            "EndAt": "20:00:00",  # Gi·ªù k·∫øt th√∫c
            "From": "00:00:00",  # Gi·ªù l·∫•y s·ªë li·ªáu t·ª´
            "To": "23:59:59",  # Gi·ªù l·∫•y s·ªë li·ªáu ƒë·∫øn
            "ActiveOffset": 0,  # Offset k√≠ch ho·∫°t (s·ªë ng√†y l·ªách)
            "DeactiveOffset": 0,  # Offset hu·ª∑ k√≠ch ho·∫°t (s·ªë ng√†y l·ªách)
            "StartOffset": 0,  # Offset b·∫Øt ƒë·∫ßu (s·ªë ng√†y l·ªách)
            "EndOffset": 0,  # Offset k·∫øt th√∫c (s·ªë ng√†y l·ªách)
            "FromOffset": 0,  # Offset l·∫•y s·ªë li·ªáu t·ª´ (s·ªë ng√†y l·ªách)
            "ToOffset": 0,  # Offset l·∫•y s·ªë li·ªáu ƒë·∫øn (s·ªë ng√†y l·ªách)
            "XaActiveOffset": 0,  # Offset k√≠ch ho·∫°t cho CAPXA
            "XaDeactiveOffset": 0,  # Offset hu·ª∑ k√≠ch ho·∫°t cho CAPXA
            "XaStartOffset": 0,  # Offset b·∫Øt ƒë·∫ßu cho CAPXA
            "XaEndOffset": 0,  # Offset k·∫øt th√∫c cho CAPXA
            "XaFromOffset": 0,  # Offset l·∫•y s·ªë li·ªáu t·ª´ cho CAPXA
            "XaToOffset": 0,  # Offset l·∫•y s·ªë li·ªáu ƒë·∫øn cho CAPXA
            "DocExtList": ".doc .docx .pdf .xls",  # ƒêu√¥i file h·ª£p l·ªá
            "MaxSize": "100MB",  # K√≠ch th∆∞·ªõc file t·ªëi ƒëa
            "NextAt": None,  # Th·ªùi gian ti·∫øp theo
        }
        resp = await ac.post("/admin/loaibaocao/", json=payload, headers=headers)
        assert resp.status_code in (200, 201)

        # L·∫•y danh s√°ch
        resp = await ac.get("/admin/loaibaocao/", headers=headers)
        assert resp.status_code == 200
        data = resp.json()
        assert any(item["ID"] == "BCTEST" for item in data)

        # C·∫≠p nh·∫≠t
        update_payload = {
            "Name": "B√°o c√°o test update",
            "Period_ID": "WEEKLY",  # Ki·ªÉm tra c√°c gi√° tr·ªã h·ª£p l·ªá c·ªßa Period_ID
            "ActiveAt": "01:00:00",  # Gi·ªù cho ph√©p g·ª≠i b√°o c√°o
            "DeactiveAt": "23:59:59",  # Gi·ªù hu·ª∑ k√≠ch ho·∫°t
            "StartAt": "08:00:00",  # Gi·ªù b·∫Øt ƒë·∫ßu
            "EndAt": "20:00:00",  # Gi·ªù k·∫øt th√∫c
            "From": "00:00:00",  # Gi·ªù l·∫•y s·ªë li·ªáu t·ª´
            "To": "23:59:59",  # Gi·ªù l·∫•y s·ªë li·ªáu ƒë·∫øn
            "ActiveOffset": 1,  # Offset k√≠ch ho·∫°t (s·ªë ng√†y l·ªách)
            "DeactiveOffset": 1,  # Offset hu·ª∑ k√≠ch ho·∫°t (s·ªë ng√†y l·ªách)
            "StartOffset": 1,  # Offset b·∫Øt ƒë·∫ßu (s·ªë ng√†y l·ªách)
            "EndOffset": 1,  # Offset k·∫øt th√∫c (s·ªë ng√†y l·ªách)
            "FromOffset": 1,  # Offset l·∫•y s·ªë li·ªáu t·ª´ (s·ªë ng√†y l·ªách)
            "ToOffset": 1,  # Offset l·∫•y s·ªë li·ªáu ƒë·∫øn (s·ªë ng√†y l·ªách)
            "XaActiveOffset": 1,  # Offset k√≠ch ho·∫°t cho CAPXA
            "XaDeactiveOffset": 1,  # Offset hu·ª∑ k√≠ch ho·∫°t cho CAPXA
            "XaStartOffset": 1,  # Offset b·∫Øt ƒë·∫ßu cho CAPXA
            "XaEndOffset": 1,  # Offset k·∫øt th√∫c cho CAPXA
            "XaFromOffset": 1,  # Offset l·∫•y s·ªë li·ªáu t·ª´ cho CAPXA
            "XaToOffset": 1,  # Offset l·∫•y s·ªë li·ªáu ƒë·∫øn cho CAPXA
            "DocExtList": ".doc .docx .pdf .xls",  # ƒêu√¥i file h·ª£p l·ªá
            "MaxSize": "100MB",  # K√≠ch th∆∞·ªõc file t·ªëi ƒëa
            "NextAt": "2025-05-01T00:00:00",  # Th·ªùi gian ti·∫øp theo
        }
        resp = await ac.put("/admin/loaibaocao/BCTEST", json=update_payload, headers=headers)
        assert resp.status_code == 200

        # Xo√°
        resp = await ac.delete("/admin/loaibaocao/BCTEST", headers=headers)
        assert resp.status_code == 200


===== FILE: backend/test\test_user_api.py =====
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import pytest
from httpx import AsyncClient, ASGITransport
from sqlalchemy import select
from backend.app.main import app
from backend.app.services.auth import create_access_token
from backend.app.database import SessionLocal
from backend.app.models.user import User
from backend.app.services.auth import get_password_hash
from datetime import datetime

@pytest.mark.asyncio
async def test_crud_user():
    # Chu·∫©n b·ªã database: ƒë·∫£m b·∫£o c√≥ admin test
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.username == "testadmin1"))
        admin_user = result.scalar_one_or_none()

        if not admin_user:
            new_admin = User(
                username="testadmin1",
                hashed_password=get_password_hash("adminpassword"),
                name="Test Admin",
                time_created=datetime.now(),
                level="CAPPHONG",
                is_admin=True,
            )
            session.add(new_admin)
            await session.commit()
            await session.refresh(new_admin)
            admin_user = new_admin

    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://testserver") as ac:
        # T·∫°o token t·ª´ user th·ª±c t·∫ø
        token = create_access_token({"sub": str(admin_user.id)})
        headers = {"Authorization": f"Bearer {token}"}

        # T·∫°o user m·ªõi
        create_payload = {
            "username": "testuser1",
            "password": "testpassword",
            "name": "Test User 1",
            "level": "CAPPHONG",
            "is_admin": False
        }
        resp = await ac.post("/admin/user/", json=create_payload, headers=headers)
        assert resp.status_code == 200, f"Create user failed: {resp.text}"
        user_data = resp.json()
        user_id = user_data["id"]

        # L·∫•y danh s√°ch users
        resp = await ac.get("/admin/user/", headers=headers)
        assert resp.status_code == 200
        users = resp.json()
        assert any(u["username"] == "testuser1" for u in users)

        # C·∫≠p nh·∫≠t user
        update_payload = {
            "name": "Test User 1 Updated",
            "level": "CAPXA",
            "is_admin": True
        }
        resp = await ac.put(f"/admin/user/{user_id}", json=update_payload, headers=headers)
        assert resp.status_code == 200

        # Xo√° user
        resp = await ac.delete(f"/admin/user/{user_id}", headers=headers)
        assert resp.status_code == 200

        # Ki·ªÉm tra user ƒë√£ b·ªã xo√°
        resp = await ac.get("/admin/user/", headers=headers)
        users = resp.json()
        assert not any(u["id"] == user_id for u in users)


===== FILE: frontend/.env =====
VITE_API_BASE_URL=https://100.90.252.36:8000


===== FILE: frontend/Dockerfile =====
# --- Stage 1: build React app ---
FROM node:20-alpine as builder

WORKDIR /app

ARG VITE_API_BASE_URL
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL

COPY . .

RUN npm ci && npm run build

# --- Stage 2: Nginx serving ---
FROM nginx:stable-alpine

COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 443

CMD ["nginx", "-g", "daemon off;"]

===== FILE: frontend/env-config.js =====

window.__ENV__ = {
  VITE_API_BASE_URL: "http://localhost:8000"
};


===== FILE: frontend/index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>H·ªá th·ªëng g·ª≠i b√°o c√°o C√¥ng an t·ªânh Qu·∫£ng B√¨nh</title>
  </head>
  <body>
    <div id="root"></div>
    <script src="/env-config.js"></script>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


===== FILE: frontend/nginx.conf =====
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}


===== FILE: frontend/package-lock.json =====
{
    "name": "bao-cao-frontend",
    "version": "1.0.0",
    "lockfileVersion": 3,
    "requires": true,
    "packages": {
        "": {
            "name": "bao-cao-frontend",
            "version": "1.0.0",
            "dependencies": {
                "axios": "^1.6.0",
                "file-saver": "^2.0.5",
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-router-dom": "^6.21.2",
                "xlsx": "^0.18.5"
            },
            "devDependencies": {
                "@vitejs/plugin-react": "^4.4.1",
                "autoprefixer": "^10.4.0",
                "postcss": "^8.4.0",
                "tailwindcss": "^3.4.1",
                "vite": "^5.2.0"
            }
        },
        "node_modules/@alloc/quick-lru": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
            "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/@ampproject/remapping": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
            "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@jridgewell/gen-mapping": "^0.3.5",
                "@jridgewell/trace-mapping": "^0.3.24"
            },
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@babel/code-frame": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
            "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-validator-identifier": "^7.27.1",
                "js-tokens": "^4.0.0",
                "picocolors": "^1.1.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/compat-data": {
            "version": "7.27.2",
            "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.2.tgz",
            "integrity": "sha512-TUtMJYRPyUb/9aU8f3K0mjmjf6M9N5Woshn2CS6nqJSeJtTtQcpLUXjGt9vbF8ZGff0El99sWkLgzwW3VXnxZQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/core": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.1.tgz",
            "integrity": "sha512-IaaGWsQqfsQWVLqMn9OB92MNN7zukfVA4s7KKAI0KfrrDsZ0yhi5uV4baBuLuN7n3vsZpwP8asPPcVwApxvjBQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@ampproject/remapping": "^2.2.0",
                "@babel/code-frame": "^7.27.1",
                "@babel/generator": "^7.27.1",
                "@babel/helper-compilation-targets": "^7.27.1",
                "@babel/helper-module-transforms": "^7.27.1",
                "@babel/helpers": "^7.27.1",
                "@babel/parser": "^7.27.1",
                "@babel/template": "^7.27.1",
                "@babel/traverse": "^7.27.1",
                "@babel/types": "^7.27.1",
                "convert-source-map": "^2.0.0",
                "debug": "^4.1.0",
                "gensync": "^1.0.0-beta.2",
                "json5": "^2.2.3",
                "semver": "^6.3.1"
            },
            "engines": {
                "node": ">=6.9.0"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/babel"
            }
        },
        "node_modules/@babel/generator": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.1.tgz",
            "integrity": "sha512-UnJfnIpc/+JO0/+KRVQNGU+y5taA5vCbwN8+azkX6beii/ZF+enZJSOKo11ZSzGJjlNfJHfQtmQT8H+9TXPG2w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/parser": "^7.27.1",
                "@babel/types": "^7.27.1",
                "@jridgewell/gen-mapping": "^0.3.5",
                "@jridgewell/trace-mapping": "^0.3.25",
                "jsesc": "^3.0.2"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-compilation-targets": {
            "version": "7.27.2",
            "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
            "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/compat-data": "^7.27.2",
                "@babel/helper-validator-option": "^7.27.1",
                "browserslist": "^4.24.0",
                "lru-cache": "^5.1.1",
                "semver": "^6.3.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
            "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "yallist": "^3.0.2"
            }
        },
        "node_modules/@babel/helper-module-imports": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
            "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/traverse": "^7.27.1",
                "@babel/types": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-module-transforms": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.1.tgz",
            "integrity": "sha512-9yHn519/8KvTU5BjTVEEeIM3w9/2yXNKoD82JifINImhpKkARMJKPP59kLo+BafpdN5zgNeIcS4jsGDmd3l58g==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-module-imports": "^7.27.1",
                "@babel/helper-validator-identifier": "^7.27.1",
                "@babel/traverse": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            },
            "peerDependencies": {
                "@babel/core": "^7.0.0"
            }
        },
        "node_modules/@babel/helper-plugin-utils": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
            "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-string-parser": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
            "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-validator-identifier": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
            "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-validator-option": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
            "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helpers": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.1.tgz",
            "integrity": "sha512-FCvFTm0sWV8Fxhpp2McP5/W53GPllQ9QeQ7SiqGWjMf/LVG07lFa5+pgK05IRhVwtvafT22KF+ZSnM9I545CvQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/template": "^7.27.1",
                "@babel/types": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/parser": {
            "version": "7.27.2",
            "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.2.tgz",
            "integrity": "sha512-QYLs8299NA7WM/bZAdp+CviYYkVoYXlDW2rzliy3chxd1PQjej7JORuMJDJXJUb9g0TT+B99EwaVLKmX+sPXWw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/types": "^7.27.1"
            },
            "bin": {
                "parser": "bin/babel-parser.js"
            },
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@babel/plugin-transform-react-jsx-self": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
            "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-plugin-utils": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            },
            "peerDependencies": {
                "@babel/core": "^7.0.0-0"
            }
        },
        "node_modules/@babel/plugin-transform-react-jsx-source": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
            "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-plugin-utils": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            },
            "peerDependencies": {
                "@babel/core": "^7.0.0-0"
            }
        },
        "node_modules/@babel/template": {
            "version": "7.27.2",
            "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
            "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/code-frame": "^7.27.1",
                "@babel/parser": "^7.27.2",
                "@babel/types": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/traverse": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.1.tgz",
            "integrity": "sha512-ZCYtZciz1IWJB4U61UPu4KEaqyfj+r5T1Q5mqPo+IBpcG9kHv30Z0aD8LXPgC1trYa6rK0orRyAhqUgk4MjmEg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/code-frame": "^7.27.1",
                "@babel/generator": "^7.27.1",
                "@babel/parser": "^7.27.1",
                "@babel/template": "^7.27.1",
                "@babel/types": "^7.27.1",
                "debug": "^4.3.1",
                "globals": "^11.1.0"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/types": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.1.tgz",
            "integrity": "sha512-+EzkxvLNfiUeKMgy/3luqfsCWFRXLb7U6wNQTk60tovuckwB15B191tJWvpp4HjiQWdJkCxO3Wbvc6jlk3Xb2Q==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-string-parser": "^7.27.1",
                "@babel/helper-validator-identifier": "^7.27.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@esbuild/aix-ppc64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
            "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
            "cpu": [
                "ppc64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "aix"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/android-arm": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
            "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
            "cpu": [
                "arm"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "android"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/android-arm64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
            "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "android"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/android-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
            "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "android"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/darwin-arm64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
            "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/darwin-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
            "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/freebsd-arm64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
            "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "freebsd"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/freebsd-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
            "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "freebsd"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-arm": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
            "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
            "cpu": [
                "arm"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-arm64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
            "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-ia32": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
            "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
            "cpu": [
                "ia32"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-loong64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
            "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
            "cpu": [
                "loong64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-mips64el": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
            "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
            "cpu": [
                "mips64el"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-ppc64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
            "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
            "cpu": [
                "ppc64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-riscv64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
            "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
            "cpu": [
                "riscv64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-s390x": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
            "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
            "cpu": [
                "s390x"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/linux-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
            "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/netbsd-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
            "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "netbsd"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/openbsd-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
            "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "openbsd"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/sunos-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
            "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "sunos"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/win32-arm64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
            "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/win32-ia32": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
            "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
            "cpu": [
                "ia32"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@esbuild/win32-x64": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
            "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@isaacs/cliui": {
            "version": "8.0.2",
            "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
            "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "string-width": "^5.1.2",
                "string-width-cjs": "npm:string-width@^4.2.0",
                "strip-ansi": "^7.0.1",
                "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
                "wrap-ansi": "^8.1.0",
                "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@jridgewell/gen-mapping": {
            "version": "0.3.8",
            "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
            "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/set-array": "^1.2.1",
                "@jridgewell/sourcemap-codec": "^1.4.10",
                "@jridgewell/trace-mapping": "^0.3.24"
            },
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/resolve-uri": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
            "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/set-array": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
            "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/sourcemap-codec": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
            "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/@jridgewell/trace-mapping": {
            "version": "0.3.25",
            "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
            "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/resolve-uri": "^3.1.0",
                "@jridgewell/sourcemap-codec": "^1.4.14"
            }
        },
        "node_modules/@nodelib/fs.scandir": {
            "version": "2.1.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
            "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.stat": "2.0.5",
                "run-parallel": "^1.1.9"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.stat": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
            "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.walk": {
            "version": "1.2.8",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
            "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.scandir": "2.1.5",
                "fastq": "^1.6.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@pkgjs/parseargs": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
            "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "engines": {
                "node": ">=14"
            }
        },
        "node_modules/@remix-run/router": {
            "version": "1.23.0",
            "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
            "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
            "license": "MIT",
            "engines": {
                "node": ">=14.0.0"
            }
        },
        "node_modules/@rollup/rollup-android-arm-eabi": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.2.tgz",
            "integrity": "sha512-JkdNEq+DFxZfUwxvB58tHMHBHVgX23ew41g1OQinthJ+ryhdRk67O31S7sYw8u2lTjHUPFxwar07BBt1KHp/hg==",
            "cpu": [
                "arm"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "android"
            ]
        },
        "node_modules/@rollup/rollup-android-arm64": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.2.tgz",
            "integrity": "sha512-13unNoZ8NzUmnndhPTkWPWbX3vtHodYmy+I9kuLxN+F+l+x3LdVF7UCu8TWVMt1POHLh6oDHhnOA04n8oJZhBw==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "android"
            ]
        },
        "node_modules/@rollup/rollup-darwin-arm64": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.2.tgz",
            "integrity": "sha512-Gzf1Hn2Aoe8VZzevHostPX23U7N5+4D36WJNHK88NZHCJr7aVMG4fadqkIf72eqVPGjGc0HJHNuUaUcxiR+N/w==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ]
        },
        "node_modules/@rollup/rollup-darwin-x64": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.2.tgz",
            "integrity": "sha512-47N4hxa01a4x6XnJoskMKTS8XZ0CZMd8YTbINbi+w03A2w4j1RTlnGHOz/P0+Bg1LaVL6ufZyNprSg+fW5nYQQ==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ]
        },
        "node_modules/@rollup/rollup-freebsd-arm64": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.2.tgz",
            "integrity": "sha512-8t6aL4MD+rXSHHZUR1z19+9OFJ2rl1wGKvckN47XFRVO+QL/dUSpKA2SLRo4vMg7ELA8pzGpC+W9OEd1Z/ZqoQ==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "freebsd"
            ]
        },
        "node_modules/@rollup/rollup-freebsd-x64": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.2.tgz",
            "integrity": "sha512-C+AyHBzfpsOEYRFjztcYUFsH4S7UsE9cDtHCtma5BK8+ydOZYgMmWg1d/4KBytQspJCld8ZIujFMAdKG1xyr4Q==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "freebsd"
            ]
        },
        "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.2.tgz",
            "integrity": "sha512-de6TFZYIvJwRNjmW3+gaXiZ2DaWL5D5yGmSYzkdzjBDS3W+B9JQ48oZEsmMvemqjtAFzE16DIBLqd6IQQRuG9Q==",
            "cpu": [
                "arm"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-arm-musleabihf": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.2.tgz",
            "integrity": "sha512-urjaEZubdIkacKc930hUDOfQPysezKla/O9qV+O89enqsqUmQm8Xj8O/vh0gHg4LYfv7Y7UsE3QjzLQzDYN1qg==",
            "cpu": [
                "arm"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-arm64-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.2.tgz",
            "integrity": "sha512-KlE8IC0HFOC33taNt1zR8qNlBYHj31qGT1UqWqtvR/+NuCVhfufAq9fxO8BMFC22Wu0rxOwGVWxtCMvZVLmhQg==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-arm64-musl": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.2.tgz",
            "integrity": "sha512-j8CgxvfM0kbnhu4XgjnCWJQyyBOeBI1Zq91Z850aUddUmPeQvuAy6OiMdPS46gNFgy8gN1xkYyLgwLYZG3rBOg==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.2.tgz",
            "integrity": "sha512-Ybc/1qUampKuRF4tQXc7G7QY9YRyeVSykfK36Y5Qc5dmrIxwFhrOzqaVTNoZygqZ1ZieSWTibfFhQ5qK8jpWxw==",
            "cpu": [
                "loong64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.2.tgz",
            "integrity": "sha512-3FCIrnrt03CCsZqSYAOW/k9n625pjpuMzVfeI+ZBUSDT3MVIFDSPfSUgIl9FqUftxcUXInvFah79hE1c9abD+Q==",
            "cpu": [
                "ppc64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-riscv64-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.2.tgz",
            "integrity": "sha512-QNU7BFHEvHMp2ESSY3SozIkBPaPBDTsfVNGx3Xhv+TdvWXFGOSH2NJvhD1zKAT6AyuuErJgbdvaJhYVhVqrWTg==",
            "cpu": [
                "riscv64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-riscv64-musl": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.2.tgz",
            "integrity": "sha512-5W6vNYkhgfh7URiXTO1E9a0cy4fSgfE4+Hl5agb/U1sa0kjOLMLC1wObxwKxecE17j0URxuTrYZZME4/VH57Hg==",
            "cpu": [
                "riscv64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-s390x-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.2.tgz",
            "integrity": "sha512-B7LKIz+0+p348JoAL4X/YxGx9zOx3sR+o6Hj15Y3aaApNfAshK8+mWZEf759DXfRLeL2vg5LYJBB7DdcleYCoQ==",
            "cpu": [
                "s390x"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-x64-gnu": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.2.tgz",
            "integrity": "sha512-lG7Xa+BmBNwpjmVUbmyKxdQJ3Q6whHjMjzQplOs5Z+Gj7mxPtWakGHqzMqNER68G67kmCX9qX57aRsW5V0VOng==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-linux-x64-musl": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.2.tgz",
            "integrity": "sha512-tD46wKHd+KJvsmije4bUskNuvWKFcTOIM9tZ/RrmIvcXnbi0YK/cKS9FzFtAm7Oxi2EhV5N2OpfFB348vSQRXA==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ]
        },
        "node_modules/@rollup/rollup-win32-arm64-msvc": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.2.tgz",
            "integrity": "sha512-Bjv/HG8RRWLNkXwQQemdsWw4Mg+IJ29LK+bJPW2SCzPKOUaMmPEppQlu/Fqk1d7+DX3V7JbFdbkh/NMmurT6Pg==",
            "cpu": [
                "arm64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ]
        },
        "node_modules/@rollup/rollup-win32-ia32-msvc": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.2.tgz",
            "integrity": "sha512-dt1llVSGEsGKvzeIO76HToiYPNPYPkmjhMHhP00T9S4rDern8P2ZWvWAQUEJ+R1UdMWJ/42i/QqJ2WV765GZcA==",
            "cpu": [
                "ia32"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ]
        },
        "node_modules/@rollup/rollup-win32-x64-msvc": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.2.tgz",
            "integrity": "sha512-bwspbWB04XJpeElvsp+DCylKfF4trJDa2Y9Go8O6A7YLX2LIKGcNK/CYImJN6ZP4DcuOHB4Utl3iCbnR62DudA==",
            "cpu": [
                "x64"
            ],
            "dev": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ]
        },
        "node_modules/@types/babel__core": {
            "version": "7.20.5",
            "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
            "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/parser": "^7.20.7",
                "@babel/types": "^7.20.7",
                "@types/babel__generator": "*",
                "@types/babel__template": "*",
                "@types/babel__traverse": "*"
            }
        },
        "node_modules/@types/babel__generator": {
            "version": "7.27.0",
            "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
            "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/types": "^7.0.0"
            }
        },
        "node_modules/@types/babel__template": {
            "version": "7.4.4",
            "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
            "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/parser": "^7.1.0",
                "@babel/types": "^7.0.0"
            }
        },
        "node_modules/@types/babel__traverse": {
            "version": "7.20.7",
            "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
            "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/types": "^7.20.7"
            }
        },
        "node_modules/@types/estree": {
            "version": "1.0.7",
            "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
            "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/@vitejs/plugin-react": {
            "version": "4.4.1",
            "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.4.1.tgz",
            "integrity": "sha512-IpEm5ZmeXAP/osiBXVVP5KjFMzbWOonMs0NaQQl+xYnUAcq4oHUBsF2+p4MgKWG4YMmFYJU8A6sxRPuowllm6w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/core": "^7.26.10",
                "@babel/plugin-transform-react-jsx-self": "^7.25.9",
                "@babel/plugin-transform-react-jsx-source": "^7.25.9",
                "@types/babel__core": "^7.20.5",
                "react-refresh": "^0.17.0"
            },
            "engines": {
                "node": "^14.18.0 || >=16.0.0"
            },
            "peerDependencies": {
                "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
            }
        },
        "node_modules/adler-32": {
            "version": "1.3.1",
            "resolved": "https://registry.npmjs.org/adler-32/-/adler-32-1.3.1.tgz",
            "integrity": "sha512-ynZ4w/nUUv5rrsR8UUGoe1VC9hZj6V5hU9Qw1HlMDJGEJw5S7TfTErWTjMys6M7vr0YWcPqs3qAr4ss0nDfP+A==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/ansi-regex": {
            "version": "6.1.0",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
            "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-regex?sponsor=1"
            }
        },
        "node_modules/ansi-styles": {
            "version": "6.2.1",
            "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
            "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-styles?sponsor=1"
            }
        },
        "node_modules/any-promise": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
            "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/anymatch": {
            "version": "3.1.3",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
            "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/arg": {
            "version": "5.0.2",
            "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
            "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/asynckit": {
            "version": "0.4.0",
            "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
            "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
            "license": "MIT"
        },
        "node_modules/autoprefixer": {
            "version": "10.4.21",
            "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
            "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/postcss/"
                },
                {
                    "type": "tidelift",
                    "url": "https://tidelift.com/funding/github/npm/autoprefixer"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "browserslist": "^4.24.4",
                "caniuse-lite": "^1.0.30001702",
                "fraction.js": "^4.3.7",
                "normalize-range": "^0.1.2",
                "picocolors": "^1.1.1",
                "postcss-value-parser": "^4.2.0"
            },
            "bin": {
                "autoprefixer": "bin/autoprefixer"
            },
            "engines": {
                "node": "^10 || ^12 || >=14"
            },
            "peerDependencies": {
                "postcss": "^8.1.0"
            }
        },
        "node_modules/axios": {
            "version": "1.9.0",
            "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
            "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
            "license": "MIT",
            "dependencies": {
                "follow-redirects": "^1.15.6",
                "form-data": "^4.0.0",
                "proxy-from-env": "^1.1.0"
            }
        },
        "node_modules/balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/binary-extensions": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
            "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/brace-expansion": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
            "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "balanced-match": "^1.0.0"
            }
        },
        "node_modules/braces": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
            "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "fill-range": "^7.1.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/browserslist": {
            "version": "4.24.5",
            "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.5.tgz",
            "integrity": "sha512-FDToo4Wo82hIdgc1CQ+NQD0hEhmpPjrZ3hiUgwgOG6IuTdlpr8jdjyG24P6cNP1yJpTLzS5OcGgSw0xmDU1/Tw==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/browserslist"
                },
                {
                    "type": "tidelift",
                    "url": "https://tidelift.com/funding/github/npm/browserslist"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "caniuse-lite": "^1.0.30001716",
                "electron-to-chromium": "^1.5.149",
                "node-releases": "^2.0.19",
                "update-browserslist-db": "^1.1.3"
            },
            "bin": {
                "browserslist": "cli.js"
            },
            "engines": {
                "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
            }
        },
        "node_modules/call-bind-apply-helpers": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
            "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0",
                "function-bind": "^1.1.2"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/camelcase-css": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
            "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/caniuse-lite": {
            "version": "1.0.30001717",
            "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001717.tgz",
            "integrity": "sha512-auPpttCq6BDEG8ZAuHJIplGw6GODhjw+/11e7IjpnYCxZcW/ONgPs0KVBJ0d1bY3e2+7PRe5RCLyP+PfwVgkYw==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/browserslist"
                },
                {
                    "type": "tidelift",
                    "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "CC-BY-4.0"
        },
        "node_modules/cfb": {
            "version": "1.2.2",
            "resolved": "https://registry.npmjs.org/cfb/-/cfb-1.2.2.tgz",
            "integrity": "sha512-KfdUZsSOw19/ObEWasvBP/Ac4reZvAGauZhs6S/gqNhXhI7cKwvlH7ulj+dOEYnca4bm4SGo8C1bTAQvnTjgQA==",
            "license": "Apache-2.0",
            "dependencies": {
                "adler-32": "~1.3.0",
                "crc-32": "~1.2.0"
            },
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/chokidar": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
            "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            },
            "engines": {
                "node": ">= 8.10.0"
            },
            "funding": {
                "url": "https://paulmillr.com/funding/"
            },
            "optionalDependencies": {
                "fsevents": "~2.3.2"
            }
        },
        "node_modules/chokidar/node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/codepage": {
            "version": "1.15.0",
            "resolved": "https://registry.npmjs.org/codepage/-/codepage-1.15.0.tgz",
            "integrity": "sha512-3g6NUTPd/YtuuGrhMnOMRjFc+LJw/bnMp3+0r/Wcz3IXUuCosKRJvMphm5+Q+bvTVGcJJuRvVLuYba+WojaFaA==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/color-convert": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
            "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "color-name": "~1.1.4"
            },
            "engines": {
                "node": ">=7.0.0"
            }
        },
        "node_modules/color-name": {
            "version": "1.1.4",
            "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/combined-stream": {
            "version": "1.0.8",
            "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
            "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
            "license": "MIT",
            "dependencies": {
                "delayed-stream": "~1.0.0"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/commander": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
            "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/convert-source-map": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
            "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/crc-32": {
            "version": "1.2.2",
            "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
            "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
            "license": "Apache-2.0",
            "bin": {
                "crc32": "bin/crc32.njs"
            },
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/cross-spawn": {
            "version": "7.0.6",
            "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
            "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "path-key": "^3.1.0",
                "shebang-command": "^2.0.0",
                "which": "^2.0.1"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/cssesc": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
            "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
            "dev": true,
            "license": "MIT",
            "bin": {
                "cssesc": "bin/cssesc"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/debug": {
            "version": "4.4.0",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
            "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/delayed-stream": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
            "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
            "license": "MIT",
            "engines": {
                "node": ">=0.4.0"
            }
        },
        "node_modules/didyoumean": {
            "version": "1.2.2",
            "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
            "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
            "dev": true,
            "license": "Apache-2.0"
        },
        "node_modules/dlv": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
            "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/dunder-proto": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
            "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
            "license": "MIT",
            "dependencies": {
                "call-bind-apply-helpers": "^1.0.1",
                "es-errors": "^1.3.0",
                "gopd": "^1.2.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/eastasianwidth": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
            "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/electron-to-chromium": {
            "version": "1.5.151",
            "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.151.tgz",
            "integrity": "sha512-Rl6uugut2l9sLojjS4H4SAr3A4IgACMLgpuEMPYCVcKydzfyPrn5absNRju38IhQOf/NwjJY8OGWjlteqYeBCA==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/emoji-regex": {
            "version": "9.2.2",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
            "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/es-define-property": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
            "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/es-errors": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
            "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/es-object-atoms": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
            "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/es-set-tostringtag": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
            "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0",
                "get-intrinsic": "^1.2.6",
                "has-tostringtag": "^1.0.2",
                "hasown": "^2.0.2"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/esbuild": {
            "version": "0.21.5",
            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
            "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
            "dev": true,
            "hasInstallScript": true,
            "license": "MIT",
            "bin": {
                "esbuild": "bin/esbuild"
            },
            "engines": {
                "node": ">=12"
            },
            "optionalDependencies": {
                "@esbuild/aix-ppc64": "0.21.5",
                "@esbuild/android-arm": "0.21.5",
                "@esbuild/android-arm64": "0.21.5",
                "@esbuild/android-x64": "0.21.5",
                "@esbuild/darwin-arm64": "0.21.5",
                "@esbuild/darwin-x64": "0.21.5",
                "@esbuild/freebsd-arm64": "0.21.5",
                "@esbuild/freebsd-x64": "0.21.5",
                "@esbuild/linux-arm": "0.21.5",
                "@esbuild/linux-arm64": "0.21.5",
                "@esbuild/linux-ia32": "0.21.5",
                "@esbuild/linux-loong64": "0.21.5",
                "@esbuild/linux-mips64el": "0.21.5",
                "@esbuild/linux-ppc64": "0.21.5",
                "@esbuild/linux-riscv64": "0.21.5",
                "@esbuild/linux-s390x": "0.21.5",
                "@esbuild/linux-x64": "0.21.5",
                "@esbuild/netbsd-x64": "0.21.5",
                "@esbuild/openbsd-x64": "0.21.5",
                "@esbuild/sunos-x64": "0.21.5",
                "@esbuild/win32-arm64": "0.21.5",
                "@esbuild/win32-ia32": "0.21.5",
                "@esbuild/win32-x64": "0.21.5"
            }
        },
        "node_modules/escalade": {
            "version": "3.2.0",
            "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
            "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/fast-glob": {
            "version": "3.3.3",
            "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
            "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.stat": "^2.0.2",
                "@nodelib/fs.walk": "^1.2.3",
                "glob-parent": "^5.1.2",
                "merge2": "^1.3.0",
                "micromatch": "^4.0.8"
            },
            "engines": {
                "node": ">=8.6.0"
            }
        },
        "node_modules/fast-glob/node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/fastq": {
            "version": "1.19.1",
            "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
            "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "reusify": "^1.0.4"
            }
        },
        "node_modules/file-saver": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/file-saver/-/file-saver-2.0.5.tgz",
            "integrity": "sha512-P9bmyZ3h/PRG+Nzga+rbdI4OEpNDzAVyy74uVO9ATgzLK6VtAsYybF/+TOCvrc0MO793d6+42lLyZTw7/ArVzA==",
            "license": "MIT"
        },
        "node_modules/fill-range": {
            "version": "7.1.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
            "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "to-regex-range": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/follow-redirects": {
            "version": "1.15.9",
            "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
            "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
            "funding": [
                {
                    "type": "individual",
                    "url": "https://github.com/sponsors/RubenVerborgh"
                }
            ],
            "license": "MIT",
            "engines": {
                "node": ">=4.0"
            },
            "peerDependenciesMeta": {
                "debug": {
                    "optional": true
                }
            }
        },
        "node_modules/foreground-child": {
            "version": "3.3.1",
            "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
            "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "cross-spawn": "^7.0.6",
                "signal-exit": "^4.0.1"
            },
            "engines": {
                "node": ">=14"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/form-data": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
            "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
            "license": "MIT",
            "dependencies": {
                "asynckit": "^0.4.0",
                "combined-stream": "^1.0.8",
                "es-set-tostringtag": "^2.1.0",
                "mime-types": "^2.1.12"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/frac": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/frac/-/frac-1.1.2.tgz",
            "integrity": "sha512-w/XBfkibaTl3YDqASwfDUqkna4Z2p9cFSr1aHDt0WoMTECnRfBOv2WArlZILlqgWlmdIlALXGpM2AOhEk5W3IA==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/fraction.js": {
            "version": "4.3.7",
            "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
            "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": "*"
            },
            "funding": {
                "type": "patreon",
                "url": "https://github.com/sponsors/rawify"
            }
        },
        "node_modules/fsevents": {
            "version": "2.3.3",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
            "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
            "dev": true,
            "hasInstallScript": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
            }
        },
        "node_modules/function-bind": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
            "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
            "license": "MIT",
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/gensync": {
            "version": "1.0.0-beta.2",
            "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
            "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/get-intrinsic": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
            "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
            "license": "MIT",
            "dependencies": {
                "call-bind-apply-helpers": "^1.0.2",
                "es-define-property": "^1.0.1",
                "es-errors": "^1.3.0",
                "es-object-atoms": "^1.1.1",
                "function-bind": "^1.1.2",
                "get-proto": "^1.0.1",
                "gopd": "^1.2.0",
                "has-symbols": "^1.1.0",
                "hasown": "^2.0.2",
                "math-intrinsics": "^1.1.0"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/get-proto": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
            "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
            "license": "MIT",
            "dependencies": {
                "dunder-proto": "^1.0.1",
                "es-object-atoms": "^1.0.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/glob": {
            "version": "10.4.5",
            "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
            "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "foreground-child": "^3.1.0",
                "jackspeak": "^3.1.2",
                "minimatch": "^9.0.4",
                "minipass": "^7.1.2",
                "package-json-from-dist": "^1.0.0",
                "path-scurry": "^1.11.1"
            },
            "bin": {
                "glob": "dist/esm/bin.mjs"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/glob-parent": {
            "version": "6.0.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
            "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "is-glob": "^4.0.3"
            },
            "engines": {
                "node": ">=10.13.0"
            }
        },
        "node_modules/globals": {
            "version": "11.12.0",
            "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
            "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/gopd": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
            "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/has-symbols": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
            "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/has-tostringtag": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
            "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
            "license": "MIT",
            "dependencies": {
                "has-symbols": "^1.0.3"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/hasown": {
            "version": "2.0.2",
            "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
            "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
            "license": "MIT",
            "dependencies": {
                "function-bind": "^1.1.2"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "binary-extensions": "^2.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-core-module": {
            "version": "2.16.1",
            "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
            "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "hasown": "^2.0.2"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "is-extglob": "^2.1.1"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.12.0"
            }
        },
        "node_modules/isexe": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
            "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/jackspeak": {
            "version": "3.4.3",
            "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
            "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
            "dev": true,
            "license": "BlueOak-1.0.0",
            "dependencies": {
                "@isaacs/cliui": "^8.0.2"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            },
            "optionalDependencies": {
                "@pkgjs/parseargs": "^0.11.0"
            }
        },
        "node_modules/jiti": {
            "version": "1.21.7",
            "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
            "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
            "dev": true,
            "license": "MIT",
            "bin": {
                "jiti": "bin/jiti.js"
            }
        },
        "node_modules/js-tokens": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
            "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
            "license": "MIT"
        },
        "node_modules/jsesc": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
            "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
            "dev": true,
            "license": "MIT",
            "bin": {
                "jsesc": "bin/jsesc"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/json5": {
            "version": "2.2.3",
            "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
            "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
            "dev": true,
            "license": "MIT",
            "bin": {
                "json5": "lib/cli.js"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/lilconfig": {
            "version": "3.1.3",
            "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
            "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=14"
            },
            "funding": {
                "url": "https://github.com/sponsors/antonk52"
            }
        },
        "node_modules/lines-and-columns": {
            "version": "1.2.4",
            "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
            "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/loose-envify": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
            "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
            "license": "MIT",
            "dependencies": {
                "js-tokens": "^3.0.0 || ^4.0.0"
            },
            "bin": {
                "loose-envify": "cli.js"
            }
        },
        "node_modules/lru-cache": {
            "version": "10.4.3",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
            "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/math-intrinsics": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
            "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/merge2": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
            "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/micromatch": {
            "version": "4.0.8",
            "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
            "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "braces": "^3.0.3",
                "picomatch": "^2.3.1"
            },
            "engines": {
                "node": ">=8.6"
            }
        },
        "node_modules/mime-db": {
            "version": "1.52.0",
            "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
            "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/mime-types": {
            "version": "2.1.35",
            "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
            "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
            "license": "MIT",
            "dependencies": {
                "mime-db": "1.52.0"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/minimatch": {
            "version": "9.0.5",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
            "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "brace-expansion": "^2.0.1"
            },
            "engines": {
                "node": ">=16 || 14 >=14.17"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/minipass": {
            "version": "7.1.2",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
            "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
            "dev": true,
            "license": "ISC",
            "engines": {
                "node": ">=16 || 14 >=14.17"
            }
        },
        "node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/mz": {
            "version": "2.7.0",
            "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
            "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "any-promise": "^1.0.0",
                "object-assign": "^4.0.1",
                "thenify-all": "^1.0.0"
            }
        },
        "node_modules/nanoid": {
            "version": "3.3.11",
            "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
            "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "bin": {
                "nanoid": "bin/nanoid.cjs"
            },
            "engines": {
                "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
            }
        },
        "node_modules/node-releases": {
            "version": "2.0.19",
            "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
            "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/normalize-range": {
            "version": "0.1.2",
            "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
            "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/object-assign": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
            "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/object-hash": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
            "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/package-json-from-dist": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
            "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
            "dev": true,
            "license": "BlueOak-1.0.0"
        },
        "node_modules/path-key": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
            "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/path-parse": {
            "version": "1.0.7",
            "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
            "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/path-scurry": {
            "version": "1.11.1",
            "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
            "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
            "dev": true,
            "license": "BlueOak-1.0.0",
            "dependencies": {
                "lru-cache": "^10.2.0",
                "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
            },
            "engines": {
                "node": ">=16 || 14 >=14.18"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/picocolors": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
            "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/jonschlinkert"
            }
        },
        "node_modules/pify": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
            "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/pirates": {
            "version": "4.0.7",
            "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
            "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/postcss": {
            "version": "8.5.3",
            "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
            "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/postcss/"
                },
                {
                    "type": "tidelift",
                    "url": "https://tidelift.com/funding/github/npm/postcss"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "nanoid": "^3.3.8",
                "picocolors": "^1.1.1",
                "source-map-js": "^1.2.1"
            },
            "engines": {
                "node": "^10 || ^12 || >=14"
            }
        },
        "node_modules/postcss-import": {
            "version": "15.1.0",
            "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
            "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "postcss-value-parser": "^4.0.0",
                "read-cache": "^1.0.0",
                "resolve": "^1.1.7"
            },
            "engines": {
                "node": ">=14.0.0"
            },
            "peerDependencies": {
                "postcss": "^8.0.0"
            }
        },
        "node_modules/postcss-js": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
            "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "camelcase-css": "^2.0.1"
            },
            "engines": {
                "node": "^12 || ^14 || >= 16"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/postcss/"
            },
            "peerDependencies": {
                "postcss": "^8.4.21"
            }
        },
        "node_modules/postcss-load-config": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
            "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/postcss/"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "lilconfig": "^3.0.0",
                "yaml": "^2.3.4"
            },
            "engines": {
                "node": ">= 14"
            },
            "peerDependencies": {
                "postcss": ">=8.0.9",
                "ts-node": ">=9.0.0"
            },
            "peerDependenciesMeta": {
                "postcss": {
                    "optional": true
                },
                "ts-node": {
                    "optional": true
                }
            }
        },
        "node_modules/postcss-nested": {
            "version": "6.2.0",
            "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
            "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/postcss/"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "postcss-selector-parser": "^6.1.1"
            },
            "engines": {
                "node": ">=12.0"
            },
            "peerDependencies": {
                "postcss": "^8.2.14"
            }
        },
        "node_modules/postcss-selector-parser": {
            "version": "6.1.2",
            "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
            "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "cssesc": "^3.0.0",
                "util-deprecate": "^1.0.2"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/postcss-value-parser": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
            "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/proxy-from-env": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
            "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
            "license": "MIT"
        },
        "node_modules/queue-microtask": {
            "version": "1.2.3",
            "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
            "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ],
            "license": "MIT"
        },
        "node_modules/react": {
            "version": "18.3.1",
            "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
            "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
            "license": "MIT",
            "dependencies": {
                "loose-envify": "^1.1.0"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/react-dom": {
            "version": "18.3.1",
            "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
            "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
            "license": "MIT",
            "dependencies": {
                "loose-envify": "^1.1.0",
                "scheduler": "^0.23.2"
            },
            "peerDependencies": {
                "react": "^18.3.1"
            }
        },
        "node_modules/react-refresh": {
            "version": "0.17.0",
            "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
            "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/react-router": {
            "version": "6.30.0",
            "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.0.tgz",
            "integrity": "sha512-D3X8FyH9nBcTSHGdEKurK7r8OYE1kKFn3d/CF+CoxbSHkxU7o37+Uh7eAHRXr6k2tSExXYO++07PeXJtA/dEhQ==",
            "license": "MIT",
            "dependencies": {
                "@remix-run/router": "1.23.0"
            },
            "engines": {
                "node": ">=14.0.0"
            },
            "peerDependencies": {
                "react": ">=16.8"
            }
        },
        "node_modules/react-router-dom": {
            "version": "6.30.0",
            "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.0.tgz",
            "integrity": "sha512-x30B78HV5tFk8ex0ITwzC9TTZMua4jGyA9IUlH1JLQYQTFyxr/ZxwOJq7evg1JX1qGVUcvhsmQSKdPncQrjTgA==",
            "license": "MIT",
            "dependencies": {
                "@remix-run/router": "1.23.0",
                "react-router": "6.30.0"
            },
            "engines": {
                "node": ">=14.0.0"
            },
            "peerDependencies": {
                "react": ">=16.8",
                "react-dom": ">=16.8"
            }
        },
        "node_modules/read-cache": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
            "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "pify": "^2.3.0"
            }
        },
        "node_modules/readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "picomatch": "^2.2.1"
            },
            "engines": {
                "node": ">=8.10.0"
            }
        },
        "node_modules/resolve": {
            "version": "1.22.10",
            "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
            "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "is-core-module": "^2.16.0",
                "path-parse": "^1.0.7",
                "supports-preserve-symlinks-flag": "^1.0.0"
            },
            "bin": {
                "resolve": "bin/resolve"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/reusify": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
            "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "iojs": ">=1.0.0",
                "node": ">=0.10.0"
            }
        },
        "node_modules/rollup": {
            "version": "4.40.2",
            "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.2.tgz",
            "integrity": "sha512-tfUOg6DTP4rhQ3VjOO6B4wyrJnGOX85requAXvqYTHsOgb2TFJdZ3aWpT8W2kPoypSGP7dZUyzxJ9ee4buM5Fg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@types/estree": "1.0.7"
            },
            "bin": {
                "rollup": "dist/bin/rollup"
            },
            "engines": {
                "node": ">=18.0.0",
                "npm": ">=8.0.0"
            },
            "optionalDependencies": {
                "@rollup/rollup-android-arm-eabi": "4.40.2",
                "@rollup/rollup-android-arm64": "4.40.2",
                "@rollup/rollup-darwin-arm64": "4.40.2",
                "@rollup/rollup-darwin-x64": "4.40.2",
                "@rollup/rollup-freebsd-arm64": "4.40.2",
                "@rollup/rollup-freebsd-x64": "4.40.2",
                "@rollup/rollup-linux-arm-gnueabihf": "4.40.2",
                "@rollup/rollup-linux-arm-musleabihf": "4.40.2",
                "@rollup/rollup-linux-arm64-gnu": "4.40.2",
                "@rollup/rollup-linux-arm64-musl": "4.40.2",
                "@rollup/rollup-linux-loongarch64-gnu": "4.40.2",
                "@rollup/rollup-linux-powerpc64le-gnu": "4.40.2",
                "@rollup/rollup-linux-riscv64-gnu": "4.40.2",
                "@rollup/rollup-linux-riscv64-musl": "4.40.2",
                "@rollup/rollup-linux-s390x-gnu": "4.40.2",
                "@rollup/rollup-linux-x64-gnu": "4.40.2",
                "@rollup/rollup-linux-x64-musl": "4.40.2",
                "@rollup/rollup-win32-arm64-msvc": "4.40.2",
                "@rollup/rollup-win32-ia32-msvc": "4.40.2",
                "@rollup/rollup-win32-x64-msvc": "4.40.2",
                "fsevents": "~2.3.2"
            }
        },
        "node_modules/run-parallel": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
            "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "queue-microtask": "^1.2.2"
            }
        },
        "node_modules/scheduler": {
            "version": "0.23.2",
            "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
            "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
            "license": "MIT",
            "dependencies": {
                "loose-envify": "^1.1.0"
            }
        },
        "node_modules/semver": {
            "version": "6.3.1",
            "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
            "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
            "dev": true,
            "license": "ISC",
            "bin": {
                "semver": "bin/semver.js"
            }
        },
        "node_modules/shebang-command": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
            "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "shebang-regex": "^3.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/shebang-regex": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
            "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/signal-exit": {
            "version": "4.1.0",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
            "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
            "dev": true,
            "license": "ISC",
            "engines": {
                "node": ">=14"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/source-map-js": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
            "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
            "dev": true,
            "license": "BSD-3-Clause",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/ssf": {
            "version": "0.11.2",
            "resolved": "https://registry.npmjs.org/ssf/-/ssf-0.11.2.tgz",
            "integrity": "sha512-+idbmIXoYET47hH+d7dfm2epdOMUDjqcB4648sTZ+t2JwoyBFL/insLfB/racrDmsKB3diwsDA696pZMieAC5g==",
            "license": "Apache-2.0",
            "dependencies": {
                "frac": "~1.1.2"
            },
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/string-width": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
            "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "eastasianwidth": "^0.2.0",
                "emoji-regex": "^9.2.2",
                "strip-ansi": "^7.0.1"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/string-width-cjs": {
            "name": "string-width",
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/string-width-cjs/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/string-width-cjs/node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/string-width-cjs/node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/strip-ansi": {
            "version": "7.1.0",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
            "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-regex": "^6.0.1"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/strip-ansi?sponsor=1"
            }
        },
        "node_modules/strip-ansi-cjs": {
            "name": "strip-ansi",
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/sucrase": {
            "version": "3.35.0",
            "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
            "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/gen-mapping": "^0.3.2",
                "commander": "^4.0.0",
                "glob": "^10.3.10",
                "lines-and-columns": "^1.1.6",
                "mz": "^2.7.0",
                "pirates": "^4.0.1",
                "ts-interface-checker": "^0.1.9"
            },
            "bin": {
                "sucrase": "bin/sucrase",
                "sucrase-node": "bin/sucrase-node"
            },
            "engines": {
                "node": ">=16 || 14 >=14.17"
            }
        },
        "node_modules/supports-preserve-symlinks-flag": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
            "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/tailwindcss": {
            "version": "3.4.17",
            "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
            "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@alloc/quick-lru": "^5.2.0",
                "arg": "^5.0.2",
                "chokidar": "^3.6.0",
                "didyoumean": "^1.2.2",
                "dlv": "^1.1.3",
                "fast-glob": "^3.3.2",
                "glob-parent": "^6.0.2",
                "is-glob": "^4.0.3",
                "jiti": "^1.21.6",
                "lilconfig": "^3.1.3",
                "micromatch": "^4.0.8",
                "normalize-path": "^3.0.0",
                "object-hash": "^3.0.0",
                "picocolors": "^1.1.1",
                "postcss": "^8.4.47",
                "postcss-import": "^15.1.0",
                "postcss-js": "^4.0.1",
                "postcss-load-config": "^4.0.2",
                "postcss-nested": "^6.2.0",
                "postcss-selector-parser": "^6.1.2",
                "resolve": "^1.22.8",
                "sucrase": "^3.35.0"
            },
            "bin": {
                "tailwind": "lib/cli.js",
                "tailwindcss": "lib/cli.js"
            },
            "engines": {
                "node": ">=14.0.0"
            }
        },
        "node_modules/thenify": {
            "version": "3.3.1",
            "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
            "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "any-promise": "^1.0.0"
            }
        },
        "node_modules/thenify-all": {
            "version": "1.6.0",
            "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
            "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "thenify": ">= 3.1.0 < 4"
            },
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "is-number": "^7.0.0"
            },
            "engines": {
                "node": ">=8.0"
            }
        },
        "node_modules/ts-interface-checker": {
            "version": "0.1.13",
            "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
            "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
            "dev": true,
            "license": "Apache-2.0"
        },
        "node_modules/update-browserslist-db": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
            "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
            "dev": true,
            "funding": [
                {
                    "type": "opencollective",
                    "url": "https://opencollective.com/browserslist"
                },
                {
                    "type": "tidelift",
                    "url": "https://tidelift.com/funding/github/npm/browserslist"
                },
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/ai"
                }
            ],
            "license": "MIT",
            "dependencies": {
                "escalade": "^3.2.0",
                "picocolors": "^1.1.1"
            },
            "bin": {
                "update-browserslist-db": "cli.js"
            },
            "peerDependencies": {
                "browserslist": ">= 4.21.0"
            }
        },
        "node_modules/util-deprecate": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
            "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/vite": {
            "version": "5.4.19",
            "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
            "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "esbuild": "^0.21.3",
                "postcss": "^8.4.43",
                "rollup": "^4.20.0"
            },
            "bin": {
                "vite": "bin/vite.js"
            },
            "engines": {
                "node": "^18.0.0 || >=20.0.0"
            },
            "funding": {
                "url": "https://github.com/vitejs/vite?sponsor=1"
            },
            "optionalDependencies": {
                "fsevents": "~2.3.3"
            },
            "peerDependencies": {
                "@types/node": "^18.0.0 || >=20.0.0",
                "less": "*",
                "lightningcss": "^1.21.0",
                "sass": "*",
                "sass-embedded": "*",
                "stylus": "*",
                "sugarss": "*",
                "terser": "^5.4.0"
            },
            "peerDependenciesMeta": {
                "@types/node": {
                    "optional": true
                },
                "less": {
                    "optional": true
                },
                "lightningcss": {
                    "optional": true
                },
                "sass": {
                    "optional": true
                },
                "sass-embedded": {
                    "optional": true
                },
                "stylus": {
                    "optional": true
                },
                "sugarss": {
                    "optional": true
                },
                "terser": {
                    "optional": true
                }
            }
        },
        "node_modules/which": {
            "version": "2.0.2",
            "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
            "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "isexe": "^2.0.0"
            },
            "bin": {
                "node-which": "bin/node-which"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/wmf": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wmf/-/wmf-1.0.2.tgz",
            "integrity": "sha512-/p9K7bEh0Dj6WbXg4JG0xvLQmIadrner1bi45VMJTfnbVHsc7yIajZyoSoK60/dtVBs12Fm6WkUI5/3WAVsNMw==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/word": {
            "version": "0.3.0",
            "resolved": "https://registry.npmjs.org/word/-/word-0.3.0.tgz",
            "integrity": "sha512-OELeY0Q61OXpdUfTp+oweA/vtLVg5VDOXh+3he3PNzLGG/y0oylSOC1xRVj0+l4vQ3tj/bB1HVHv1ocXkQceFA==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/wrap-ansi": {
            "version": "8.1.0",
            "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
            "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-styles": "^6.1.0",
                "string-width": "^5.0.1",
                "strip-ansi": "^7.0.1"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
            }
        },
        "node_modules/wrap-ansi-cjs": {
            "name": "wrap-ansi",
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
            "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-styles": "^4.0.0",
                "string-width": "^4.1.0",
                "strip-ansi": "^6.0.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
            }
        },
        "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
            "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "color-convert": "^2.0.1"
            },
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-styles?sponsor=1"
            }
        },
        "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/wrap-ansi-cjs/node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/xlsx": {
            "version": "0.18.5",
            "resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.18.5.tgz",
            "integrity": "sha512-dmg3LCjBPHZnQp5/F/+nnTa+miPJxUXB6vtk42YjBBKayDNagxGEeIdWApkYPOf3Z3pm3k62Knjzp7lMeTEtFQ==",
            "license": "Apache-2.0",
            "dependencies": {
                "adler-32": "~1.3.0",
                "cfb": "~1.2.1",
                "codepage": "~1.15.0",
                "crc-32": "~1.2.1",
                "ssf": "~0.11.2",
                "wmf": "~1.0.1",
                "word": "~0.3.0"
            },
            "bin": {
                "xlsx": "bin/xlsx.njs"
            },
            "engines": {
                "node": ">=0.8"
            }
        },
        "node_modules/yallist": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
            "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/yaml": {
            "version": "2.7.1",
            "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.7.1.tgz",
            "integrity": "sha512-10ULxpnOCQXxJvBgxsn9ptjq6uviG/htZKk9veJGhlqn3w/DxQ631zFF+nlQXLwmImeS5amR2dl2U8sg6U9jsQ==",
            "dev": true,
            "license": "ISC",
            "bin": {
                "yaml": "bin.mjs"
            },
            "engines": {
                "node": ">= 14"
            }
        }
    }
}


===== FILE: frontend/package.json =====
{
    "name": "bao-cao-frontend",
    "version": "1.0.0",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "preview": "vite preview"
    },
    "dependencies": {
        "axios": "^1.6.0",
        "file-saver": "^2.0.5",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-router-dom": "^6.21.2",
        "xlsx": "^0.18.5"
    },
    "devDependencies": {
        "@vitejs/plugin-react": "^4.4.1",
        "autoprefixer": "^10.4.0",
        "postcss": "^8.4.0",
        "tailwindcss": "^3.4.1",
        "vite": "^5.2.0"
    }
}


===== FILE: frontend/postcss.config.js =====
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


===== FILE: frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


===== FILE: frontend/vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import fs from 'fs'                     // ‚úÖ TH√äM D√íNG N√ÄY

export default defineConfig({
  plugins: [react()]
})


===== FILE: frontend/cert\ca.crt =====
-----BEGIN CERTIFICATE-----
MIIC6DCCAdCgAwIBAgIUCPvS2Wm33u4CoYeKmVWdiby3oQowDQYJKoZIhvcNAQEL
BQAwFDESMBAGA1UEAwwJTXlMb2NhbENBMB4XDTI1MDUxMjAzNTQxOFoXDTM1MDUx
MDAzNTQxOFowFDESMBAGA1UEAwwJTXlMb2NhbENBMIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAh6YRsQJZEhZ0fwJbeLBtAciS7l71lI613N1uzOA2vnAN
HZa5S+CV2zwLgD81rHXRf8ynFHoEE9zC65DWCGRfSNmHVgxzcHpzvXuN7uSk19gi
cHle4WQc6HCT1Kdi9thB/K5A0JXfC4847Ewqyl0EagifLCZDOtEkvCad1tKnSK+i
2BR8/9E2DZhpbuxzR4ceAL+S17eCwppjwoP2tGAU4Er1DHPpDNrEi0uQTA+f27P2
LVPg81BjypEUyvcBaT1335/eUjR/SAGnUYoD1Wwy/mYeIpUT/inP166w/j5RdRxk
fcUGMtEk3MYJrp+Hp62W3UBkHJFaM8t40dSHthEefQIDAQABozIwMDAPBgNVHREE
CDAGhwRkWvwkMB0GA1UdDgQWBBT4lJFbjktqKcNa+43sOnZnY+j6hzANBgkqhkiG
9w0BAQsFAAOCAQEAPdpndI4XbEWI9WKeDYwxIwZXQ9oVhS7aoHLvfedFKvKaTaKz
vWry0iUwf3IK2p31x/YvKbpwo/je4AnoxS758N7WmBFyd+Es+cSKZAnTjHzGDUYs
5ZfnUbhUG3J2MAMb4ka7rKe+n8/uWsVQq6v3tEZlX+qpPYccz8bJ/UoC+t01OzRl
MXUyedOU4/AoWW45U9fTo1mr9JCbUWTNCwPg24YTx0TZH45Hv9Qaboded8uyJjwr
G99i6zvP7re/hTgxFzxNoMSeNsbOfm49Mpx5EEhcvsFHe2ZbyyVpGrvXT2OfIzVr
q2PndqDoRAUMySBaGKDvyIR9AyUS09NmOdlpsA==
-----END CERTIFICATE-----


===== FILE: frontend/cert\ca.key =====
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCHphGxAlkSFnR/
Alt4sG0ByJLuXvWUjrXc3W7M4Da+cA0dlrlL4JXbPAuAPzWsddF/zKcUegQT3MLr
kNYIZF9I2YdWDHNwenO9e43u5KTX2CJweV7hZBzocJPUp2L22EH8rkDQld8Ljzjs
TCrKXQRqCJ8sJkM60SS8Jp3W0qdIr6LYFHz/0TYNmGlu7HNHhx4Av5LXt4LCmmPC
g/a0YBTgSvUMc+kM2sSLS5BMD5/bs/YtU+DzUGPKkRTK9wFpPXffn95SNH9IAadR
igPVbDL+Zh4ilRP+Kc/XrrD+PlF1HGR9xQYy0STcxgmun4enrZbdQGQckVozy3jR
1Ie2ER59AgMBAAECggEAApEbrc3uixOGmMJ1ecIYeVTS2r0xbUCRIJUJrP9gNMP0
uXlf2yUbuhlG2orNjoxwTMXfiiNP/fd9VAS1lFUgbFoIXKZ0Po3eAS1Yv3Oyohvr
uCz6F2l/zFP9qI+f4ffze7UfDXAFoYvrLm/SboTeqPYMOd4lRqNpggquZT/DXqgp
HkCGN/sp/P7feRtZ2mUnFvwwgBKFES7o1BHhE+d+v1398mYErgCqT67mzefSSEcp
sjhFacO1D310O/LsJMwyTVfCd7FfEQ1n3Jb0XL137WZdPsSktYfSR6oH/iYM7a8h
3gnIcp7INg861b+OYjZapu4wkQqzuU8xj6i/hmnW8wKBgQC7SSLEk9OZWc5yYoqb
3V6mljV1BT5/zxFijQg+SijtfprqB09NGx0UfdolAQUdRK0jlPEQuTWB5PU2qt+H
f9O2rC9a+/S5SsPb3f6Y1v7XloJvMdOIfbSP41kNFgo97JWCWESoU1kwe6wD6pdt
qaJhxl/Yigou90pt6NDA4CSQrwKBgQC5auogZstdGZDRUF3RpMLc2nWJSnP+7tMg
e1rbUa3BH8VWmJFzvC7Ha9Rv9LSsMTKO+GS25NoSi+KOYGk/KKgzaIA8Q6ehSaMP
kZR9Mg8FqrkpV50Wblyomz1FWMqBEmdp+YGdFQWxSi2r4u0dDhtptrJ+5le/0eZx
UD3nKE0WkwKBgBQiqtBDrG5CT4XQvmI/jJuQbrLkG3IWSyIzU32O75OJFxKuMoJx
tdCsLzXnRCt/ZLX8n2ZS40PR3+M+v8WLorFzFaxMhmUdeq060tKP2tpG3kMiMkHs
ces+YCaeBf/eXbyjzM3kGCS0Rywsnpc1s7WbZFadkLa385KZg0gZURUVAoGBAIHv
IF7Qala1obxs2zIcicmG9bLeD+doqV8r0oG6/U5G211R0SwPhaCOOfKywyGf4FQ8
USexu/gfOwaXHWn7LdPIuYSBzKjEF5bDaBFL0Schelw0X4rmj9w/3XIJRO+qW/nx
tRjFMJYK63J2tb8UsbUlKHSxKnDrwNdLafXhUhQtAoGATk1/w/WSQA6U2woElD+M
JRqZCdgI7CwBHPyBFPO7Vr/EtMNOTMI4XBKj5Rj3Ra96Wb9mA8EHw6bOceygakmt
SBSpiZOJncaKhgHNw9eMkAnlexr0NpztPbIL8IZCur2zH01A5Fy/JurPdZTp7RrO
vxn2KXNLvgJ04DMXBgvAG5s=
-----END PRIVATE KEY-----


===== FILE: frontend/cert\ca.srl =====
4381AAE6D9A535D6CF1B28F109AF24A4514FE84E


===== FILE: frontend/cert\openssl.cnf =====
[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
req_extensions     = v3_req
x509_extensions    = v3_req
prompt             = no

[ req_distinguished_name ]
CN = 100.90.252.36

[ v3_req ]
subjectAltName = @alt_names

[ alt_names ]
IP.1 = 100.90.252.36


===== FILE: frontend/cert\server.crt =====
-----BEGIN CERTIFICATE-----
MIICszCCAZsCFEOBqubZpTXWzxso8QmvJKRRT+hOMA0GCSqGSIb3DQEBCwUAMBQx
EjAQBgNVBAMMCU15TG9jYWxDQTAeFw0yNTA1MTIwMzU1MThaFw0zNTA1MTAwMzU1
MThaMBgxFjAUBgNVBAMMDTEwMC45MC4yNTIuMzYwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQCM+9K+Bkwe1r8T0iqv8PlM8r41dWkV/IEb6zjTsOsqnzp2
gwx8IjEqW5FpYjzr1fkahKGz0F2dLB1YrHeB5inGTe5aQHVqbfxbAaTvUXrVA082
Qt4fMAIUtbEvWJafzh2kEoGIBA7X4rcr4m6ElAm9lgzz41VGPMClMeeyZVEg+jfk
WASbMCy0fFv/cIn1aAw6wA0YsZepBrnP/BZXcxwI8F4Tvy5ubudTScHDmp72QRsC
sy2Ms5DL49Bil/F6BacqHM+N6c9auWx/hmjp4hEm9Ft+cmqmioxXXNme0uQJEKIr
QJk2SLDFaLgaaFEXuLhk3ztyMyyc+T77FPxOF1o7AgMBAAEwDQYJKoZIhvcNAQEL
BQADggEBABwCL3d76PdX8+Wy96+0EDsFgYtXV3SUdHck6BzqWfObyvpu/Hd8BOY6
9t14k0GoANw6iJnsCCJx/uoByk+JLAL6dQ6+5FVHwrIDetZQQTUwDdlU9EqiSUHD
EgHRmS3BRqhcT5Jzknv/rPaLB9kYNuYW3n5GvGo73Eshg3xCkXfYnUd6cD+1H3sW
F0s292BuWzYzNxFhtSO+4w8oKIxhhZZhNbkkjuK0L2iLW66sjE1T8/y2uHbN0EQo
kYCfVTBIMSLdRo5ia665VeB6Rs/HUMLelAdQqATNmnJzvZNB7N53/xlrrBA4Bjxx
/Olexujd5cBbJuE3QuGXtn81dpgDp9Y=
-----END CERTIFICATE-----


===== FILE: frontend/cert\server.csr =====
-----BEGIN CERTIFICATE REQUEST-----
MIICfzCCAWcCAQAwGDEWMBQGA1UEAwwNMTAwLjkwLjI1Mi4zNjCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAIz70r4GTB7WvxPSKq/w+UzyvjV1aRX8gRvr
ONOw6yqfOnaDDHwiMSpbkWliPOvV+RqEobPQXZ0sHVisd4HmKcZN7lpAdWpt/FsB
pO9RetUDTzZC3h8wAhS1sS9Ylp/OHaQSgYgEDtfityviboSUCb2WDPPjVUY8wKUx
57JlUSD6N+RYBJswLLR8W/9wifVoDDrADRixl6kGuc/8FldzHAjwXhO/Lm5u51NJ
wcOanvZBGwKzLYyzkMvj0GKX8XoFpyocz43pz1q5bH+GaOniESb0W35yaqaKjFdc
2Z7S5AkQoitAmTZIsMVouBpoURe4uGTfO3IzLJz5PvsU/E4XWjsCAwEAAaAiMCAG
CSqGSIb3DQEJDjETMBEwDwYDVR0RBAgwBocEZFr8JDANBgkqhkiG9w0BAQsFAAOC
AQEAcBmzeYsXmqFUsDeBckNhs1IF2t97gekokRYrjEWQMouUguWjxpP8AygRMbk4
guO8tbn2IhAXwZpxkl0CgUnaf1xzGMRYkQZuLuoVKC8Tv9q832mLwd4xLRoWnC53
HMhQy7oTjL8gcu7+udX3EJ6lY8bTWM7bm5fguyB3wzJt1j0jKEyHNH9Mdp7B5qbh
1KgO+vfQs/L7ULm7UJ/AyTpwFkNoLCo4BxYg6Xm2MBgKLkd8o3gMF6EpcljAtWF/
8uysKNtSWVReKcygDpf/BdfCLxoFbDftYDadBLHST6pfl8f6Qm66lYWUgZvi7NtZ
vKhl7obZ7ri1IcQDojQuMfLRfw==
-----END CERTIFICATE REQUEST-----


===== FILE: frontend/cert\server.key =====
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCM+9K+Bkwe1r8T
0iqv8PlM8r41dWkV/IEb6zjTsOsqnzp2gwx8IjEqW5FpYjzr1fkahKGz0F2dLB1Y
rHeB5inGTe5aQHVqbfxbAaTvUXrVA082Qt4fMAIUtbEvWJafzh2kEoGIBA7X4rcr
4m6ElAm9lgzz41VGPMClMeeyZVEg+jfkWASbMCy0fFv/cIn1aAw6wA0YsZepBrnP
/BZXcxwI8F4Tvy5ubudTScHDmp72QRsCsy2Ms5DL49Bil/F6BacqHM+N6c9auWx/
hmjp4hEm9Ft+cmqmioxXXNme0uQJEKIrQJk2SLDFaLgaaFEXuLhk3ztyMyyc+T77
FPxOF1o7AgMBAAECggEABVg8noiVlSu19bXneWEMym5/aH5pe/RlHp5Vuqy/1Y9Q
w5JnREN1krIC+rhHL/eeKHOzv6HcEqvL9wMeyrVjiwmESjacXOsLgJW433u6yN2F
wLxbOFp1EbzrmSxmFWvWctRixbnFqEiHgink37DPB7lrB0nsfyupb/nK21f88d+M
HFT7JHoMM4n92rxtpCqigvCO4M7vuI01fl+RPNXatQ8T7rhRsMP2RV0T+DhXl2aA
fJAn8y7NlrNA/Fg0YUl8cxJdSFgRCvkClDacMlyJUlmx/h4hY5vFb8FdUMPIKM04
puQsQPjm89lyclpxvNdDpmdkSK0VeJJayx4tSBbeRQKBgQC+6mxGiZVG0tlmcn3g
GyUoS2H40RkVwgD2+tSEDKDr18hhkInKuK4N1oUd2+VfmOSr/hFRJu9rTFX6Kpt/
lXeT71f1sPFodot9WWcxe2dTIcmtynT1s0eUqu7P8QtJDBXLGosraAz/imqGU9hm
ZNmgOefTYce4N91F+yt6JxovTQKBgQC9C7y1Njc9tovjs47vPU4ADpTClWi+9EUt
Q2ZcuNtn5Lk4c1CMqME02WplOg4wgIoKPUn3qvtzStB71+8uZzjWbkGLBFjBQJmN
jFEl6vpWRZByEBgXeCpI9+0hAPk59/F35bVCaUpiEhjMqeCJCj+KKbnFGem2rzZQ
Hy//USr7pwKBgETlzqtqDXAguYoqOVj+EtvG0JV9yGK8v6JiBP2enRhfqBXlloSN
P2sJBsMuz0k/oQ6cwt0Zgv+i7cg5RiK16xB9KK4m7Af59/8Fm6MU2MX8hI7uaGUf
DO8O/N4YLC1xahABBUZl54L1DdpqOcdCD/Ot0gbL28qUhosxyI/tupplAoGAItBX
hzOdxrKoXl2B1BMBG0eUI6VqLchEOQqxfh/Y3/AiIAA0dELbmcT0MAIZ/NqfETWq
On71YY0EidoBRRVjRTH2xggd5DDmVkfh5c65HUwgRrEqDqBlgRyPQcWxH/jGMiNO
VxWWyiq1AHPEUthdTS9T87VK8gagRO8JYsZq2P8CgYBy4xDHB4PpG48DptdelbtQ
wl7RpTLoX+51rX3z+cbyRtdHjPHPPENW5a0yz0QxQIpoR+1vAjn8gej0UbD9lUeD
SaiJxO2lczklT0sreGcbtnKwHZX+1xAo+ZJUcWqNHZyX4Nl5rgQAJBv/HqThOGU8
H/USmTpSoyZXDmCkkJe0xA==
-----END PRIVATE KEY-----


===== FILE: frontend/src\App.jsx =====
import React from "react";

function App() {
  return (
    <div className="p-4 text-center text-white bg-blue-600">
      <h1 className="text-2xl font-bold">H·ªá th·ªëng b√°o c√°o ƒë√£ kh·ªüi t·∫°o!</h1>
    </div>
  );
}

export default App;


===== FILE: frontend/src\index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;


===== FILE: frontend/src\main.jsx =====
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import { RouterProvider } from 'react-router-dom'
import { router } from './router/router.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
)


===== FILE: frontend/src\components\DeleteUserModal.jsx =====
import React from "react";

const DeleteUserModal = ({ user, onClose, onDelete }) => {
  const handleConfirm = () => {
    onDelete(user);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
      <div className="bg-red-50 border border-red-400 text-red-700 rounded shadow p-6 w-96">
        <p className="text-base mb-4">
          B·∫°n c√≥ ch·∫Øc ch·∫Øn xo√° t√†i kho·∫£n <b>{user.username}</b> kh√¥ng?
        </p>
        <div className="flex justify-end gap-2">
          <button onClick={handleConfirm} className="bg-red-600 text-white px-4 py-1 rounded">
            Xo√°
          </button>
          <button onClick={onClose} className="bg-gray-200 text-black px-4 py-1 rounded">
            Kh√¥ng xo√°
          </button>
        </div>
      </div>
    </div>
  );
};

export default DeleteUserModal;

===== FILE: frontend/src\components\DropdownMenu.jsx =====
import React, { useState, useRef, useEffect } from "react";

const DropdownMenu = ({ onLogout, onChangePassword, onShowAccountInfo }) => {
  const [open, setOpen] = useState(false);
  const menuRef = useRef(null);

  const handleClickOutside = (e) => {
    if (menuRef.current && !menuRef.current.contains(e.target)) {
      setOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={menuRef}>
      <img
        src="/icon_user.png"
        alt="user"
        className="w-8 h-8 rounded-full border cursor-pointer"
        onClick={() => setOpen(!open)}
      />
      {open && (
        <div className="absolute right-0 mt-2 w-48 bg-white border rounded shadow-md text-sm z-50">
          <div className="flex items-center px-3 py-2 hover:bg-gray-100 cursor-pointer"
           onClick={() => {
            onShowAccountInfo();
            setOpen(false);
          }}>
            <img src="/icon_info.png" alt="info" className="w-4 h-4 mr-2" />
            Th√¥ng tin
          </div>
          <div
            className="flex items-center px-3 py-2 hover:bg-gray-100 cursor-pointer"
            onClick={() => {
              onChangePassword();
              setOpen(false); // ƒë√≥ng menu sau khi nh·∫•n
            }}
          >
            <img src="/icon_password.png" alt="password" className="w-4 h-4 mr-2" />
            ƒê·ªïi m·∫≠t kh·∫©u
          </div>
          <div
            className="flex items-center px-3 py-2 hover:bg-gray-100 cursor-pointer text-red-600"
            onClick={onLogout}
          >
            <img src="/icon_logout.png" alt="logout" className="w-4 h-4 mr-2" />
            ƒêƒÉng xu·∫•t
          </div>
        </div>
      )}
    </div>
  );
};

export default DropdownMenu;


===== FILE: frontend/src\components\RenameModal.jsx =====
import React, { useState } from "react";

const RenameModal = ({ user, onClose, onRename }) => {
  const [newName, setNewName] = useState("");

  const handleSubmit = () => {
    if (!newName.trim()) return alert("Vui l√≤ng nh·∫≠p t√™n m·ªõi");
    onRename(user, newName.trim());
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
      <div className="bg-white rounded shadow p-6 w-96 border border-blue-500">
        <h2 className="text-blue-600 font-bold text-lg mb-2">ƒê·ªîI T√äN CHI NH√ÅNH</h2>
        <p className="mb-2">T√™n chi nh√°nh c≈©: <b>{user.name}</b></p>
        <input
          type="text"
          placeholder="T√™n chi nh√°nh m·ªõi"
          className="w-full border p-2 rounded mb-4"
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
        />
        <div className="flex justify-end gap-2">
          <button onClick={handleSubmit} className="bg-blue-600 text-white px-4 py-1 rounded">ƒê·ªïi t√™n</button>
          <button onClick={onClose} className="bg-gray-200 text-black px-4 py-1 rounded">Hu·ª∑</button>
        </div>
      </div>
    </div>
  );
};

export default RenameModal;

===== FILE: frontend/src\components\ReportForm.jsx =====
import React from "react";

const ReportForm = ({ period }) => {
  return (
    <div className="bg-white p-6 rounded shadow">
      <h2 className="text-lg font-semibold mb-4">G·ª≠i b√°o c√°o: {period.Name}</h2>
      {/* TODO: Th√™m form g·ª≠i b√°o c√°o */}
      <p>Form g·ª≠i b√°o c√°o s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.</p>
    </div>
  );
};

export default ReportForm;


===== FILE: frontend/src\components\ResetPasswordModal.jsx =====
import React, { useState } from "react";

const ResetPasswordModal = ({ user, onClose, onReset }) => {
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const handleSubmit = () => {
    if (!password.trim() || !confirmPassword.trim()) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }
    if (password !== confirmPassword) {
      alert("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp");
      return;
    }
    onReset(user, password);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
      <div className="bg-white rounded shadow p-6 w-96 border border-blue-500 bg-blue-50">
        <h2 className="text-blue-600 font-bold text-lg mb-2">
          ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n <span className="text-black">{user.username}</span>
        </h2>
        <input
          type="password"
          placeholder="M·∫≠t kh·∫©u m·ªõi"
          className="w-full border p-2 rounded mb-2"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <input
          type="password"
          placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
          className="w-full border p-2 rounded mb-4"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
        />
        <div className="flex justify-end gap-2">
          <button onClick={handleSubmit} className="bg-blue-600 text-white px-4 py-1 rounded">
            ƒê·∫∑t l·∫°i
          </button>
          <button onClick={onClose} className="bg-gray-200 text-black px-4 py-1 rounded">
            Hu·ª∑
          </button>
        </div>
      </div>
    </div>
  );
};

export default ResetPasswordModal;

===== FILE: frontend/src\components\Sidebar.jsx =====
import React from "react";

const Sidebar = ({ periods, selectedPeriod, onSelectPeriod }) => {
  return (
    <div className="w-1/5 bg-white border-r p-4">
      <h2 className="text-lg font-bold mb-4">K·ª≥ b√°o c√°o</h2>
      <ul className="space-y-2">
        {periods.map((p) => (
          <li
            key={p.ID}
            onClick={() => onSelectPeriod(p)}
            className={`cursor-pointer p-2 rounded hover:bg-blue-100 ${
              selectedPeriod?.ID === p.ID ? "bg-blue-500 text-white" : ""
            }`}
          >
            <div className="font-semibold">{p.Name}</div>
            <div className="text-sm text-gray-600">
              {new Date(p.StartAt).toLocaleDateString()} - {new Date(p.EndAt).toLocaleDateString()}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Sidebar;


===== FILE: frontend/src\pages\AccountInfo.jsx =====
// frontend/src/pages/AccountInfo.jsx
import React, { useEffect, useState } from "react";
import axios from "../services/api";
//import api from "../utils/api";
import iconUser from "/icon_user.png";
import iconInfo from "/icon_info.png";

const AccountInfo = ({ token }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchMe = async () => {
      try {
        const res = await axios.get("/auth/me", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setUser(res.data);
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n:", err);
      }
    };
    if (token) fetchMe();
  }, [token]);

  if (!user) return <div className="p-4 text-gray-600">ƒêang t·∫£i th√¥ng tin...</div>;

  return (
    <div className="bg-gray-50 p-8 max-w-2xl mx-auto rounded-xl shadow-sm">
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <img src={iconInfo} alt="icon" className="w-6 h-6 mr-2" />
        Th√¥ng tin t√†i kho·∫£n
      </h2>

      <div className="flex items-center mb-6">
        <img
          src={user.avatar || iconUser}
          alt="Avatar"
          className="w-20 h-20 rounded-full border mr-4"
        />
        <div>
          <p className="text-lg font-semibold">{user.name}</p>
          <p className="text-gray-600">T√™n ƒëƒÉng nh·∫≠p: {user.username}</p>
          <p className="text-gray-600">C·∫•p t√†i kho·∫£n: {user.level}</p>
        </div>
      </div>

      <div className="bg-gray-100 p-4 rounded">
        <p className="text-sm text-gray-600">
          Ng√†y t·∫°o:{" "}
          {user.time_created
            ? new Date(user.time_created).toLocaleString("vi-VN")
            : "Kh√¥ng r√µ"}
        </p>
      </div>
    </div>
  );
};

export default AccountInfo;


===== FILE: frontend/src\pages\AccountManager.jsx =====

import React, { useEffect, useRef, useState } from "react";
//import api from "../utils/api";
import axios from "../services/api";
import RenameModal from "../components/RenameModal";
import ResetPasswordModal from "../components/ResetPasswordModal";
import DeleteUserModal from "../components/DeleteUserModal";


const AccountManager = () => {
  const [users, setUsers] = useState([]);
  const [form, setForm] = useState({
    username: "",
    name: "",
    level: "CAPPHONG",
    is_admin: false,
    password: "",
  });
  const [filters, setFilters] = useState({
    username: "",
    name: "",
    level: "",
    is_admin: "",
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [menuOpen, setMenuOpen] = useState(null);
  const menuRef = useRef(null);
  const rowsPerPage = 10;

  const fetchUsers = async () => {
    try {
      const token = localStorage.getItem("admin_token");
      const res = await axios.get("/admin/user", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(Array.isArray(res.data) ? res.data : []);
    } catch (err) {
      console.error("Failed to fetch users", err);
      setUsers([]);
    }
  };

  const [selectedUser, setSelectedUser] = useState(null);
  const [showRenameModal, setShowRenameModal] = useState(false);
  const [showResetModal, setShowResetModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);


  const handleRename = async (user, newName) => {
  const token = localStorage.getItem("admin_token");
  try {
    await axios.put(`/admin/user/${user.id}`, {
      name: newName,
      level: user.level,
      password: user.password || "placeholder",  // ho·∫∑c ƒë·ªÉ backend b·ªè qua password
      is_admin: user.is_admin,
    }, {
      headers: { Authorization: `Bearer ${token}` },
    });
    fetchUsers();
    alert("‚úÖ ƒê·ªïi t√™n th√†nh c√¥ng");
  } catch (err) {
    alert("‚ùå L·ªói khi ƒë·ªïi t√™n: " + err.response?.data?.detail || err.message);
  }
};

  const handleResetPassword = async (user, newPassword) => {
  const token = localStorage.getItem("admin_token");
  try {
    await axios.put(`/admin/user/${user.id}`, {
      name: user.name,
      level: user.level,
      password: newPassword,
      is_admin: user.is_admin,
    }, {
      headers: { Authorization: `Bearer ${token}` },
    });
    alert("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
  } catch (err) {
    alert("‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: " + (err.response?.data?.detail || err.message));
  }
};
  const handleDeleteUser = async (user) => {
  const token = localStorage.getItem("admin_token");
  try {
    await axios.delete(`/admin/user/${user.id}`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    fetchUsers();
    alert("‚úÖ ƒê√£ xo√° t√†i kho·∫£n");
  } catch (err) {
    alert("‚ùå L·ªói khi xo√°: " + (err.response?.data?.detail || err.message));
  }
};
  const createUser = async (e) => {
  e.preventDefault();
  try {
    const token = localStorage.getItem("admin_token");
    const res = await axios.post("/admin/user", form, {
      headers: { Authorization: `Bearer ${token}` },
    });
    alert("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng");
    fetchUsers();
    setForm({
      username: "",
      name: "",
      level: "CAPPHONG",
      is_admin: false,
      password: "",
    });
  } catch (err) {
    alert("‚ùå L·ªói t·∫°o t√†i kho·∫£n: " + (err.response?.data?.detail || err.message));
  }
};


  const handleAction = async (action, user) => {
    setMenuOpen(null);
    const token = localStorage.getItem("admin_token");

    if (action === "rename") {
      setSelectedUser(user);
      setShowRenameModal(true);
    }

    if (action === "changepass") {
      setSelectedUser(user);
      setShowResetModal(true);
    }

    if (action === "delete") {
      setSelectedUser(user);
      setShowDeleteModal(true);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setMenuOpen(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const filteredUsers = users.filter((u) =>
    Object.entries(filters).every(([key, value]) =>
      u[key]?.toString().toLowerCase().includes(value.toLowerCase())
    )
  );

  const totalPages = Math.ceil(filteredUsers.length / rowsPerPage);
  const paginatedUsers = filteredUsers.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );

  return (
    <div className="p-4 space-y-6">
      <h2 className="text-xl font-bold">T·∫°o t√†i kho·∫£n m·ªõi</h2>
      <form onSubmit={createUser} className="space-y-2 bg-white p-4 rounded shadow w-full md:w-1/2">
        <input className="w-full border p-2" placeholder="Username" required value={form.username} onChange={(e) => setForm({ ...form, username: e.target.value })} />
        <input className="w-full border p-2" placeholder="T√™n chi nh√°nh" value={form.name} onChange={(e) => setForm({ ...form, name: e.target.value })} />
        <select className="w-full border p-2" value={form.level} onChange={(e) => setForm({ ...form, level: e.target.value })}>
          <option value="CAPPHONG">C·∫•p ph√≤ng</option>
          <option value="CAPXA">C·∫•p x√£</option>
        </select>
        <input className="w-full border p-2" type="password" placeholder="M·∫≠t kh·∫©u" required value={form.password} onChange={(e) => setForm({ ...form, password: e.target.value })} />
        <label className="flex items-center space-x-2">
          <input type="checkbox" checked={form.is_admin} onChange={(e) => setForm({ ...form, is_admin: e.target.checked })} />
          <span>L√† t√†i kho·∫£n qu·∫£n tr·ªã</span>
        </label>
        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">T·∫°o t√†i kho·∫£n</button>
      </form>

      <h2 className="text-xl font-bold mt-10">Danh s√°ch t√†i kho·∫£n</h2>
      <div className="bg-white rounded-lg shadow p-4 overflow-x-auto">
        <table className="w-full text-sm border">
          <thead className="bg-gray-100">
            <tr>
              <th className="border px-2 py-1">ID</th>
              <th className="border px-2 py-1">Username</th>
              <th className="border px-2 py-1">T√™n</th>
              <th className="border px-2 py-1">C·∫•p</th>
              <th className="border px-2 py-1">Admin</th>
              <th className="border px-2 py-1">Ng√†y t·∫°o</th>
              <th className="border px-2 py-1">Thao t√°c</th>
            </tr>
            <tr className="text-xs bg-white">
              <th></th>
              <th><input className="w-full border px-1 py-0.5 rounded" placeholder="L·ªçc Username" value={filters.username} onChange={(e) => setFilters({ ...filters, username: e.target.value })} /></th>
              <th><input className="w-full border px-1 py-0.5 rounded" placeholder="L·ªçc T√™n" value={filters.name} onChange={(e) => setFilters({ ...filters, name: e.target.value })} /></th>
              <th><input className="w-full border px-1 py-0.5 rounded" placeholder="L·ªçc C·∫•p" value={filters.level} onChange={(e) => setFilters({ ...filters, level: e.target.value })} /></th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {paginatedUsers.map((u, idx) => (
              <tr key={u.id}>
                <td className="border px-2 py-1">{u.id}</td>
                <td className="border px-2 py-1">{u.username}</td>
                <td className="border px-2 py-1">{u.name}</td>
                <td className="border px-2 py-1">{u.level}</td>
                <td className="border px-2 py-1">{u.is_admin ? "‚úî" : ""}</td>
                <td className="border px-2 py-1">{u.time_created?.slice(0, 10)}</td>
                <td className="border px-2 py-1 relative" ref={menuOpen === idx ? menuRef : null}>
                  <button onClick={() => setMenuOpen(menuOpen === idx ? null : idx)} className="bg-gray-200 px-2 py-1 rounded">‚ãÆ</button>
                  {menuOpen === idx && (
                    <div className="absolute right-0 mt-1 bg-white border rounded shadow z-10">
                      <button onClick={() => handleAction("rename", u)} className="block w-full text-left px-4 py-2 hover:bg-gray-100">ƒê·ªïi t√™n</button>
                      <button onClick={() => handleAction("changepass", u)} className="block w-full text-left px-4 py-2 hover:bg-gray-100">ƒê·ªïi m·∫≠t kh·∫©u</button>
                      <button onClick={() => handleAction("delete", u)} className="block w-full text-left px-4 py-2 text-red-600 hover:bg-gray-100">Xo√°</button>
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <div className="mt-2 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <button className="px-3 py-1 border rounded hover:bg-gray-200" disabled={currentPage === 1} onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}>‚Üê Tr∆∞·ªõc</button>
            <span>Trang:</span>
            <input type="number" min={1} max={totalPages} value={currentPage} onChange={(e) => setCurrentPage(Math.min(totalPages, Math.max(1, Number(e.target.value))))} className="border px-2 py-1 w-16 rounded" />
            <button className="px-3 py-1 border rounded hover:bg-gray-200" disabled={currentPage === totalPages} onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}>Sau ‚Üí</button>
            <span className="text-sm text-gray-500 ml-2">T·ªïng: {totalPages} trang</span>
          </div>
        </div>
      </div>
      {showRenameModal && selectedUser && (
      <RenameModal
        user={selectedUser}
        onClose={() => setShowRenameModal(false)}
        onRename={handleRename}
      />
    )}
    {showResetModal && selectedUser && (
  <ResetPasswordModal
    user={selectedUser}
    onClose={() => setShowResetModal(false)}
    onReset={handleResetPassword}
  />
)}
{showDeleteModal && selectedUser && (
  <DeleteUserModal
    user={selectedUser}
    onClose={() => setShowDeleteModal(false)}
    onDelete={handleDeleteUser}
  />
)}
    </div>
  );
};

export default AccountManager;

===== FILE: frontend/src\pages\AdminDashboard.jsx =====
import React, { useState, createContext } from "react";
export const DashboardContext = createContext();
import logo from "/logo.png";
import iconBell from "/icon_bell.png";
import iconUser from "/icon_user.png";
import { useNavigate } from "react-router-dom";
import DropdownMenu from "../components/DropdownMenu";
import ReportSummary from "./ReportSummary";
import AccountManager from "./AccountManager";
import PeriodManager from "./PeriodManager";
//import ReportTypeManager from "./ReportTypeManager";
//import AuditLog from "./AuditLog";
import ChangePassword from "./ChangePassword";
import AccountInfo from "./AccountInfo";
import { getTokenInfo } from "../utils/auth";

const AdminDashboard = () => {
  const [activeTab, setActiveTab] = useState("summary");
  const user = getTokenInfo();
  const navigate = useNavigate();
  const [selectedPeriodId, setSelectedPeriodId] = useState(null);

  const renderContent = () => {
    switch (activeTab) {
      case "summary":
        return <ReportSummary />;
      case "account":
        return <AccountManager />;
      case "period":
        return <PeriodManager />;
      //case "reportType":
        //return <ReportTypeManager />;
      //case "audit":
        //return <AuditLog />;
      case "changepw":
        return <ChangePassword />;
      case "accountInfo":
        return <AccountInfo token={localStorage.getItem("admin_token")} />;
      default:
        return null;
    }
  };

  return (
    <DashboardContext.Provider value={{ activeTab, setActiveTab, selectedPeriodId, setSelectedPeriodId }}>
    <div className="bg-[#eef4fb] min-h-screen flex flex-col">
      {/* Header */}
      <div className="flex justify-between items-center px-6 py-3 bg-[#eaf7f5] shadow">
        <div className="flex items-center space-x-3">
          <img src={logo} alt="logo" className="w-8 h-8" />
          <h1 className="text-[#0d2d52] font-bold text-lg">
            H·ªá th·ªëng b√°o c√°o C√¥ng an t·ªânh Qu·∫£ng B√¨nh
          </h1>
        </div>
        <div className="flex items-center space-x-4">
          <img src={iconBell} alt="bell" className="w-5 h-5" />
          <div className="text-right text-sm text-[#0d2d52]">
            <div className="font-semibold">{user?.name || "Qu·∫£n tr·ªã vi√™n"}</div>
            <div className="text-xs">{user?.username}</div>
          </div>
          <DropdownMenu
            onLogout={() => {
              localStorage.removeItem("admin_token");
              navigate("/login/admin");
            }}
            onChangePassword={() => setActiveTab("changepw")}
            onShowAccountInfo={() => setActiveTab("accountInfo")}
          />
        </div>
      </div>

      <div className="flex flex-1">
        {/* Sidebar */}
        <div className="w-[280px] bg-white p-4 border-r">
          <SidebarItem label="T·ªïng h·ª£p b√°o c√°o" tab="summary" activeTab={activeTab} onClick={setActiveTab} />
          <SidebarItem label="Qu·∫£n l√Ω t√†i kho·∫£n" tab="account" activeTab={activeTab} onClick={setActiveTab} />
          <SidebarItem label="Qu·∫£n l√Ω K·ª≥ b√°o c√°o" tab="period" activeTab={activeTab} onClick={setActiveTab} />
          <SidebarItem label="Qu·∫£n l√Ω lo·∫°i b√°o c√°o" tab="reportType" activeTab={activeTab} onClick={setActiveTab} />
          <SidebarItem label="Nh·∫≠t k√Ω thao t√°c" tab="audit" activeTab={activeTab} onClick={setActiveTab} />
        </div>

        {/* Main Content */}
        <div className="flex-1 p-6">{renderContent()}</div>
      </div>
    </div>
    </DashboardContext.Provider>
  );
};

const SidebarItem = ({ label, tab, activeTab, onClick }) => (
  <div
    onClick={() => onClick(tab)}
    className={`p-3 rounded-lg mb-2 cursor-pointer font-medium text-sm ${
      activeTab === tab
        ? "bg-blue-100 border border-blue-400 text-blue-800"
        : "bg-gray-100 hover:bg-gray-200 text-gray-700"
    }`}
  >
    {label}
  </div>
);

export default AdminDashboard;


===== FILE: frontend/src\pages\ChangePassword.jsx =====
import React, { useState } from 'react';
import axios from '../services/api'; // d√πng c·∫•u h√¨nh axios c√≥ s·∫µn
//import api from "../utils/api";

const ChangePassword = () => {
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState(null);
  const [messageType, setMessageType] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (newPassword !== confirmPassword) {
      setMessage('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp');
      setMessageType('error');
      return;
    }

    try {
      const token = localStorage.getItem('access_token');
      const response = await axios.post(
        '/auth/changepassword',
        {
          old_password: oldPassword,
          new_password: newPassword,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setMessage('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng');
      setMessageType('success');
      setOldPassword('');
      setNewPassword('');
      setConfirmPassword('');
    } catch (error) {
      const msg =
        error.response?.data?.detail || 'L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u';
      setMessage(msg);
      setMessageType('error');
    }
  };

  return (
    <div className="bg-gray-50 p-8 max-w-2xl mx-auto rounded-xl shadow-sm">
      <h2 className="text-xl font-bold mb-6">ƒê·ªïi m·∫≠t kh·∫©u</h2>

      {message && (
        <div
          className={`mb-4 px-4 py-2 rounded text-sm ${
            messageType === 'success'
              ? 'bg-green-100 text-green-700'
              : 'bg-red-100 text-red-700'
          }`}
        >
          {message}
        </div>
      )}

      <form className="space-y-5" onSubmit={handleSubmit}>
        <div>
          <label className="block mb-1 font-medium text-gray-700">M·∫≠t kh·∫©u c≈©</label>
          <input
            type="password"
            className="w-full border rounded px-4 py-2"
            value={oldPassword}
            onChange={(e) => setOldPassword(e.target.value)}
            required
          />
        </div>

        <div>
          <label className="block mb-1 font-medium text-gray-700">M·∫≠t kh·∫©u m·ªõi</label>
          <input
            type="password"
            className="w-full border rounded px-4 py-2"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
        </div>

        <div>
          <label className="block mb-1 font-medium text-gray-700">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
          <input
            type="password"
            className="w-full border rounded px-4 py-2"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
        </div>

        <div className="flex space-x-4 pt-4">
          <button
            type="submit"
            className="bg-blue-600 text-white px-5 py-2 rounded hover:bg-blue-700"
          >
            X√°c nh·∫≠n
          </button>
          <button
            type="button"
            onClick={() => {
              setOldPassword('');
              setNewPassword('');
              setConfirmPassword('');
              setMessage(null);
            }}
            className="bg-gray-200 text-black px-5 py-2 rounded hover:bg-gray-300"
          >
            ƒê√≥ng
          </button>
        </div>
      </form>
    </div>
  );
};

export default ChangePassword;


===== FILE: frontend/src\pages\LoginAdmin.jsx =====
import React, { useState } from "react";
import axios from "../services/api";
//import api from "../utils/api";
import { useNavigate } from "react-router-dom";

const LoginAdmin = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [remember, setRemember] = useState(false);
  const navigate = useNavigate();

  const handleLogin = async () => {
    try {
      const response = await axios.post("/admin/user/login", {
        username,
        password,
      }, {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      });

      const token = response.data.access_token;
      localStorage.setItem("admin_token", token);
      if (remember) {
        localStorage.setItem("admin_username", username);
      }
      navigate("/admin/dashboard");
    } catch (error) {
      alert("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.");
    }
  };

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-gray-100">
      
      <div className="bg-white p-8 rounded shadow-md w-100">
        <h1 className="text-2xl font-bold mb-4 text-center">H·ªá th·ªëng g·ª≠i b√°o c√°o C√¥ng an t·ªânh Qu·∫£ng B√¨nh</h1>
        <h2 className="text-1xl font-bold mb-4 text-center">ƒêƒÉng nh·∫≠p Qu·∫£n tr·ªã vi√™n</h2>
        <input
          type="text"
          placeholder="T√™n ƒëƒÉng nh·∫≠p"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="w-full p-2 mb-4 border border-gray-300 rounded"
        />
        <input
          type="password"
          placeholder="M·∫≠t kh·∫©u"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full p-2 mb-4 border border-gray-300 rounded"
        />
        <div className="flex items-center mb-4">
          <input
            type="checkbox"
            checked={remember}
            onChange={(e) => setRemember(e.target.checked)}
            className="mr-2"
          />
          <label>Ghi nh·ªõ ƒëƒÉng nh·∫≠p</label>
        </div>
        <button
          onClick={handleLogin}
          className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
        >
          ƒêƒÉng nh·∫≠p
        </button>
      </div>
    </div>
  );
};

export default LoginAdmin;


===== FILE: frontend/src\pages\LoginBranch.jsx =====
import React, { useState, useEffect } from 'react';
import axios from '../services/api';
import { useNavigate } from 'react-router-dom';

const LoginBranch = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [remember, setRemember] = useState(false);
  const [error, setError] = useState('');
  const [autoTried, setAutoTried] = useState(false);  // ‚úÖ ch·ªâ cho ph√©p auto login 1 l·∫ßn
  const navigate = useNavigate();

  // Auto login n·∫øu c√≥ l∆∞u remember
  useEffect(() => {
  if (!autoTried) {
    const saved = localStorage.getItem('remember_branch');
    if (saved) {
      try {
        const { username, password } = JSON.parse(atob(saved));
        setUsername(username);
        setPassword(password);
        setRemember(true);
        autoLogin(username, password);
      } catch (e) {
        console.error("L·ªói gi·∫£i m√£ remember_branch:", e);
        localStorage.removeItem("remember_branch");
      }
    }
    setAutoTried(true);
  }
}, [autoTried]);


  const autoLogin = async (username, password) => {
  try {
    const res = await axios.post('/auth/login', new URLSearchParams({ username, password }), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });

    const token = res.data.access_token;
    localStorage.setItem('access_token', token);

    // ‚úÖ G·ªçi /auth/me ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const headers = { Authorization: `Bearer ${token}` };
    const userRes = await axios.get('/auth/me', { headers });
    const userInfo = userRes.data;

    localStorage.setItem('user', JSON.stringify(userInfo));
    navigate('/user/dashboard');
  } catch (err) {
    console.warn('T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p th·∫•t b·∫°i');
    localStorage.removeItem('remember_branch');
  }
};


  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const loginRes = await axios.post('/auth/login', new URLSearchParams({ username, password }), {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      });

      const token = loginRes.data.access_token;
      const headers = { Authorization: `Bearer ${token}` };

      // G·ªçi /auth/me ƒë·ªÉ l·∫•y user ƒë·∫ßy ƒë·ªß
      const userRes = await axios.get('/auth/me', { headers });
      const userInfo = userRes.data;

      // L∆∞u token + user
      localStorage.setItem("access_token", token);
      localStorage.setItem("user", JSON.stringify(userInfo));
      if (remember) {
        localStorage.setItem("remember_branch", btoa(JSON.stringify({ username, password })));
      } else {
        localStorage.removeItem("remember_branch");
      }

      // Chuy·ªÉn trang
      navigate("/user/dashboard");
    } catch (err) {
      console.error("Login failed:", err);
      setError("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.");
    }
  };

  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      <form className="bg-white p-6 rounded shadow-md w-96" onSubmit={handleLogin}>
        <h2 className="text-xl font-bold mb-4 text-center">H·ªá th·ªëng g·ª≠i b√°o c√°o C√¥ng an t·ªânh Qu·∫£ng B√¨nh</h2>
        {error && <div className="text-red-600 text-sm mb-2">{error}</div>}
        <label className="block mb-2">T√™n t√†i kho·∫£n:</label>
        <input type="text" className="w-full p-2 border rounded mb-4"
          value={username} onChange={(e) => setUsername(e.target.value)} required />
        <label className="block mb-2">M·∫≠t kh·∫©u:</label>
        <input type="password" className="w-full p-2 border rounded mb-4"
          value={password} onChange={(e) => setPassword(e.target.value)} required />
        <div className="flex items-center mb-4">
          <input type="checkbox" id="remember" className="mr-2"
            checked={remember} onChange={(e) => setRemember(e.target.checked)} />
          <label htmlFor="remember">Ghi nh·ªõ ƒëƒÉng nh·∫≠p</label>
        </div>
        <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">
          ƒêƒÉng nh·∫≠p
        </button>
      </form>
    </div>
  );
};

export default LoginBranch;


===== FILE: frontend/src\pages\PeriodManager.jsx =====
import React, { useEffect, useState } from "react";
import axios from "../services/api";
import { useContext } from "react";
import { DashboardContext } from "./AdminDashboard";


const PAGE_SIZE = 10;

const PeriodManager = () => {
  const [periods, setPeriods] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const { setActiveTab, setSelectedPeriodId } = useContext(DashboardContext);

  const fetchReportCount = async (periodId, token) => {
    try {
      const res = await axios.get(`/report/admin/${periodId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      return res.data.length;
    } catch (err) {
      console.error(`L·ªói khi l·∫•y b√°o c√°o cho period ${periodId}:`, err);
      return 0;
    }
  };

  const fetchData = async () => {
    try {
      const token = localStorage.getItem("admin_token");
      const response = await axios.get("/period", {
        headers: { Authorization: `Bearer ${token}` },
      });

      const periodsWithCounts = await Promise.all(
        response.data.map(async (p) => {
          const count = await fetchReportCount(p.ID, token);
          return { ...p, reportCount: count };
        })
      );

      setPeriods(periodsWithCounts);
      setFiltered(periodsWithCounts);
    } catch (err) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu k·ª≥ b√°o c√°o:", err);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSearch = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchTerm(value);
    const result = periods.filter(
      (p) =>
        p.ID.toLowerCase().includes(value) ||
        p.Name.toLowerCase().includes(value) ||
        p.TYPE.toLowerCase().includes(value)
    );
    setFiltered(result);
    setCurrentPage(1); // reset page
  };

  const handleDeactivate = async (period) => {
  const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën hu·ª∑ k√≠ch ho·∫°t k·ª≥ b√°o c√°o "${period.Name}"?`);
  if (!confirmed) return;

  try {
    const token = localStorage.getItem("admin_token");
    const res = await axios.put(`/period/${period.ID}`, {
      Name: period.Name,
      Status: "INACTIVE",
      XaStatus: "INACTIVE",
      Killer: "Admin",
    }, {
      headers: { Authorization: `Bearer ${token}` },
    });

    alert("‚úÖ ƒê√£ hu·ª∑ k√≠ch ho·∫°t k·ª≥ b√°o c√°o.");
    fetchData(); // reload l·∫°i danh s√°ch
  } catch (err) {
    alert("‚ùå L·ªói khi hu·ª∑ k√≠ch ho·∫°t: " + (err.response?.data?.detail || err.message));
  }
};
const handleReactivate = async (period) => {
  const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën k√≠ch ho·∫°t l·∫°i k·ª≥ b√°o c√°o "${period.Name}"?`);
  if (!confirmed) return;

  try {
    const token = localStorage.getItem("admin_token");
    const res = await axios.put(`/period/${period.ID}`, {
      Name: period.Name,
      Status: "Active",
      XaStatus: "Active",
      Killer: "Admin",
    }, {
      headers: { Authorization: `Bearer ${token}` },
    });

    alert("‚úÖ ƒê√£ k√≠ch ho·∫°t l·∫°i k·ª≥ b√°o c√°o.");
    fetchData(); // reload l·∫°i danh s√°ch
  } catch (err) {
    alert("‚ùå L·ªói khi k√≠ch ho·∫°t l·∫°i: " + (err.response?.data?.detail || err.message));
  }
};

  const pageCount = Math.ceil(filtered.length / PAGE_SIZE);
  const currentData = filtered.slice((currentPage - 1) * PAGE_SIZE, currentPage * PAGE_SIZE);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Danh s√°ch k·ª≥ b√°o c√°o</h2>
      <div className="mb-3">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo ID, T√™n ho·∫∑c Lo·∫°i"
          className="border p-2 w-full"
          value={searchTerm}
          onChange={handleSearch}
        />
      </div>

      <div className="overflow-x-auto">
        <table className="w-full text-sm border">
          <thead className="bg-gray-100 text-xs">
  <tr>
    <th className="border px-2 py-1 w-20">ID</th>
    <th className="border px-2 py-1 w-40">T√™n</th>
    <th className="border px-2 py-1 w-24">Lo·∫°i</th>
    <th className="border px-2 py-1 w-48">Active ‚Üí Deactive</th>
    <th className="border px-2 py-1 w-40">Start ‚Üí End</th>
    <th className="border px-2 py-1 w-40">From ‚Üí To</th>
    <th className="border px-2 py-1 w-48">XaActive ‚Üí XaDeactive</th>
    <th className="border px-2 py-1 w-40">XaStart ‚Üí XaEnd</th>
    <th className="border px-2 py-1 w-40">XaFrom ‚Üí XaTo</th>
    <th className="border px-2 py-1 w-24">Tr·∫°ng th√°i</th>
    <th className="border px-2 py-1 w-16">#BC</th>
    <th className="border px-2 py-1 w-28">Thao t√°c</th>
  </tr>
          </thead>
          <tbody>
            {currentData.map((p) => (
              <tr
                key={p.ID}
                className="hover:bg-gray-50 text-xs cursor-pointer"
                onDoubleClick={() => {
                  setSelectedPeriodId(p.ID);
                  setActiveTab("summary");
                }}
              >
                <td className="border px-2 py-1">{p.ID}</td>
                <td className="border px-2 py-1">{p.Name}</td>
                <td className="border px-2 py-1">{p.TYPE}</td>
                <td className="border px-2 py-1">{new Date(p.ActiveAt).toLocaleString()} ‚Üí {new Date(p.DeactiveAt).toLocaleString()}</td>
                <td className="border px-2 py-1">{new Date(p.StartAt).toLocaleTimeString()} ‚Üí {new Date(p.EndAt).toLocaleTimeString()}</td>
                <td className="border px-2 py-1">{new Date(p.FromAt).toLocaleTimeString()} ‚Üí {new Date(p.ToAt).toLocaleTimeString()}</td>
                <td className="border px-2 py-1">{new Date(p.XaActiveAt).toLocaleString()} ‚Üí {new Date(p.XaDeactiveAt).toLocaleString()}</td>
                <td className="border px-2 py-1">{new Date(p.XaStartAt).toLocaleTimeString()} ‚Üí {new Date(p.XaEndAt).toLocaleTimeString()}</td>
                <td className="border px-2 py-1">{new Date(p.XaFromAt).toLocaleTimeString()} ‚Üí {new Date(p.XaToAt).toLocaleTimeString()}</td>
                <td className="border px-2 py-1 text-center">{p.Status} / {p.XaStatus}</td>
                <td className="border px-2 py-1 text-center">{p.reportCount}</td>
                <td className="border px-2 py-1 text-center space-x-1">
                {p.Status === "Active" || p.XaStatus === "Active" ? (
                  <button
                    className="text-red-600 hover:underline text-xs"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeactivate(p);
                    }}
                  >
                    Hu·ª∑ k√≠ch ho·∫°t
                  </button>
                ) : (
                  <button
                    className="text-green-600 hover:underline text-xs"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleReactivate(p);
                    }}
                  >
                    K√≠ch ho·∫°t l·∫°i
                  </button>
                )}
              </td>

              </tr>
            ))}
          </tbody>


        </table>
            <div className="mt-2 flex justify-center items-center">
  <div className="flex items-center gap-2">
    <button
      className="px-3 py-1 border rounded hover:bg-gray-200"
      disabled={currentPage === 1}
      onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
    >
      ‚Üê Tr∆∞·ªõc
    </button>
    <span>Trang:</span>
    <input
      type="number"
      min={1}
      max={pageCount}
      value={currentPage}
      onChange={(e) =>
        setCurrentPage(
          Math.min(pageCount, Math.max(1, Number(e.target.value)))
        )
      }
      className="border px-2 py-1 w-16 rounded"
    />
    <button
      className="px-3 py-1 border rounded hover:bg-gray-200"
      disabled={currentPage === pageCount}
      onClick={() => setCurrentPage((p) => Math.min(p + 1, pageCount))}
    >
      Sau ‚Üí
    </button>
    <span className="text-sm text-gray-500 ml-2">T·ªïng: {pageCount} trang</span>
  </div>
</div>
        {filtered.length === 0 && (
          <p className="text-center mt-4 text-gray-500">Kh√¥ng t√¨m th·∫•y k·ª≥ b√°o c√°o n√†o.</p>
        )}
      </div>
    </div>
  );
};

export default PeriodManager;


===== FILE: frontend/src\pages\ReportHistory.jsx =====
import React, { useEffect, useState } from "react";
import axios from "../services/api";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

const ReportHistory = () => {
  const [reports, setReports] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;
  
  const [filters, setFilters] = useState({
  Sender: "",
  ReportPeriodName: "",
  Blake3sum: "",
  OriFileName: "",
  SentAt: "",
  Comment: "",
});
  const filteredReports = reports.filter((r) =>
    Object.entries(filters).every(([key, value]) =>
      r[key]?.toString().toLowerCase().includes(value.toLowerCase())
    )
  );
  const totalPages = Math.ceil(filteredReports.length / rowsPerPage);
  const paginatedReports = filteredReports.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );
  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (token) {
      axios
        .get("/report/reports", {
          headers: { Authorization: `Bearer ${token}` },
        })
        .then((res) => setReports(res.data))
        .catch((err) => console.error("L·ªói t·∫£i l·ªãch s·ª≠ b√°o c√°o:", err));
    }
  }, []);
  const handleExportExcel = () => {
  const data = reports.map((r) => ({
    "T√™n ƒë∆°n v·ªã": r.Sender,
    "T√™n k·ª≥ b√°o c√°o": r.ReportPeriodName,
    "Blake3sum": r.Blake3sum,
    "T√™n file": r.OriFileName,
    "Th·ªùi gian g·ª≠i": new Date(r.SentAt).toLocaleString("vi-VN"),
    "Ghi ch√∫": r.Comment || "",
    "C√≥ s·ª± ki·ªán": r.HasEvent ? "‚úì" : "",
    "Th·ªùi h·∫°n": r.LateSeconds === 0
      ? "ƒê√∫ng h·∫°n"
      : r.LateSeconds < 0
        ? `Tr∆∞·ªõc h·∫°n ${Math.abs(r.LateSeconds)} gi√¢y`
        : `Qu√° h·∫°n ${r.LateSeconds} gi√¢y`
  }));

  const worksheet = XLSX.utils.json_to_sheet(data);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "L·ªãch s·ª≠ b√°o c√°o");

  const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
  const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
  saveAs(blob, `lich_su_bao_cao_${new Date().toISOString().slice(0, 10)}.xlsx`);
};

  return (
  <div className="p-4 h-full overflow-hidden flex flex-col">
    <h2 className="text-2xl font-bold mb-4 text-center">L·ªäCH S·ª¨ B√ÅO C√ÅO</h2>
    
    <div className="flex-1 overflow-auto border rounded bg-white">
      <table className="table-auto w-full text-sm text-left border-collapse">
        <thead>
          <tr className="bg-gray-100 text-sm font-semibold">
            <th className="px-2 py-1">T√™n ƒë∆°n v·ªã</th>
            <th className="px-2 py-1">T√™n k·ª≥ b√°o c√°o</th>
            <th className="px-2 py-1">Blake3sum</th>
            <th className="px-2 py-1">T√™n file</th>
            <th className="px-2 py-1">Th·ªùi gian g·ª≠i</th>
            <th className="px-2 py-1">Ghi ch√∫</th>
            <th className="px-2 py-1">S·ª± ki·ªán</th>
            <th className="px-2 py-1">Th·ªùi h·∫°n</th>
          </tr>
          <tr className="bg-white text-xs">
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.Sender}
                onChange={(e) => setFilters({ ...filters, Sender: e.target.value })}
              />
            </th>
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.ReportPeriodName}
                onChange={(e) => setFilters({ ...filters, ReportPeriodName: e.target.value })}
              />
            </th>
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.Blake3sum}
                onChange={(e) => setFilters({ ...filters, Blake3sum: e.target.value })}
              />
            </th>
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.OriFileName}
                onChange={(e) => setFilters({ ...filters, OriFileName: e.target.value })}
              />
            </th>
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.SentAt}
                onChange={(e) => setFilters({ ...filters, SentAt: e.target.value })}
              />
            </th>
            <th>
              <input
                className="w-full border px-1 py-0.5 rounded"
                value={filters.Comment}
                onChange={(e) => setFilters({ ...filters, Comment: e.target.value })}
              />
            </th>
            <th></th>
            <th></th>
          </tr>
        </thead>

        <tbody>
          {paginatedReports.map((r) => (
            <tr key={r.ID} className="border-t">
              <td className="px-2 py-1 truncate">{r.Sender}</td>
              <td className="px-2 py-1 break-words">{r.ReportPeriodName}</td>
              <td className="px-2 py-1 break-all max-w-[150px]">
                {r.Blake3sum}
              </td>
              <td className="px-2 py-1 break-words">{r.OriFileName}</td>
              <td className="px-2 py-1">{new Date(r.SentAt).toLocaleString("vi-VN")}</td>
              <td className="px-2 py-1 break-words">{r.Comment || ""}</td>
              <td className="px-2 py-1 text-center">{r.HasEvent ? "‚úì" : ""}</td>
              <td className="px-2 py-1">
                {typeof r.LateSeconds === "number"
                  ? r.LateSeconds === 0
                    ? "ƒê√∫ng h·∫°n"
                    : r.LateSeconds < 0
                      ? `Tr∆∞·ªõc h·∫°n ${Math.abs(r.LateSeconds)} gi√¢y`
                      : `Qu√° h·∫°n ${r.LateSeconds} gi√¢y`
                  : ""}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
    <div className="mt-1 flex flex-wrap justify-center gap-5 mb-1">
      <div className="flex flex-wrap items-center gap-3">
        <button
          className="px-3 py-1 border rounded hover:bg-gray-200"
          disabled={currentPage === 1}
          onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
        >
          ‚Üê Tr∆∞·ªõc
        </button>
        <div className="flex items-center gap-2">
          Trang:
          <input
            type="number"
            value={currentPage}
            min={1}
            max={totalPages}
            onChange={(e) =>
              setCurrentPage(Math.min(totalPages, Math.max(1, Number(e.target.value))))
            }
            className="border px-2 py-1 w-16 rounded"
          />
          <button
            className="px-3 py-1 border rounded hover:bg-gray-200"
            onClick={() => setCurrentPage(currentPage)}
          >
            Go
          </button>
        </div>
        <button
          className="px-3 py-1 border rounded hover:bg-gray-200"
          disabled={currentPage === totalPages}
          onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
        >
          Sau ‚Üí
        </button>

        <span className="text-sm text-gray-500 ml-4">
          T·ªïng s·ªë trang: {totalPages}
        </span>
      </div>
      <button 
      onClick={handleExportExcel}
      className="bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700 mt-1 right-0">
        Xu·∫•t Excel
      </button>
    </div>
  </div>
);

};

export default ReportHistory;


===== FILE: frontend/src\pages\ReportSummary.jsx =====
import React, { useState, useEffect } from "react";
import axios from "../services/api";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { useContext } from "react";
import { DashboardContext } from "./AdminDashboard";


const ReportSummary = () => {
  const [reportTypes, setReportTypes] = useState([]);
  const [selectedType, setSelectedType] = useState("");
  const [periods, setPeriods] = useState([]);
  const [selectedPeriod, setSelectedPeriod] = useState(null);
  const [reports, setReports] = useState([]);
  const [totalReports, setTotalReports] = useState(0);
  const { selectedPeriodId } = useContext(DashboardContext);

  const token = localStorage.getItem("admin_token");

  const [currentPage, setCurrentPage] = useState(1);
    const [filters, setFilters] = useState({
    Sender: "",
    OriFileName: "",
    Comment: "",
    Blake3sum: "",
    });
    const rowsPerPage = 10;

    const filteredReports = reports.filter((r) =>
    Object.entries(filters).every(([key, value]) =>
        r[key]?.toString().toLowerCase().includes(value.toLowerCase())
    )
    );

const paginatedReports = filteredReports.slice(
  (currentPage - 1) * rowsPerPage,
  currentPage * rowsPerPage
);
const totalPages = Math.ceil(filteredReports.length / rowsPerPage);

  const handleExportExcel = () => {
  const data = reports.map((r) => ({
    "T√†i kho·∫£n": r.Sender,
    "G·ª≠i l√∫c": new Date(r.SentAt).toLocaleString("vi-VN"),
    "Tr·ªÖ (gi√¢y)": r.LateSeconds,
    "T√™n file": r.FileName,
    "C√≥ s·ª± ki·ªán": r.HasEvent ? "‚úì" : "",
    "Ghi ch√∫": r.Comment || "",
    "Blake3sum": r.Blake3sum,
  }));

  const worksheet = XLSX.utils.json_to_sheet(data);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Th·ªëng k√™ b√°o c√°o");

  const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
  const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
  saveAs(blob, `thong_ke_bao_cao_${new Date().toISOString().slice(0, 10)}.xlsx`);
};

  useEffect(() => {
    axios.get("/admin/loaibaocao", {
      headers: { Authorization: `Bearer ${token}` },
    })
    .then(res => {
    console.log("Loaibaocao response:", res.data);
      if (Array.isArray(res.data)) {
      setReportTypes(res.data);
      if (res.data.length > 0) setSelectedType(res.data[0].ID);
    } else {
      console.warn("D·ªØ li·ªáu loaibaocao kh√¥ng ph·∫£i m·∫£ng:", res.data);
    }
    });
  }, []);

  useEffect(() => {
  if (!selectedType) return;
  axios.get("/period", {
    headers: { Authorization: `Bearer ${token}` },
  }).then(res => {
    const filtered = res.data
      .filter(p => p.TYPE === selectedType)
      .sort((a, b) => new Date(b.ActiveAt) - new Date(a.ActiveAt))
      .slice(0, 10);
    setPeriods(filtered);
    if (selectedPeriodId) {
  const matchedPeriod = res.data.find(p => p.ID === selectedPeriodId);
  if (matchedPeriod) {
    setSelectedType(matchedPeriod.TYPE); // üü¢ c·∫≠p nh·∫≠t lo·∫°i b√°o c√°o
    setSelectedPeriod(matchedPeriod);
    setPeriods(res.data.filter(p => p.TYPE === matchedPeriod.TYPE));
    return;
  }
}
if (filtered.length > 0) {
  setSelectedPeriod(filtered[0]);
}
  });
}, [selectedType, selectedPeriodId]);

  useEffect(() => {
    if (!selectedPeriod) return;
    axios.get(`/report/admin/${selectedPeriod.ID}`, {
      headers: { Authorization: `Bearer ${token}` },
    }).then(res => {
      setReports(res.data);
      setTotalReports(res.data.length);
    });
  }, [selectedPeriod]);

const handleDownloadZip = async () => {
  if (!selectedPeriod) return;
  try {
    const response = await axios.get(`/report/download/${selectedPeriod.ID}`, {
      responseType: "blob",
      headers: { Authorization: `Bearer ${token}` },
    });
    const blob = new Blob([response.data], { type: "application/zip" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", `${selectedPeriod.ID}.zip`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    window.URL.revokeObjectURL(url);
  } catch (error) {
    alert("Kh√¥ng th·ªÉ t·∫£i file. B·∫°n c√≥ quy·ªÅn admin kh√¥ng?");
    console.error(error);
  }
};

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-xl font-bold">T·ªïng h·ª£p k·ª≥ b√°o c√°o</h1>

      {/* Ph·∫ßn I */}
      <div className="bg-white rounded-lg shadow p-4 space-y-4">
        <h2 className="text-lg font-semibold">I. Th√¥ng tin k·ª≥ b√°o c√°o</h2>
        <div className="flex space-x-4">
          <div>
            <label className="block font-medium">Lo·∫°i b√°o c√°o</label>
            <select className="border rounded p-1" value={selectedType} onChange={e => setSelectedType(e.target.value)}>
              {Array.isArray(reportTypes) && reportTypes.map(rt => (
                <option key={rt.ID} value={rt.ID}>{rt.Name}</option>
                ))}
            </select>
          </div>
          <div>
            <label className="block font-medium">K·ª≥ b√°o c√°o</label>
            <select className="border rounded p-1" value={selectedPeriod?.ID || ""} onChange={e => {
              const period = periods.find(p => p.ID === e.target.value);
              setSelectedPeriod(period);
            }}>
              {periods.map(p => (
                <option key={p.ID} value={p.ID}>{p.Name}</option>
              ))}
            </select>
          </div>
          {selectedPeriod && (<div key={"ID"}><b>{"ID"}:</b> {selectedPeriod?.ID ?? "-"}</div>)}
        </div>
        {selectedPeriod && (
          <div className="grid text-sm">
          <div className="grid grid-cols-2 md:grid-cols-2 gap-2 text-sm">
            <div><b>C·∫•p ph√≤ng:</b>
            <div key={"ActiveAt"}><b>{"K√≠ch ho·∫°t t·ª´"}:</b> {new Date(selectedPeriod["ActiveAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"DeactiveAt"}><b>{"Hu·ª∑ k√≠ch ho·∫°t"}:</b> {new Date(selectedPeriod["DeactiveAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"StartAt"}><b>{"H·∫°n nh·∫≠n t·ª´"}:</b> {new Date(selectedPeriod["StartAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"EndAt"}><b>{"H·∫øt h·∫°n"}:</b> {new Date(selectedPeriod["EndAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"Status"}><b>{"Tr·∫°ng th√°i"}:</b> {selectedPeriod["Status"] ?? "-"}</div>
            </div>
            <div><b>C·∫•p x√£:</b>
            <div key={"XaActiveAt"}><b>{"K√≠ch ho·∫°t t·ª´"}:</b> {new Date(selectedPeriod["XaActiveAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"XaDeactiveAt"}><b>{"Hu·ª∑ k√≠ch ho·∫°t"}:</b> {new Date(selectedPeriod["XaDeactiveAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"XaStartAt"}><b>{"H·∫°n nh·∫≠n t·ª´"}:</b> {new Date(selectedPeriod["XaStartAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"XaEndAt"}><b>{"H·∫øt h·∫°n"}:</b> {new Date(selectedPeriod["XaEndAt"]).toLocaleString("vi-VN") ?? "-"}</div>
            <div key={"XaStatus"}><b>{"Tr·∫°ng th√°i"}:</b> {selectedPeriod["XaStatus"] ?? "-"}</div>
            </div>
          </div>
            <div><b>T·ªïng s·ªë b√°o c√°o ƒë√£ g·ª≠i:</b> {totalReports}</div>
            <div><b>T·ªïng s·ªë b√°o c√°o ƒë√£ g·ª≠i c√≥ s·ª± ki·ªán:</b> {reports.filter(r => r.HasEvent).length}</div>
            <div><b>T·ªïng s·ªë b√°o c√°o ƒë√£ g·ª≠i kh√¥ng c√≥ s·ª± ki·ªán:</b> {reports.filter(r => !r.HasEvent).length}</div>
            <div><b>T·ªïng s·ªë b√°o c√°o ƒë√£ g·ª≠i ƒë√∫ng h·∫°n:</b> {reports.filter(r => r.LateSeconds === 0).length}</div>
            <div><b>T·ªïng s·ªë b√°o c√°o ƒë√£ g·ª≠i kh√¥ng ƒë√∫ng h·∫°n:</b> {reports.filter(r => r.LateSeconds < 0).length}</div>
            <div className="flex items-center space-x-2">
            <div key={"FolderPath"}><b>FolderPath:</b> {selectedPeriod["FolderPath"] ?? "-"}</div>
            <button
              className="bg-green-500 hover:bg-green-600 text-white text-sm px-3 py-1 rounded border"
              onClick={handleDownloadZip}
            >
              T·∫£i t·∫•t c·∫£ b√°o c√°o (.zip)
            </button>
            </div>
          </div>
        )}
      </div>

      {/* Ph·∫ßn II */}
      <div className="bg-white rounded-lg shadow p-4 overflow-x-auto">
        <h2 className="text-lg font-semibold mb-2">II. B·∫£ng th·ªëng k√™ b√°o c√°o</h2>
        <table className="min-w-full text-sm border">
          <thead className="bg-gray-100">
            <tr>
              <th className="border px-2 py-1">T√†i kho·∫£n</th>
              <th className="border px-2 py-1">G·ª≠i l√∫c</th>
              <th className="border px-2 py-1">Tr·ªÖ (gi√¢y)</th>
              <th className="border px-2 py-1">T√™n file</th>
              <th className="border px-2 py-1">C√≥ s·ª± ki·ªán</th>
              <th className="border px-2 py-1">Ghi ch√∫</th>
              <th className="border px-2 py-1 max-w-[200px]">Blake3sum</th>
            </tr>
            <tr className="bg-white text-xs">
            <th>
                <input
                className="w-full border px-1 py-0.5 rounded"
                placeholder="T√†i kho·∫£n"
                value={filters.Sender}
                onChange={(e) => setFilters({ ...filters, Sender: e.target.value })}
                />
            </th>
            <th></th>
            <th></th>
            <th>
                <input
                className="w-full border px-1 py-0.5 rounded"
                placeholder="T√™n file"
                value={filters.OriFileName}
                onChange={(e) => setFilters({ ...filters, OriFileName: e.target.value })}
                />
            </th>
            <th></th>
            <th>
                <input
                className="w-full border px-1 py-0.5 rounded"
                placeholder="Ghi ch√∫"
                value={filters.Comment}
                onChange={(e) => setFilters({ ...filters, Comment: e.target.value })}
                />
            </th>
            <th>
                <input
                className="w-full border px-1 py-0.5 rounded"
                placeholder="Blake3sum"
                value={filters.Blake3sum}
                onChange={(e) => setFilters({ ...filters, Blake3sum: e.target.value })}
                />
            </th>
            </tr>

          </thead>
          
          <tbody>
            {paginatedReports.map((r, i) => (
              <tr key={i} className="text-center">
                <td className="border px-2">{r.Sender}</td>
                <td className="border px-2">{new Date(r.SentAt).toLocaleString("vi-VN")}</td>
                <td className="border px-2">{r.LateSeconds ?? 0}</td>
                <td className="border px-2 max-w-[150px] truncate">{r.FileName}</td>
                <td className="border px-2">{r.HasEvent ? "‚úÖ" : "‚ùå"}</td>
                <td className="border px-2">{r.Comment ?? ""}</td>
                <td className="border px-2 max-w-[200px] truncate">{r.Blake3sum}</td>
              </tr>
            ))}
          </tbody>
        </table>
        <div className="mt-2 flex flex-wrap justify-between items-center">
        <div className="flex items-center gap-2">
            <button
            className="px-3 py-1 border rounded hover:bg-gray-200"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
            >
            ‚Üê Tr∆∞·ªõc
            </button>
            <span>Trang:</span>
            <input
            type="number"
            min={1}
            max={totalPages}
            value={currentPage}
            onChange={(e) =>
                setCurrentPage(Math.min(totalPages, Math.max(1, Number(e.target.value))))
            }
            className="border px-2 py-1 w-16 rounded"
            />
            <button
            className="px-3 py-1 border rounded hover:bg-gray-200"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
            >
            Sau ‚Üí
            </button>
            <span className="text-sm text-gray-500 ml-2">T·ªïng: {totalPages} trang</span>
        </div>
        <button
            onClick={handleExportExcel}
            className="bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700"
        >
            Xu·∫•t Excel
        </button>
        </div>

      </div>
    </div>
  );
};

export default ReportSummary;


===== FILE: frontend/src\pages\UploadReport.jsx =====
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../services/api";

const UploadReport = ({ period, user }) => {
  const renderTimeStatusMessage = () => {
    if (!reportData || reportData.Status !== "sent") return "";
    const late = reportData.LateSeconds;
    if (late === 0) return "‚Äì B·∫°n ƒë√£ g·ª≠i ƒë√∫ng h·∫°n";
    if (late < 0) return `‚Äì B·∫°n ƒë√£ g·ª≠i tr∆∞·ªõc h·∫°n ${Math.abs(late)} gi√¢y`;
    return `‚Äì B·∫°n ƒë√£ g·ª≠i qu√° h·∫°n ${late} gi√¢y`;
  };
  const [file, setFile] = useState(null);
  const [hasEvent, setHasEvent] = useState(false);
  const [timeStatus, setTimeStatus] = useState("");
  const [timeLeft, setTimeLeft] = useState("");
  const [buttonLabel, setButtonLabel] = useState("G·ª≠i");
  const [sending, setSending] = useState(false);
  const [sendMessage, setSendMessage] = useState("");
  const [reportData, setReportData] = useState(null);
  const [confirmResend, setConfirmResend] = useState(false);
  const [pendingSend, setPendingSend] = useState(false);

  const navigate = useNavigate();

  const fetchReportStatus = async () => {
    try {
      const token = localStorage.getItem("access_token");
      const res = await axios.get(`/report/${period?.ID}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setReportData(res.data);
      setButtonLabel(res.data.Status === "sent" ? "G·ª≠i l·∫°i" : "G·ª≠i");
    } catch (err) {
      if (err.response?.status === 401) {
        localStorage.removeItem("access_token");
        navigate("/login/branch");
      }
      console.error("L·ªói khi l·∫•y tr·∫°ng th√°i b√°o c√°o:", err);
    }
  };

  const handleSend = async () => {
    if (!file) return alert("Vui l√≤ng ch·ªçn file tr∆∞·ªõc khi g·ª≠i!");
    const formData = new FormData();
    formData.append("file", file);
    formData.append("period_id", period?.ID);
    formData.append("has_event", hasEvent);

    const now = new Date();
    const start = new Date(user?.level === "CAPXA" ? period?.XaStartAt : period?.StartAt);
    const end = new Date(user?.level === "CAPXA" ? period?.XaEndAt : period?.EndAt);

    const getStatusText = () => {
      if (now < start) return `tr∆∞·ªõc h·∫°n ${Math.floor((start - now) / 60000)} ph√∫t`;
      if (now > end) return `qu√° h·∫°n ${Math.floor((now - end) / 60000)} ph√∫t`;
      return "ƒë√∫ng h·∫°n";
    };

    try {
      setSending(true);
      setSendMessage("");
      const token = localStorage.getItem("access_token");
      await axios.post("/report/upload", formData, {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });
      const sentTime = now.toLocaleString("vi-VN");
      const timeStatusText = getStatusText();
      setSendMessage(`‚úÖ ƒê√£ g·ª≠i l√∫c ${sentTime} ‚Äì B·∫°n ƒë√£ g·ª≠i ${timeStatusText}`);
      await fetchReportStatus(); // c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ backend
    } catch (err) {
      if (err.response?.status === 401) {
        localStorage.removeItem("access_token");
        navigate("/login/branch");
        return;
      }
      console.error("L·ªói g·ª≠i b√°o c√°o:", err);
      setSendMessage("‚ùå G·ª≠i b√°o c√°o th·∫•t b·∫°i.");
    } finally {
      setSending(false);
    }
  };

  const onSendClick = () => {
  if (reportData?.Status === "sent") {
    setConfirmResend(true);  // hi·ªÉn th·ªã popup x√°c nh·∫≠n
  } else {
    handleSend();  // g·ª≠i ngay n·∫øu ch∆∞a g·ª≠i l·∫ßn n√†o
  }
};

  const formatDuration = (ms) => {
    const totalSeconds = Math.floor(Math.abs(ms) / 1000);
    const days = Math.floor(totalSeconds / 86400);
    const hours = Math.floor((totalSeconds % 86400) / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    return `${days} ng√†y ${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y`;
  };

  useEffect(() => {
    if (period?.ID) fetchReportStatus();

    const isXa = user?.level === "CAPXA";
    const rawStart = isXa ? period?.XaStartAt : period?.StartAt;
    const rawEnd = isXa ? period?.XaEndAt : period?.EndAt;

    const startTime = new Date(rawStart);
    const endTime = new Date(rawEnd);

    const updateTime = () => {
      const now = new Date();
      if (now < startTime) {
        setTimeStatus("Ch∆∞a ƒë·∫øn h·∫°n");
        setTimeLeft(formatDuration(startTime - now));
      } else if (now >= startTime && now <= endTime) {
        setTimeStatus("ƒê√∫ng h·∫°n");
        setTimeLeft(formatDuration(endTime - now));
      } else {
        setTimeStatus("Qu√° h·∫°n");
        setTimeLeft(formatDuration(now - endTime));
      }
    };

    updateTime();
    const interval = setInterval(updateTime, 1000);
    return () => clearInterval(interval);
  }, [period, user]);

  return (
    <div className="bg-white p-6 rounded-xl shadow-md">
      <h2 className="text-lg font-bold text-center text-gray-800 uppercase mb-4">
        {period?.Name || "B√ÅO C√ÅO"}
      </h2>

      <div className="text-sm mb-2">
        <span className="font-semibold">G·ª≠i ƒë·∫øn: </span>
        <span className={sendMessage.includes("ƒë√∫ng h·∫°n") ? "text-green-600 font-semibold" : "text-yellow-600 font-semibold"}>
          Trung t√¢m th√¥ng tin ch·ªâ huy - Ph√≤ng Tham m∆∞u - C√¥ng an t·ªânh Qu·∫£ng B√¨nh
        </span>
      </div>

      <div className="flex items-center gap-4 mb-2">
        <label className="font-semibold text-sm">File b√°o c√°o ƒë√≠nh k√®m</label>
        <input
          type="file"
          id="upload"
          onChange={(e) => setFile(e.target.files[0])}
          className="hidden"
        />
        <label htmlFor="upload" className="px-4 py-1 bg-orange-500 text-white rounded cursor-pointer">
          T·∫£i l√™n
        </label>
        <span className="text-sm text-gray-700">{file?.name || "<ch∆∞a c√≥ file>"}</span>
      </div>

      {period?.ID?.toUpperCase().startsWith("DAILY") && (
        <div className="flex items-center mb-4">
          <input
            type="checkbox"
            id="hasEvent"
            className="mr-2"
            checked={hasEvent}
            onChange={(e) => setHasEvent(e.target.checked)}
          />
          <label htmlFor="hasEvent" className="text-sm">C√≥ t√¨nh h√¨nh ƒë√°ng ch√∫ √Ω</label>
        </div>
      )}

      <div className="text-sm mb-2">
        <span className="font-semibold">Th·ªùi gian:</span>{" "}
        <span className={
          timeStatus === "ƒê√∫ng h·∫°n" ? "text-green-600 font-semibold" :
          "text-red-600 font-semibold"
        }>
          {timeStatus}
        </span>{" "}
        <span className="text-gray-800">{timeLeft}</span>
      </div>

      <div className="text-sm mb-4">
        <span className="font-semibold">Tr·∫°ng th√°i:</span>{" "}
        {reportData?.Status === "sent" ? (
          <span className={
            timeStatus === "ƒê√∫ng h·∫°n" ? "text-green-600 font-semibold" : "text-red-600 font-semibold"
          }>
            ƒê√£ g·ª≠i l√∫c {new Date(reportData.SentAt).toLocaleString("vi-VN")} {renderTimeStatusMessage()}
          </span>
        ) : (
          <span className="text-gray-500">Ch∆∞a g·ª≠i</span>
        )}
      </div>

      {sendMessage && (
        <div className="text-sm text-center mb-2" style={{ color: sendMessage.includes("‚úÖ") ? (sendMessage.includes("ƒê√∫ng h·∫°n") ? "green" : "red") : "red" }}>
          {sendMessage}
        </div>
      )}
      {confirmResend && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-md w-[400px]">
            <p className="text-gray-800 font-semibold mb-4">
              File b√°o c√°o ƒë√£ g·ª≠i s·∫Ω b·ªã xo√° v√† th·ªùi gian g·ª≠i t√≠nh t·ª´ l√∫c n√†y.
            </p>
            <div className="flex justify-end gap-3">
              <button
                className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
                onClick={() => setConfirmResend(false)}
              >
                Hu·ª∑
              </button>
              <button
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                onClick={() => {
                  setConfirmResend(false);
                  handleSend();  // g·ª≠i l·∫°i
                }}
              >
                Ti·∫øp t·ª•c g·ª≠i
              </button>
            </div>
          </div>
        </div>
      )}
      <div className="text-center mt-4">
        <button
          onClick={onSendClick}
          className="bg-blue-600 text-white font-semibold px-6 py-2 rounded hover:bg-blue-700"
        >
          {sending ? "ƒêang g·ª≠i..." : buttonLabel}
        </button>
      </div>
    </div>
  );
};

export default UploadReport;


===== FILE: frontend/src\pages\UserDashboard.jsx =====
import React, { useEffect, useState } from "react";
import { getActivePeriods } from "../services/periodService";
import { getTokenInfo } from "../utils/auth";
import UploadReport from "./UploadReport";
import { useNavigate } from "react-router-dom";
import logo from "/logo.png";
import iconUser from "/icon_user.png";
import iconBell from "/icon_bell.png";
import DropdownMenu from "../components/DropdownMenu";
import axios from "../services/api"; // b·ªï sung n·∫øu thi·∫øu
import ReportHistory from "./ReportHistory";
import ChangePassword from "./ChangePassword";
import AccountInfo from "./AccountInfo";

const UserDashboard = () => {
  const [periods, setPeriods] = useState([]);
  const [selectedPeriod, setSelectedPeriod] = useState(null);
  const [reportStatus, setReportStatus] = useState("");
  const [reportTime, setReportTime] = useState("");
  const [reportStatusMap, setReportStatusMap] = useState({});
  const [countdownMap, setCountdownMap] = useState({});
  const [showHistory, setShowHistory] = useState(false);
  const [showChangePassword, setShowChangePassword] = useState(false);
  const [showAccountInfo, setShowAccountInfo] = useState(false);


  const navigate = useNavigate();
  const user = getTokenInfo();
  useEffect(() => {
  const updateCountdowns = () => {
    const updated = {};
    const now = new Date();

    periods.forEach((p) => {
      const start = new Date(p.StartAt);
      const end = new Date(p.EndAt);
      const diff = Math.abs(now < start ? start - now : now > end ? now - end : end - now);
      const s = Math.floor(diff / 1000) % 60;
      const m = Math.floor(diff / 60000) % 60;
      const h = Math.floor(diff / 3600000) % 24;
      const d = Math.floor(diff / 86400000);
      const formatted = `${d}:${h}:${m}:${s}`;
      const status = now < start
        ? `   Ch∆∞a ƒë·∫øn h·∫°n (${formatted})`
        : now > end
          ? `   Qu√° h·∫°n (${formatted})`
          : `    ƒê√∫ng h·∫°n (${formatted})`;
      updated[p.ID] = status;
    });

    setCountdownMap(updated);
  };

  updateCountdowns();
  const interval = setInterval(updateCountdowns, 1000);
  return () => clearInterval(interval);
}, [periods]);

  useEffect(() => {
    if (!user) {
      navigate("/login/branch");
    } else {
      fetchPeriods(user.token);
    }
  }, []);

  const fetchAllReportStatuses = async (periodList, token) => {
    const updatedMap = {};
    console.log("üü¢ Fetching report statuses for periods:", periodList);
    for (const p of periodList) {
      try {
        console.log("üì® Fetching report status for period:", p.ID);
        const res = await axios.get(`/report/${p.ID}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        console.log("‚úÖ Report status response:", res.data);
        updatedMap[p.ID] = res.data;
      } catch (err) {
        console.error(`‚ùå L·ªói khi fetch tr·∫°ng th√°i k·ª≥ ${p.ID}:`, err);
        updatedMap[p.ID] = { Status: "not_sent" };
      }
    }
    setReportStatusMap(updatedMap);
    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t reportStatusMap:", updatedMap);
  };

  const fetchPeriods = async (token) => {
    try {
      const res = await getActivePeriods(token);
      setPeriods(res.data);
      console.log("üìå ƒê√£ g·ªçi setPeriods v·ªõi:", res.data);
      if (res.data.length > 0) setSelectedPeriod(res.data[0]);
    } catch (err) {
      console.error("L·ªói t·∫£i k·ª≥ b√°o c√°o:", err);
    }
  };

  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (periods.length > 0 && token) {
      console.log("üü° G·ªçi fetchAllReportStatuses t·ª´ useEffect sau khi setPeriods:", periods);
      fetchAllReportStatuses(periods, token);
    }
  }, [periods]);

  return (
    <div className="bg-[#eef4fb] min-h-screen flex flex-col">
      {/* Header */}
      <div className="flex justify-between items-center px-6 py-3 bg-[#eaf7f5] shadow">
        <div className="flex items-center space-x-3">
          <img src={logo} alt="logo" className="w-8 h-8" />
          <h1 className="text-[#0d2d52] font-bold text-lg">
            H·ªá th·ªëng b√°o c√°o C√¥ng an t·ªânh Qu·∫£ng B√¨nh
          </h1>
        </div>
        <div className="flex items-center space-x-4">
          <img src={iconBell} alt="bell" className="w-5 h-5" />
          <div className="text-right text-sm text-[#0d2d52]">
            <div className="font-semibold">{user?.name || "T√™n ƒë∆°n v·ªã"}</div>
            <div className="text-xs">{user?.username}</div>
          </div>
          <DropdownMenu
            onLogout={() => {
              localStorage.removeItem("access_token");
              localStorage.removeItem("remember_branch");
              navigate("/login/branch");
            }}
            onChangePassword={() => {
              setShowChangePassword(true);
              setShowHistory(false);
              setShowAccountInfo(false);
            }}
            onShowAccountInfo={() => {
              setShowAccountInfo(true);
              setShowChangePassword(false);
              setShowHistory(false);
            }}
          />
        </div>
      </div>

      <div className="flex flex-1">
        {/* Sidebar */}
        <div className="w-[280px] bg-white p-3 shadow-inner border-r overflow-y-auto">
          {periods.map((p) => (
            <div
                key={p.ID}
                onClick={() => {
                  setSelectedPeriod(p);
                  setShowHistory(false);  // ‚úÖ ·∫®n trang l·ªãch s·ª≠ n·∫øu ƒëang hi·ªÉn th·ªã
                  setShowChangePassword(false);
                  setShowAccountInfo(false);  // ‚úÖ b·ªï sung d√≤ng n√†y
                }}
              className={`p-3 rounded-lg mb-3 cursor-pointer ${
                selectedPeriod?.ID === p.ID
                  ? "bg-blue-100 border border-blue-400"
                  : "bg-gray-100 hover:bg-gray-200"
              }`}
            >
              <div className="font-semibold text-blue-800 text-sm">{p.Name}</div>
              <div className="text-xs text-gray-600">
                üïì{new Date(p.StartAt).toLocaleString("vi-VN", { day: "2-digit", month: "2-digit", year: "numeric", hour: "2-digit", minute: "2-digit" })} ‚Äì {new Date(p.EndAt).toLocaleString("vi-VN", { day: "2-digit", month: "2-digit", year: "numeric", hour: "2-digit", minute: "2-digit" })}
                <br />
                <span className="font-semibold text-xs">
                  {countdownMap[p.ID]}
                </span>
              </div>

              {reportStatusMap[p.ID] && (
                <div className={
                  reportStatusMap[p.ID]?.LateSeconds === 0
                    ? "text-green-600 text-xs mt-1 font-medium"
                    : reportStatusMap[p.ID]?.LateSeconds > 0
                      ? "text-red-600 text-xs mt-1 font-medium"
                      : reportStatusMap[p.ID]?.LateSeconds < 0
                        ? "text-red-600 text-xs mt-1 font-medium"
                        : "text-gray-600 text-xs mt-1 font-medium"
                }>
                  üì§ {
                        reportStatusMap[p.ID]?.Status === "sent" ? (
                          <>
                            ƒê√£ g·ª≠i l√∫c {new Date(reportStatusMap[p.ID]?.SentAt).toLocaleString("vi-VN", {
                              day: "2-digit", month: "2-digit", year: "numeric",
                              hour: "2-digit", minute: "2-digit", second: "2-digit"
                            })}
                            <br />
                            {
                              typeof reportStatusMap[p.ID]?.LateSeconds === "number"
                                ? reportStatusMap[p.ID].LateSeconds === 0
                                  ? "  ƒê√∫ng h·∫°n"
                                  : reportStatusMap[p.ID].LateSeconds < 0
                                    ? `  Tr∆∞·ªõc h·∫°n ${Math.abs(reportStatusMap[p.ID].LateSeconds)} gi√¢y`
                                    : `  Qu√° h·∫°n ${reportStatusMap[p.ID].LateSeconds} gi√¢y`
                                : ""
                            }
                          </>
                        ) : "Ch∆∞a g·ª≠i"
                      }
                </div>
              )}
            </div>
          ))}
          <div
            onClick={() => setShowHistory(true)}
            className="p-2 rounded bg-gray-300 text-sm font-semibold text-center cursor-pointer hover:bg-gray-400"
          >
            L·ªãch s·ª≠ b√°o c√°o
          </div>
        </div>

        {/* N·ªôi dung ch√≠nh */}
        <div className="flex-1 p-6 mb-20">
          <h2 className="text-lg font-bold text-[#0d2d52] mb-4">
            {user?.name || "T√™n ƒë∆°n v·ªã"}
          </h2>
          {showAccountInfo ? (
            <AccountInfo token={localStorage.getItem("access_token")} />
          ) : showChangePassword ? (
            <ChangePassword />
          ) : showHistory ? (
            <ReportHistory user={user} />
          ) : selectedPeriod ? (
            <UploadReport
              period={selectedPeriod}
              reportStatus={reportStatus}
              reportTime={reportTime}
              user={user}
            />
          ) : (
            <div className="text-center text-gray-500">Kh√¥ng c√≥ k·ª≥ b√°o c√°o n√†o ƒëang k√≠ch ho·∫°t.</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UserDashboard;


===== FILE: frontend/src\router\router.jsx =====
import { createBrowserRouter } from "react-router-dom";
import LoginBranch from "../pages/LoginBranch";
import LoginAdmin from "../pages/LoginAdmin";
import UserDashboard from "../pages/UserDashboard"; // üÜï Th√™m d√≤ng n√†y
import AdminDashboard from "../pages/AdminDashboard"; // üÜï Th√™m d√≤ng n√†y
export const router = createBrowserRouter([
  {
    path: "/",
    element: <LoginBranch />,
  },
  {
    path: "/login/branch",
    element: <LoginBranch />,
  },
  {
    path: "/login/admin",
    element: <LoginAdmin />,
  },
  {
    path: "/user/dashboard", // üÜï Route m·ªõi cho chi nh√°nh sau khi ƒëƒÉng nh·∫≠p
    element: <UserDashboard />,
  },
  {
    path: "/admin/dashboard", // üÜï Route m·ªõi cho chi nh√°nh sau khi ƒëƒÉng nh·∫≠p
    element: <AdminDashboard />,
  },
]);


===== FILE: frontend/src\services\api.js =====
import axios from "axios";
const API = window.__ENV__?.VITE_API_BASE_URL || "https://localhost:8000";


const instance = axios.create({
  baseURL: `${API}`, // ho·∫∑c URL th·∫≠t khi deploy
  headers: {
    "Content-Type": "application/json",
  },
});

export default instance;

===== FILE: frontend/src\services\periodService.js =====
// frontend/src/services/periodService.js

import axios from "./api";

export const getActivePeriods = (token) => {
  return axios.get("/period/active", {
    headers: { Authorization: `Bearer ${token}` },
  });
};


===== FILE: frontend/src\services\requestService.js =====

import axios from "./api";

export const getMyReportRequests = (token) =>
  axios.get("/report/request/my", {
    headers: { Authorization: `Bearer ${token}` }
  });


===== FILE: frontend/src\services\userService.js =====

import axios from "./api";

export const fetchUsers = (token) =>
  axios.get("/admin/user", {
    headers: { Authorization: `Bearer ${token}` }
  });

export const createUser = (data, token) =>
  axios.post("/admin/user", data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const updateUser = (id, data, token) =>
  axios.put(`/admin/user/${id}`, data, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const deleteUser = (id, token) =>
  axios.delete(`/admin/user/${id}`, {
    headers: { Authorization: `Bearer ${token}` }
  });


===== FILE: frontend/src\utils\auth.js =====
// frontend/src/utils/auth.js

export const getTokenInfo = () => {
  const token = localStorage.getItem("access_token");
  const user = localStorage.getItem("user");

  if (!token || !user) return null;

  try {
    return {
      token,
      ...JSON.parse(user),
    };
  } catch (err) {
    console.error("Invalid user data in localStorage", err);
    return null;
  }
};


===== FILE: frontend/src\utils\unapi.js =====
import axios from "axios";
const API = import.meta.env.VITE_API_BASE_URL;

const token = localStorage.getItem("token");

const api = axios.create({
  baseURL: `${API}:8000`,  // ch·ªânh theo backend
  headers: {
    Authorization: `Bearer ${token}`,
  },
});

export default api;

