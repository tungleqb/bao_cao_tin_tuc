# spec_loaibaocao.txt (c·∫≠p nh·∫≠t 28/04/2025)

# ƒê·∫∑c t·∫£ c·∫•u tr√∫c **LoaiBaoCao**

> T√†i li·ªáu n·ªôi b·ªô - d·ª± √°n **H·ªá th·ªëng b√°o c√°o tin t·ª©c**

---

## 1. M·ª•c ƒë√≠ch

M√¥ t·∫£ chu·∫©n d·ªØ li·ªáu cho b·∫£ng **`LoaiBaoCao`**:

- ƒê·ªìng b·ªô backend ‚Üî frontend;
- H·ªó tr·ª£ Scheduler t·ª± ƒë·ªông t·∫°o/hu·ª∑ k·ª≥;
- H·ªó tr·ª£ qu·∫£n l√Ω 2 c·∫•p chi nh√°nh: `CAPPHONG` v√† `CAPXA`;
- T√†i li·ªáu b·∫£o tr√¨ m√£ ngu·ªìn sau n√†y.


## 2. C√°c tr∆∞·ªùng d·ªØ li·ªáu

| Tr∆∞·ªùng | Ki·ªÉu | B·∫Øt bu·ªôc | M√¥ t·∫£ | M·∫∑c ƒë·ªãnh |
|--------|------|----------|-------|------------------|
| ID | string | ‚úì | M√£ ƒë·ªãnh danh | - |
| DateCreated | datetime | ‚úì | Th·ªùi ƒëi·ªÉm t·∫°o | now() |
| Name | string | ‚úì | T√™n lo·∫°i b√°o c√°o | - |
| Period_ID | enum | ‚úì | Chu k·ª≥: DAILY, WEEKLY, MONTHLY, NONE | NONE |
| ActiveOn / DeactiveOn | int | ‚úì | Ng√†y/th·ª© cho ph√©p g·ª≠i - CAPPHONG | 0 |
| ActiveAt / DeactiveAt | time | ‚úì | Gi·ªù cho ph√©p g·ª≠i - CAPPHONG | 00:00:00 / 23:59:59 |
| StartOn / EndOn | int | ‚úì | Ng√†y/th·ª© ƒë√∫ng h·∫°n - CAPPHONG | 0 |
| StartAt / EndAt | time | ‚úì | Gi·ªù ƒë√∫ng h·∫°n - CAPPHONG | - |
| FromOn / ToOn | int | ‚úì | Ng√†y/th·ª© l·∫•y s·ªë li·ªáu - CAPPHONG | 0 |
| From / To | time | ‚úì | Gi·ªù l·∫•y s·ªë li·ªáu - CAPPHONG | 00:00:00 / 23:59:59 |
| ActiveOffset / DeactiveOffset | int | √ó | K·ª≥ l·ªách - CAPPHONG | 0 |
| StartOffset / EndOffset | int | √ó | K·ª≥ l·ªách ƒë√∫ng h·∫°n - CAPPHONG | 0 |
| FromOffset / ToOffset | int | √ó | K·ª≥ l·ªách l·∫•y s·ªë li·ªáu - CAPPHONG | 0 |
| XaActiveOn / XaDeactiveOn | int | √ó | Ng√†y/th·ª© cho ph√©p g·ª≠i - CAPXA | 0 |
| XaActiveAt / XaDeactiveAt | time | √ó | Gi·ªù cho ph√©p g·ª≠i - CAPXA | 00:00:00 / 23:59:59 |
| XaStartOn / XaEndOn | int | √ó | Ng√†y/th·ª© ƒë√∫ng h·∫°n - CAPXA | 0 |
| XaStartAt / XaEndAt | time | √ó | Gi·ªù ƒë√∫ng h·∫°n - CAPXA | - |
| XaFromOn / XaToOn | int | √ó | Ng√†y/th·ª© l·∫•y s·ªë li·ªáu - CAPXA | 0 |
| XaFrom / XaTo | time | √ó | Gi·ªù l·∫•y s·ªë li·ªáu - CAPXA | 00:00:00 / 23:59:59 |
| XaActiveOffset / XaDeactiveOffset | int | √ó | K·ª≥ l·ªách - CAPXA | 0 |
| XaStartOffset / XaEndOffset | int | √ó | K·ª≥ l·ªách ƒë√∫ng h·∫°n - CAPXA | 0 |
| XaFromOffset / XaToOffset | int | √ó | K·ª≥ l·ªách l·∫•y s·ªë li·ªáu - CAPXA | 0 |
| DocExtList | string | √ó | ƒêu√¥i file h·ª£p l·ªá | .doc .docx .pdf .bm2 .jpg .xlsx .xls |
| MaxSize | string | √ó | K√≠ch th∆∞·ªõc t·ªëi ƒëa file | 100MB |
| NextAt | datetime | √ó | L·∫ßn scheduler ti·∫øp theo | - |

---
> **Ghi ch√∫**:¬†C√°c tr∆∞·ªùng `*Offset` th√™m v√†o ƒë·ªÉ bi·ªÉu di·ªÖn m·ªëc l·ªách qua k·ª≥ tr∆∞·ªõc/sau, ƒë√°p ·ª©ng y√™u c·∫ßu m·ªëc ‚Äú14 th√°ng tr∆∞·ªõc ‚Üí 14 th√°ng n√†y‚Äù, ‚ÄúTh·ª©¬†T∆∞ tu·∫ßn tr∆∞·ªõc¬†‚Üí¬†Th·ª©¬†T∆∞ tu·∫ßn n√†y‚Äù‚Ä¶
CAPXA d√πng nh√≥m tr∆∞·ªùng Xa*.
---

## 3. Quy ∆∞·ªõc gi√° tr·ªã

* **`Period_ID = DAILY`**: `*On` = '0'. `*Offset` t√≠nh theo ng√†y.
* **`Period_ID = NONE`**: `*Offset` lu√¥n l√† '0', `*On` l√† ng√†y th√°ng nƒÉm c·ª• th·ªÉ. Kh√¥ng l·∫∑p theo chu k·ª≥.
* **`Period_ID = WEEKLY`**:¬†`*On` mang gi√° tr·ªã **ISO** th·ª© trong tu·∫ßn (`1 = Monday`¬†‚Üí¬†`7 = Sunday`).
* **`Period_ID = MONTHLY`**:¬†`*On` = ng√†y trong th√°ng (`1‚Äì31`).
* Scheduler s·ª≠ d·ª•ng timezone m√°y ch·ªß (UTC¬†+07¬†ƒë·ªëi v·ªõi server VN). T·∫•t c·∫£ `time` l∆∞u ·ªü ƒë·ªãnh d·∫°ng `HH:MM:SS` 24¬†h.

---

## 4. C√¥ng th·ª©c d·ª±ng m·ªëc th·ªùi gian

### üéØ M·ª•c ti√™u:
Chuy·ªÉn c√°c th√¥ng s·ªë c·∫•u h√¨nh trong b·∫£ng `LoaiBaoCao` (tr∆∞·ªùng `*Offset`, `*On`, `*At`) th√†nh c√°c `datetime` ch√≠nh x√°c d√πng ƒë·ªÉ t·∫°o `K·ª≥ b√°o c√°o` theo t·ª´ng chu k·ª≥ `DAILY`, `WEEKLY`, `MONTHLY`, `NONE`.
---

### üß† Nguy√™n t·∫Øc quy ∆∞·ªõc

| Period_ID   | √ù nghƒ©a Offset | √ù nghƒ©a On                | Quy ƒë·ªïi c·ª• th·ªÉ                 |
|-------------|----------------|---------------------------|--------------------------------|
| `DAILY`     | S·ªë ng√†y l·ªách   | S·ªë ng√†y c·ªông th√™m (th∆∞·ªùng l√† `0`) | D√πng `base_date + offset + on` |
| `WEEKLY`    | S·ªë tu·∫ßn l·ªách   | Th·ª© trong tu·∫ßn (1 = Th·ª© 2 ‚Üí 7 = CN) | V·ªÅ th·ª© Hai g·∫ßn nh·∫•t + `weeks + days` |
| `MONTHLY`   | S·ªë th√°ng l·ªách  | Ng√†y trong th√°ng (1‚Äì31)   | V·ªÅ ƒë·∫ßu th√°ng r·ªìi set ng√†y      |
| `NONE`      | `Offset = 0`   | L√† ng√†y c·ª• th·ªÉ (`date`)   | Kh√¥ng t√≠nh theo chu k·ª≥, d√πng nguy√™n ng√†y |

---

### üîß H√†m t·ªïng qu√°t

```python
from datetime import datetime, timedelta, time, date

def calculate_datetime(base_date: datetime, offset: int, on, at: time, period_id: str) -> datetime:
    if period_id == "NONE":
        if not isinstance(on, date):
            raise ValueError("With Period_ID = 'NONE', `on` must be a `datetime.date` object")
        return datetime.combine(on, at)

    if period_id == "WEEKLY":
        anchor = base_date - timedelta(days=base_date.weekday())
        shifted = anchor + timedelta(weeks=offset)
        if on:
            shifted += timedelta(days=on - 1)

    elif period_id == "MONTHLY":
        anchor = base_date.replace(day=1)
        month = anchor.month + offset
        year = anchor.year + (month - 1) // 12
        month = (month - 1) % 12 + 1
        shifted = anchor.replace(year=year, month=month)
        if on:
            shifted = shifted.replace(day=on)

    else:  # DAILY
        shifted = base_date + timedelta(days=offset)
        if on:
            shifted += timedelta(days=on)

    return datetime.combine(shifted.date(), at)
```
---
### üí° H√†m d·ª±ng to√†n b·ªô m·ªëc th·ªùi gian cho m·ªôt lo·∫°i b√°o c√°o
```python
def generate_all_datetimes(base_date: datetime, rt) -> dict:
    period_id = rt.Period_ID
    return {
        "ActiveAt": calculate_datetime(base_date, rt.ActiveOffset, rt.ActiveOn, rt.ActiveAt, period_id),
        "DeactiveAt": calculate_datetime(base_date, rt.DeactiveOffset, rt.DeactiveOn, rt.DeactiveAt, period_id),
        "StartAt": calculate_datetime(base_date, rt.StartOffset, rt.StartOn, rt.StartAt, period_id),
        "EndAt": calculate_datetime(base_date, rt.EndOffset, rt.EndOn, rt.EndAt, period_id),
        "FromAt": calculate_datetime(base_date, rt.FromOffset, rt.FromOn, rt.From, period_id),
        "ToAt": calculate_datetime(base_date, rt.ToOffset, rt.ToOn, rt.To, period_id),
        "XaActiveAt": calculate_datetime(base_date, rt.XaActiveOffset, rt.XaActiveOn, rt.XaActiveAt, period_id) if rt.XaActiveAt else None,
        "XaDeactiveAt": calculate_datetime(base_date, rt.XaDeactiveOffset, rt.XaDeactiveOn, rt.XaDeactiveAt, period_id) if rt.XaDeactiveAt else None,
        "XaStartAt": calculate_datetime(base_date, rt.XaStartOffset, rt.XaStartOn, rt.XaStartAt, period_id) if rt.XaStartAt else None,
        "XaEndAt": calculate_datetime(base_date, rt.XaEndOffset, rt.XaEndOn, rt.XaEndAt, period_id) if rt.XaEndAt else None,
        "XaFromAt": calculate_datetime(base_date, rt.XaFromOffset, rt.XaFromOn, rt.XaFromAt, period_id) if rt.XaFromAt else None,
        "XaToAt": calculate_datetime(base_date, rt.XaToOffset, rt.XaToOn, rt.XaToAt, period_id) if rt.XaToAt else None,
    }
```
---

### üìå Ghi ch√∫
- `base_date` th∆∞·ªùng l√† `datetime.now()`, d√πng l√†m m·ªëc t√≠nh to√°n.
- T·∫•t c·∫£ c√°c gi√° tr·ªã th·ªùi gian ƒë∆∞·ª£c tr·∫£ v·ªÅ ƒë·ªÅu ·ªü ƒë·ªãnh d·∫°ng `datetime`, d√πng ƒë∆∞·ª£c cho `Period.*At`.
- Scheduler c·ªßa h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ªçi h√†m n√†y ƒë·ªÉ t·∫°o c√°c k·ª≥ b√°o c√°o theo ƒë·ªãnh k·ª≥.

---
## 5.¬†ƒê·ªãnh nghƒ©a b·∫£ng SQL (PostgreSQL)
CREATE TABLE loai_baocao (
    id SERIAL PRIMARY KEY,
    code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    period_id VARCHAR(10) NOT NULL CHECK (period_id IN ('DAILY', 'WEEKLY', 'MONTHLY', 'NONE')),

    active_offset SMALLINT DEFAULT 0,
    active_on SMALLINT DEFAULT 0,
    active_at TIME NOT NULL DEFAULT '00:00:00',

    deactive_offset SMALLINT DEFAULT 0,
    deactive_on SMALLINT DEFAULT 0,
    deactive_at TIME NOT NULL DEFAULT '23:59:59',

    start_offset SMALLINT DEFAULT 0,
    start_on SMALLINT DEFAULT 0,
    start_at TIME NOT NULL DEFAULT '00:00:00',

    end_offset SMALLINT DEFAULT 0,
    end_on SMALLINT DEFAULT 0,
    end_at TIME NOT NULL DEFAULT '23:59:59',

    from_offset SMALLINT DEFAULT 0,
    from_on SMALLINT DEFAULT 0,
    from_at TIME NOT NULL DEFAULT '00:00:00',

    to_offset SMALLINT DEFAULT 0,
    to_on SMALLINT DEFAULT 0,
    to_at TIME NOT NULL DEFAULT '23:59:59',

    xa_active_offset SMALLINT DEFAULT 0,
    xa_active_on SMALLINT DEFAULT 0,
    xa_active_at TIME DEFAULT '00:00:00',

    xa_deactive_offset SMALLINT DEFAULT 0,
    xa_deactive_on SMALLINT DEFAULT 0,
    xa_deactive_at TIME DEFAULT '23:59:59',

    xa_start_offset SMALLINT DEFAULT 0,
    xa_start_on SMALLINT DEFAULT 0,
    xa_start_at TIME DEFAULT '00:00:00',

    xa_end_offset SMALLINT DEFAULT 0,
    xa_end_on SMALLINT DEFAULT 0,
    xa_end_at TIME DEFAULT '23:59:59',

    xa_from_offset SMALLINT DEFAULT 0,
    xa_from_on SMALLINT DEFAULT 0,
    xa_from_at TIME DEFAULT '00:00:00',

    xa_to_offset SMALLINT DEFAULT 0,
    xa_to_on SMALLINT DEFAULT 0,
    xa_to_at TIME DEFAULT '23:59:59',

    doc_ext_list VARCHAR(255) NOT NULL DEFAULT '.doc .docx .pdf .bm2 .jpg .xlsx .xls',
    max_size VARCHAR(20) NOT NULL DEFAULT '100MB',

    next_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

##6¬†¬∑¬†T√†i li·ªáu tham kh·∫£o nhanh API

| Ph∆∞∆°ng th·ª©c | Endpoint | M√¥ t·∫£ |
|-------------|----------|-------|
| `POST` | `/admin/loaibaocao` | T·∫°o m·ªõi lo·∫°i b√°o c√°o (body = JSON theo c·∫•u tr√∫c tr√™n) |
| `GET` | `/admin/loaibaocao` | Danh s√°ch t·∫•t c·∫£ lo·∫°i b√°o c√°o |
| `PUT` | `/admin/loaibaocao/{id}` | C·∫≠p nh·∫≠t |
| `DELETE` | `/admin/loaibaocao/{id}` | Xo√° |

